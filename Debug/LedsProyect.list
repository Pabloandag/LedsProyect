
LedsProyect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e30  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005ef0  08005ef0  00015ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fd4  08005fd4  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08005fd4  08005fd4  00015fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fdc  08005fdc  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fdc  08005fdc  00015fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fe0  08005fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a64  20000020  08006004  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a84  08006004  00021a84  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d2d  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000353f  00000000  00000000  00037d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003b2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003c690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035e2  00000000  00000000  0003d920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154e3  00000000  00000000  00040f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de27  00000000  00000000  000563e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e420c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004734  00000000  00000000  000e4260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005ed8 	.word	0x08005ed8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08005ed8 	.word	0x08005ed8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8d8 	bl	8000484 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8d3 	bl	8000484 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzsi2>:
 8000448:	211c      	movs	r1, #28
 800044a:	2301      	movs	r3, #1
 800044c:	041b      	lsls	r3, r3, #16
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0xe>
 8000452:	0c00      	lsrs	r0, r0, #16
 8000454:	3910      	subs	r1, #16
 8000456:	0a1b      	lsrs	r3, r3, #8
 8000458:	4298      	cmp	r0, r3
 800045a:	d301      	bcc.n	8000460 <__clzsi2+0x18>
 800045c:	0a00      	lsrs	r0, r0, #8
 800045e:	3908      	subs	r1, #8
 8000460:	091b      	lsrs	r3, r3, #4
 8000462:	4298      	cmp	r0, r3
 8000464:	d301      	bcc.n	800046a <__clzsi2+0x22>
 8000466:	0900      	lsrs	r0, r0, #4
 8000468:	3904      	subs	r1, #4
 800046a:	a202      	add	r2, pc, #8	; (adr r2, 8000474 <__clzsi2+0x2c>)
 800046c:	5c10      	ldrb	r0, [r2, r0]
 800046e:	1840      	adds	r0, r0, r1
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	02020304 	.word	0x02020304
 8000478:	01010101 	.word	0x01010101
	...

08000484 <__clzdi2>:
 8000484:	b510      	push	{r4, lr}
 8000486:	2900      	cmp	r1, #0
 8000488:	d103      	bne.n	8000492 <__clzdi2+0xe>
 800048a:	f7ff ffdd 	bl	8000448 <__clzsi2>
 800048e:	3020      	adds	r0, #32
 8000490:	e002      	b.n	8000498 <__clzdi2+0x14>
 8000492:	1c08      	adds	r0, r1, #0
 8000494:	f7ff ffd8 	bl	8000448 <__clzsi2>
 8000498:	bd10      	pop	{r4, pc}
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 fba4 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f824 	bl	80004f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  BSP_LED_Init(LED1);
 80004a8:	2000      	movs	r0, #0
 80004aa:	f000 fb27 	bl	8000afc <BSP_LED_Init>
  BSP_LED_Init(LED3);
 80004ae:	2002      	movs	r0, #2
 80004b0:	f000 fb24 	bl	8000afc <BSP_LED_Init>
  BSP_LED_Init(LED4);
 80004b4:	2003      	movs	r0, #3
 80004b6:	f000 fb21 	bl	8000afc <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  MX_RTC_Init();
 80004ba:	f000 f895 	bl	80005e8 <MX_RTC_Init>
  MX_SPI1_Init();
 80004be:	f000 f933 	bl	8000728 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004c2:	f000 f969 	bl	8000798 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004c6:	f003 fa73 	bl	80039b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004ca:	4a06      	ldr	r2, [pc, #24]	; (80004e4 <main+0x48>)
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <main+0x4c>)
 80004ce:	2100      	movs	r1, #0
 80004d0:	0018      	movs	r0, r3
 80004d2:	f003 fac9 	bl	8003a68 <osThreadNew>
 80004d6:	0002      	movs	r2, r0
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <main+0x50>)
 80004da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004dc:	f003 fa94 	bl	8003a08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0x44>
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	08005f14 	.word	0x08005f14
 80004e8:	080007f9 	.word	0x080007f9
 80004ec:	2000193c 	.word	0x2000193c

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b09d      	sub	sp, #116	; 0x74
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	2438      	movs	r4, #56	; 0x38
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	0018      	movs	r0, r3
 80004fc:	2338      	movs	r3, #56	; 0x38
 80004fe:	001a      	movs	r2, r3
 8000500:	2100      	movs	r1, #0
 8000502:	f005 fce0 	bl	8005ec6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000506:	2324      	movs	r3, #36	; 0x24
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	0018      	movs	r0, r3
 800050c:	2314      	movs	r3, #20
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f005 fcd8 	bl	8005ec6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000516:	003b      	movs	r3, r7
 8000518:	0018      	movs	r0, r3
 800051a:	2324      	movs	r3, #36	; 0x24
 800051c:	001a      	movs	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	f005 fcd1 	bl	8005ec6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000524:	4b2e      	ldr	r3, [pc, #184]	; (80005e0 <SystemClock_Config+0xf0>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a2e      	ldr	r2, [pc, #184]	; (80005e4 <SystemClock_Config+0xf4>)
 800052a:	401a      	ands	r2, r3
 800052c:	4b2c      	ldr	r3, [pc, #176]	; (80005e0 <SystemClock_Config+0xf0>)
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	0109      	lsls	r1, r1, #4
 8000532:	430a      	orrs	r2, r1
 8000534:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000536:	0021      	movs	r1, r4
 8000538:	187b      	adds	r3, r7, r1
 800053a:	220a      	movs	r2, #10
 800053c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2201      	movs	r2, #1
 8000542:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2210      	movs	r2, #16
 8000548:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2201      	movs	r2, #1
 800054e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2202      	movs	r2, #2
 8000554:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	0312      	lsls	r2, r2, #12
 8000562:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	0412      	lsls	r2, r2, #16
 800056a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	187b      	adds	r3, r7, r1
 800056e:	0018      	movs	r0, r3
 8000570:	f000 feee 	bl	8001350 <HAL_RCC_OscConfig>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000578:	f000 f951 	bl	800081e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	2124      	movs	r1, #36	; 0x24
 800057e:	187b      	adds	r3, r7, r1
 8000580:	220f      	movs	r2, #15
 8000582:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2203      	movs	r2, #3
 8000588:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2101      	movs	r1, #1
 80005a0:	0018      	movs	r0, r3
 80005a2:	f001 faa9 	bl	8001af8 <HAL_RCC_ClockConfig>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005aa:	f000 f938 	bl	800081e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80005ae:	003b      	movs	r3, r7
 80005b0:	222a      	movs	r2, #42	; 0x2a
 80005b2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005b4:	003b      	movs	r3, r7
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005ba:	003b      	movs	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005c0:	003b      	movs	r3, r7
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	0292      	lsls	r2, r2, #10
 80005c6:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c8:	003b      	movs	r3, r7
 80005ca:	0018      	movs	r0, r3
 80005cc:	f001 fcb8 	bl	8001f40 <HAL_RCCEx_PeriphCLKConfig>
 80005d0:	1e03      	subs	r3, r0, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80005d4:	f000 f923 	bl	800081e <Error_Handler>
  }
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b01d      	add	sp, #116	; 0x74
 80005de:	bd90      	pop	{r4, r7, pc}
 80005e0:	40007000 	.word	0x40007000
 80005e4:	ffffe7ff 	.word	0xffffe7ff

080005e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b090      	sub	sp, #64	; 0x40
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005ee:	232c      	movs	r3, #44	; 0x2c
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	0018      	movs	r0, r3
 80005f4:	2314      	movs	r3, #20
 80005f6:	001a      	movs	r2, r3
 80005f8:	2100      	movs	r1, #0
 80005fa:	f005 fc64 	bl	8005ec6 <memset>
  RTC_DateTypeDef sDate = {0};
 80005fe:	2328      	movs	r3, #40	; 0x28
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000606:	003b      	movs	r3, r7
 8000608:	0018      	movs	r0, r3
 800060a:	2328      	movs	r3, #40	; 0x28
 800060c:	001a      	movs	r2, r3
 800060e:	2100      	movs	r1, #0
 8000610:	f005 fc59 	bl	8005ec6 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000614:	4b41      	ldr	r3, [pc, #260]	; (800071c <MX_RTC_Init+0x134>)
 8000616:	4a42      	ldr	r2, [pc, #264]	; (8000720 <MX_RTC_Init+0x138>)
 8000618:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800061a:	4b40      	ldr	r3, [pc, #256]	; (800071c <MX_RTC_Init+0x134>)
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 8000620:	4b3e      	ldr	r3, [pc, #248]	; (800071c <MX_RTC_Init+0x134>)
 8000622:	221f      	movs	r2, #31
 8000624:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 8000626:	4b3d      	ldr	r3, [pc, #244]	; (800071c <MX_RTC_Init+0x134>)
 8000628:	4a3e      	ldr	r2, [pc, #248]	; (8000724 <MX_RTC_Init+0x13c>)
 800062a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800062c:	4b3b      	ldr	r3, [pc, #236]	; (800071c <MX_RTC_Init+0x134>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000632:	4b3a      	ldr	r3, [pc, #232]	; (800071c <MX_RTC_Init+0x134>)
 8000634:	2200      	movs	r2, #0
 8000636:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000638:	4b38      	ldr	r3, [pc, #224]	; (800071c <MX_RTC_Init+0x134>)
 800063a:	2200      	movs	r2, #0
 800063c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800063e:	4b37      	ldr	r3, [pc, #220]	; (800071c <MX_RTC_Init+0x134>)
 8000640:	2200      	movs	r2, #0
 8000642:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000644:	4b35      	ldr	r3, [pc, #212]	; (800071c <MX_RTC_Init+0x134>)
 8000646:	0018      	movs	r0, r3
 8000648:	f001 fdd0 	bl	80021ec <HAL_RTC_Init>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d001      	beq.n	8000654 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000650:	f000 f8e5 	bl	800081e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000654:	212c      	movs	r1, #44	; 0x2c
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2200      	movs	r2, #0
 8000660:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000674:	1879      	adds	r1, r7, r1
 8000676:	4b29      	ldr	r3, [pc, #164]	; (800071c <MX_RTC_Init+0x134>)
 8000678:	2200      	movs	r2, #0
 800067a:	0018      	movs	r0, r3
 800067c:	f001 fe54 	bl	8002328 <HAL_RTC_SetTime>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000684:	f000 f8cb 	bl	800081e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000688:	2128      	movs	r1, #40	; 0x28
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2201      	movs	r2, #1
 8000694:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2201      	movs	r2, #1
 800069a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2200      	movs	r2, #0
 80006a0:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80006a2:	1879      	adds	r1, r7, r1
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_RTC_Init+0x134>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 ff01 	bl	80024b0 <HAL_RTC_SetDate>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80006b2:	f000 f8b4 	bl	800081e <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80006b6:	003b      	movs	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80006bc:	003b      	movs	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80006c2:	003b      	movs	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80006c8:	003b      	movs	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006ce:	003b      	movs	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006d4:	003b      	movs	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80006da:	003b      	movs	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80006e0:	003b      	movs	r3, r7
 80006e2:	22f0      	movs	r2, #240	; 0xf0
 80006e4:	0512      	lsls	r2, r2, #20
 80006e6:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80006e8:	003b      	movs	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80006ee:	003b      	movs	r3, r7
 80006f0:	2220      	movs	r2, #32
 80006f2:	2101      	movs	r1, #1
 80006f4:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80006f6:	003b      	movs	r3, r7
 80006f8:	2280      	movs	r2, #128	; 0x80
 80006fa:	0052      	lsls	r2, r2, #1
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80006fe:	0039      	movs	r1, r7
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_RTC_Init+0x134>)
 8000702:	2200      	movs	r2, #0
 8000704:	0018      	movs	r0, r3
 8000706:	f001 ff81 	bl	800260c <HAL_RTC_SetAlarm_IT>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 800070e:	f000 f886 	bl	800081e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b010      	add	sp, #64	; 0x40
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	20001940 	.word	0x20001940
 8000720:	40002800 	.word	0x40002800
 8000724:	000003ff 	.word	0x000003ff

08000728 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_SPI1_Init+0x68>)
 800072e:	4a19      	ldr	r2, [pc, #100]	; (8000794 <MX_SPI1_Init+0x6c>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_SPI1_Init+0x68>)
 8000734:	2282      	movs	r2, #130	; 0x82
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_SPI1_Init+0x68>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_SPI1_Init+0x68>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_SPI1_Init+0x68>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_SPI1_Init+0x68>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_SPI1_Init+0x68>)
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	0092      	lsls	r2, r2, #2
 8000758:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <MX_SPI1_Init+0x68>)
 800075c:	2220      	movs	r2, #32
 800075e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_SPI1_Init+0x68>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_SPI1_Init+0x68>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_SPI1_Init+0x68>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <MX_SPI1_Init+0x68>)
 8000774:	2207      	movs	r2, #7
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <MX_SPI1_Init+0x68>)
 800077a:	0018      	movs	r0, r3
 800077c:	f002 f96a 	bl	8002a54 <HAL_SPI_Init>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 f84b 	bl	800081e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	20001964 	.word	0x20001964
 8000794:	40013000 	.word	0x40013000

08000798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <MX_USART2_UART_Init+0x5c>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007a4:	22e1      	movs	r2, #225	; 0xe1
 80007a6:	0252      	lsls	r2, r2, #9
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f002 f9cd 	bl	8002b7c <HAL_UART_Init>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007e6:	f000 f81a 	bl	800081e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200019bc 	.word	0x200019bc
 80007f4:	40004400 	.word	0x40004400

080007f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  BSP_LED_Toggle(LED1);
 8000800:	2000      	movs	r0, #0
 8000802:	f000 f9d7 	bl	8000bb4 <BSP_LED_Toggle>
	  BSP_LED_Toggle(LED3);
 8000806:	2002      	movs	r0, #2
 8000808:	f000 f9d4 	bl	8000bb4 <BSP_LED_Toggle>
	  BSP_LED_Toggle(LED4);
 800080c:	2003      	movs	r0, #3
 800080e:	f000 f9d1 	bl	8000bb4 <BSP_LED_Toggle>
	  /*HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_5);
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_6);
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);*/
    osDelay(500);
 8000812:	23fa      	movs	r3, #250	; 0xfa
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	0018      	movs	r0, r3
 8000818:	f003 f9ca 	bl	8003bb0 <osDelay>
	  BSP_LED_Toggle(LED1);
 800081c:	e7f0      	b.n	8000800 <StartDefaultTask+0x8>

0800081e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000822:	b672      	cpsid	i
}
 8000824:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000826:	e7fe      	b.n	8000826 <Error_Handler+0x8>

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <HAL_MspInit+0x34>)
 800082e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <HAL_MspInit+0x34>)
 8000832:	2101      	movs	r1, #1
 8000834:	430a      	orrs	r2, r1
 8000836:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_MspInit+0x34>)
 800083a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <HAL_MspInit+0x34>)
 800083e:	2180      	movs	r1, #128	; 0x80
 8000840:	0549      	lsls	r1, r1, #21
 8000842:	430a      	orrs	r2, r1
 8000844:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000846:	2302      	movs	r3, #2
 8000848:	425b      	negs	r3, r3
 800084a:	2200      	movs	r2, #0
 800084c:	2103      	movs	r1, #3
 800084e:	0018      	movs	r0, r3
 8000850:	f000 fae8 	bl	8000e24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	40021000 	.word	0x40021000

08000860 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <HAL_RTC_MspInit+0x38>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d10e      	bne.n	8000890 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_RTC_MspInit+0x3c>)
 8000874:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_RTC_MspInit+0x3c>)
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	02c9      	lsls	r1, r1, #11
 800087c:	430a      	orrs	r2, r1
 800087e:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 3, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2103      	movs	r1, #3
 8000884:	2002      	movs	r0, #2
 8000886:	f000 facd 	bl	8000e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800088a:	2002      	movs	r0, #2
 800088c:	f000 fadf 	bl	8000e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	b002      	add	sp, #8
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40002800 	.word	0x40002800
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b08b      	sub	sp, #44	; 0x2c
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	2414      	movs	r4, #20
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	0018      	movs	r0, r3
 80008ae:	2314      	movs	r3, #20
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f005 fb07 	bl	8005ec6 <memset>
  if(hspi->Instance==SPI1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a28      	ldr	r2, [pc, #160]	; (8000960 <HAL_SPI_MspInit+0xc0>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d14a      	bne.n	8000958 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008c2:	4b28      	ldr	r3, [pc, #160]	; (8000964 <HAL_SPI_MspInit+0xc4>)
 80008c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008c6:	4b27      	ldr	r3, [pc, #156]	; (8000964 <HAL_SPI_MspInit+0xc4>)
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	0149      	lsls	r1, r1, #5
 80008cc:	430a      	orrs	r2, r1
 80008ce:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <HAL_SPI_MspInit+0xc4>)
 80008d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <HAL_SPI_MspInit+0xc4>)
 80008d6:	2102      	movs	r1, #2
 80008d8:	430a      	orrs	r2, r1
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
 80008dc:	4b21      	ldr	r3, [pc, #132]	; (8000964 <HAL_SPI_MspInit+0xc4>)
 80008de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e0:	2202      	movs	r2, #2
 80008e2:	4013      	ands	r3, r2
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <HAL_SPI_MspInit+0xc4>)
 80008ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <HAL_SPI_MspInit+0xc4>)
 80008ee:	2101      	movs	r1, #1
 80008f0:	430a      	orrs	r2, r1
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <HAL_SPI_MspInit+0xc4>)
 80008f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f8:	2201      	movs	r2, #1
 80008fa:	4013      	ands	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = PB3_RESERVED_Pin;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2208      	movs	r2, #8
 8000904:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2202      	movs	r2, #2
 800090a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	193b      	adds	r3, r7, r4
 8000914:	2203      	movs	r2, #3
 8000916:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000918:	193b      	adds	r3, r7, r4
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PB3_RESERVED_GPIO_Port, &GPIO_InitStruct);
 800091e:	193b      	adds	r3, r7, r4
 8000920:	4a11      	ldr	r2, [pc, #68]	; (8000968 <HAL_SPI_MspInit+0xc8>)
 8000922:	0019      	movs	r1, r3
 8000924:	0010      	movs	r0, r2
 8000926:	f000 fb37 	bl	8000f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA7_RESERVED_Pin|PA6_RESERVED_Pin;
 800092a:	0021      	movs	r1, r4
 800092c:	187b      	adds	r3, r7, r1
 800092e:	22c0      	movs	r2, #192	; 0xc0
 8000930:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2202      	movs	r2, #2
 8000936:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2203      	movs	r2, #3
 8000942:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	187a      	adds	r2, r7, r1
 800094c:	23a0      	movs	r3, #160	; 0xa0
 800094e:	05db      	lsls	r3, r3, #23
 8000950:	0011      	movs	r1, r2
 8000952:	0018      	movs	r0, r3
 8000954:	f000 fb20 	bl	8000f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b00b      	add	sp, #44	; 0x2c
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	40013000 	.word	0x40013000
 8000964:	40021000 	.word	0x40021000
 8000968:	50000400 	.word	0x50000400

0800096c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b089      	sub	sp, #36	; 0x24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	240c      	movs	r4, #12
 8000976:	193b      	adds	r3, r7, r4
 8000978:	0018      	movs	r0, r3
 800097a:	2314      	movs	r3, #20
 800097c:	001a      	movs	r2, r3
 800097e:	2100      	movs	r1, #0
 8000980:	f005 faa1 	bl	8005ec6 <memset>
  if(huart->Instance==USART2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a1c      	ldr	r2, [pc, #112]	; (80009fc <HAL_UART_MspInit+0x90>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d131      	bne.n	80009f2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <HAL_UART_MspInit+0x94>)
 8000990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <HAL_UART_MspInit+0x94>)
 8000994:	2180      	movs	r1, #128	; 0x80
 8000996:	0289      	lsls	r1, r1, #10
 8000998:	430a      	orrs	r2, r1
 800099a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_UART_MspInit+0x94>)
 800099e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_UART_MspInit+0x94>)
 80009a2:	2101      	movs	r1, #1
 80009a4:	430a      	orrs	r2, r1
 80009a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_UART_MspInit+0x94>)
 80009aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ac:	2201      	movs	r2, #1
 80009ae:	4013      	ands	r3, r2
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80009b4:	0021      	movs	r1, r4
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	220c      	movs	r2, #12
 80009ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2202      	movs	r2, #2
 80009c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2203      	movs	r2, #3
 80009cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2204      	movs	r2, #4
 80009d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	187a      	adds	r2, r7, r1
 80009d6:	23a0      	movs	r3, #160	; 0xa0
 80009d8:	05db      	lsls	r3, r3, #23
 80009da:	0011      	movs	r1, r2
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 fadb 	bl	8000f98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2103      	movs	r1, #3
 80009e6:	201c      	movs	r0, #28
 80009e8:	f000 fa1c 	bl	8000e24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009ec:	201c      	movs	r0, #28
 80009ee:	f000 fa2e 	bl	8000e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b009      	add	sp, #36	; 0x24
 80009f8:	bd90      	pop	{r4, r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	40004400 	.word	0x40004400
 8000a00:	40021000 	.word	0x40021000

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <NMI_Handler+0x4>

08000a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <HardFault_Handler+0x4>

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a14:	f000 f93e 	bl	8000c94 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a18:	f004 fb70 	bl	80050fc <xTaskGetSchedulerState>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d001      	beq.n	8000a26 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a22:	f005 f841 	bl	8005aa8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <RTC_IRQHandler+0x14>)
 8000a32:	0018      	movs	r0, r3
 8000a34:	f001 ff36 	bl	80028a4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	20001940 	.word	0x20001940

08000a44 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f000 fc5b 	bl	8001304 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f000 fc58 	bl	8001304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000a5e:	2004      	movs	r0, #4
 8000a60:	f000 fc50 	bl	8001304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000a6e:	2010      	movs	r0, #16
 8000a70:	f000 fc48 	bl	8001304 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	019b      	lsls	r3, r3, #6
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 fc43 	bl	8001304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <USART2_IRQHandler+0x14>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f002 f8ca 	bl	8002c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	200019bc 	.word	0x200019bc

08000a9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000aaa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aae:	490e      	ldr	r1, [pc, #56]	; (8000ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab0:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <LoopForever+0xe>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac4:	4c0b      	ldr	r4, [pc, #44]	; (8000af4 <LoopForever+0x16>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ad2:	f7ff ffe3 	bl	8000a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f005 f9c9 	bl	8005e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ada:	f7ff fcdf 	bl	800049c <main>

08000ade <LoopForever>:

LoopForever:
    b LoopForever
 8000ade:	e7fe      	b.n	8000ade <LoopForever>
   ldr   r0, =_estack
 8000ae0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000aec:	08005fe4 	.word	0x08005fe4
  ldr r2, =_sbss
 8000af0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000af4:	20001a84 	.word	0x20001a84

08000af8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_COMP_IRQHandler>
	...

08000afc <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b08b      	sub	sp, #44	; 0x2c
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	0002      	movs	r2, r0
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	701a      	strb	r2, [r3, #0]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	2414      	movs	r4, #20
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	2314      	movs	r3, #20
 8000b10:	001a      	movs	r2, r3
 8000b12:	2100      	movs	r1, #0
 8000b14:	f005 f9d7 	bl	8005ec6 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <BSP_LED_Init+0xac>)
 8000b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <BSP_LED_Init+0xac>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	430a      	orrs	r2, r1
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b24:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <BSP_LED_Init+0xac>)
 8000b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <BSP_LED_Init+0xac>)
 8000b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <BSP_LED_Init+0xac>)
 8000b36:	2102      	movs	r1, #2
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <BSP_LED_Init+0xac>)
 8000b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b40:	2202      	movs	r2, #2
 8000b42:	4013      	ands	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	781a      	ldrb	r2, [r3, #0]
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <BSP_LED_Init+0xb0>)
 8000b4e:	0092      	lsls	r2, r2, #2
 8000b50:	58d0      	ldr	r0, [r2, r3]
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781a      	ldrb	r2, [r3, #0]
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <BSP_LED_Init+0xb4>)
 8000b58:	0052      	lsls	r2, r2, #1
 8000b5a:	5ad3      	ldrh	r3, [r2, r3]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	0019      	movs	r1, r3
 8000b60:	f000 fb98 	bl	8001294 <HAL_GPIO_WritePin>


	/*Configure GPIO pin */
	GPIO_InitStruct.Pin = LED_PIN[Led];
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	781a      	ldrb	r2, [r3, #0]
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <BSP_LED_Init+0xb4>)
 8000b6a:	0052      	lsls	r2, r2, #1
 8000b6c:	5ad3      	ldrh	r3, [r2, r3]
 8000b6e:	001a      	movs	r2, r3
 8000b70:	0021      	movs	r1, r4
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2201      	movs	r2, #1
 8000b7a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8000b88:	1dfb      	adds	r3, r7, #7
 8000b8a:	781a      	ldrb	r2, [r3, #0]
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <BSP_LED_Init+0xb0>)
 8000b8e:	0092      	lsls	r2, r2, #2
 8000b90:	58d3      	ldr	r3, [r2, r3]
 8000b92:	187a      	adds	r2, r7, r1
 8000b94:	0011      	movs	r1, r2
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 f9fe 	bl	8000f98 <HAL_GPIO_Init>
  //static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  //LedGpioInit[Led]();
    return BSP_ERROR_NONE;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b00b      	add	sp, #44	; 0x2c
 8000ba4:	bd90      	pop	{r4, r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	20000004 	.word	0x20000004
 8000bb0:	08005f5c 	.word	0x08005f5c

08000bb4 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	0002      	movs	r2, r0
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <BSP_LED_Toggle+0x30>)
 8000bc6:	0092      	lsls	r2, r2, #2
 8000bc8:	58d0      	ldr	r0, [r2, r3]
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781a      	ldrb	r2, [r3, #0]
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <BSP_LED_Toggle+0x34>)
 8000bd0:	0052      	lsls	r2, r2, #1
 8000bd2:	5ad3      	ldrh	r3, [r2, r3]
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	f000 fb7a 	bl	80012ce <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b002      	add	sp, #8
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000004 	.word	0x20000004
 8000be8:	08005f5c 	.word	0x08005f5c

08000bec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_Init+0x3c>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_Init+0x3c>)
 8000bfe:	2140      	movs	r1, #64	; 0x40
 8000c00:	430a      	orrs	r2, r1
 8000c02:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f811 	bl	8000c2c <HAL_InitTick>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
 8000c14:	e001      	b.n	8000c1a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c16:	f7ff fe07 	bl	8000828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
}
 8000c1e:	0018      	movs	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b002      	add	sp, #8
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	40022000 	.word	0x40022000

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <HAL_InitTick+0x5c>)
 8000c36:	681c      	ldr	r4, [r3, #0]
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <HAL_InitTick+0x60>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	23fa      	movs	r3, #250	; 0xfa
 8000c40:	0098      	lsls	r0, r3, #2
 8000c42:	f7ff fa61 	bl	8000108 <__udivsi3>
 8000c46:	0003      	movs	r3, r0
 8000c48:	0019      	movs	r1, r3
 8000c4a:	0020      	movs	r0, r4
 8000c4c:	f7ff fa5c 	bl	8000108 <__udivsi3>
 8000c50:	0003      	movs	r3, r0
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 f90b 	bl	8000e6e <HAL_SYSTICK_Config>
 8000c58:	1e03      	subs	r3, r0, #0
 8000c5a:	d001      	beq.n	8000c60 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e00f      	b.n	8000c80 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d80b      	bhi.n	8000c7e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	425b      	negs	r3, r3
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 f8d8 	bl	8000e24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_InitTick+0x64>)
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e000      	b.n	8000c80 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b003      	add	sp, #12
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000018 	.word	0x20000018
 8000c90:	20000014 	.word	0x20000014

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <HAL_IncTick+0x1c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <HAL_IncTick+0x20>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	18d2      	adds	r2, r2, r3
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <HAL_IncTick+0x20>)
 8000ca6:	601a      	str	r2, [r3, #0]
}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	20000018 	.word	0x20000018
 8000cb4:	20001a40 	.word	0x20001a40

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b02      	ldr	r3, [pc, #8]	; (8000cc8 <HAL_GetTick+0x10>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	20001a40 	.word	0x20001a40

08000ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b7f      	cmp	r3, #127	; 0x7f
 8000cde:	d809      	bhi.n	8000cf4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce0:	1dfb      	adds	r3, r7, #7
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	231f      	movs	r3, #31
 8000ce8:	401a      	ands	r2, r3
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <__NVIC_EnableIRQ+0x30>)
 8000cec:	2101      	movs	r1, #1
 8000cee:	4091      	lsls	r1, r2
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]
  }
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	0002      	movs	r2, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b7f      	cmp	r3, #127	; 0x7f
 8000d14:	d828      	bhi.n	8000d68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d16:	4a2f      	ldr	r2, [pc, #188]	; (8000dd4 <__NVIC_SetPriority+0xd4>)
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b25b      	sxtb	r3, r3
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	33c0      	adds	r3, #192	; 0xc0
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	589b      	ldr	r3, [r3, r2]
 8000d26:	1dfa      	adds	r2, r7, #7
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	400a      	ands	r2, r1
 8000d30:	00d2      	lsls	r2, r2, #3
 8000d32:	21ff      	movs	r1, #255	; 0xff
 8000d34:	4091      	lsls	r1, r2
 8000d36:	000a      	movs	r2, r1
 8000d38:	43d2      	mvns	r2, r2
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	019b      	lsls	r3, r3, #6
 8000d42:	22ff      	movs	r2, #255	; 0xff
 8000d44:	401a      	ands	r2, r3
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	4003      	ands	r3, r0
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d54:	481f      	ldr	r0, [pc, #124]	; (8000dd4 <__NVIC_SetPriority+0xd4>)
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	089b      	lsrs	r3, r3, #2
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	33c0      	adds	r3, #192	; 0xc0
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d66:	e031      	b.n	8000dcc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d68:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <__NVIC_SetPriority+0xd8>)
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	0019      	movs	r1, r3
 8000d70:	230f      	movs	r3, #15
 8000d72:	400b      	ands	r3, r1
 8000d74:	3b08      	subs	r3, #8
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	3306      	adds	r3, #6
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	18d3      	adds	r3, r2, r3
 8000d7e:	3304      	adds	r3, #4
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	1dfa      	adds	r2, r7, #7
 8000d84:	7812      	ldrb	r2, [r2, #0]
 8000d86:	0011      	movs	r1, r2
 8000d88:	2203      	movs	r2, #3
 8000d8a:	400a      	ands	r2, r1
 8000d8c:	00d2      	lsls	r2, r2, #3
 8000d8e:	21ff      	movs	r1, #255	; 0xff
 8000d90:	4091      	lsls	r1, r2
 8000d92:	000a      	movs	r2, r1
 8000d94:	43d2      	mvns	r2, r2
 8000d96:	401a      	ands	r2, r3
 8000d98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	019b      	lsls	r3, r3, #6
 8000d9e:	22ff      	movs	r2, #255	; 0xff
 8000da0:	401a      	ands	r2, r3
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	0018      	movs	r0, r3
 8000da8:	2303      	movs	r3, #3
 8000daa:	4003      	ands	r3, r0
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db0:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <__NVIC_SetPriority+0xd8>)
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	001c      	movs	r4, r3
 8000db8:	230f      	movs	r3, #15
 8000dba:	4023      	ands	r3, r4
 8000dbc:	3b08      	subs	r3, #8
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	3306      	adds	r3, #6
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	18c3      	adds	r3, r0, r3
 8000dc8:	3304      	adds	r3, #4
 8000dca:	601a      	str	r2, [r3, #0]
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b003      	add	sp, #12
 8000dd2:	bd90      	pop	{r4, r7, pc}
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	1e5a      	subs	r2, r3, #1
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	045b      	lsls	r3, r3, #17
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d301      	bcc.n	8000df4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df0:	2301      	movs	r3, #1
 8000df2:	e010      	b.n	8000e16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <SysTick_Config+0x44>)
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	425b      	negs	r3, r3
 8000e00:	2103      	movs	r1, #3
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff ff7c 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Config+0x44>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SysTick_Config+0x44>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	0018      	movs	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b002      	add	sp, #8
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	210f      	movs	r1, #15
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	1c02      	adds	r2, r0, #0
 8000e34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff ff5d 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b004      	add	sp, #16
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	0002      	movs	r2, r0
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff ff33 	bl	8000ccc <__NVIC_EnableIRQ>
}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff ffaf 	bl	8000ddc <SysTick_Config>
 8000e7e:	0003      	movs	r3, r0
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b002      	add	sp, #8
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e90:	230f      	movs	r3, #15
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2225      	movs	r2, #37	; 0x25
 8000e9c:	5c9b      	ldrb	r3, [r3, r2]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d008      	beq.n	8000eb6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2224      	movs	r2, #36	; 0x24
 8000eae:	2100      	movs	r1, #0
 8000eb0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e024      	b.n	8000f00 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	210e      	movs	r1, #14
 8000ec2:	438a      	bics	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	438a      	bics	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	221c      	movs	r2, #28
 8000edc:	401a      	ands	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	4091      	lsls	r1, r2
 8000ee6:	000a      	movs	r2, r1
 8000ee8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2225      	movs	r2, #37	; 0x25
 8000eee:	2101      	movs	r1, #1
 8000ef0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2224      	movs	r2, #36	; 0x24
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	5499      	strb	r1, [r3, r2]

    return status;
 8000efa:	230f      	movs	r3, #15
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b004      	add	sp, #16
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f10:	210f      	movs	r1, #15
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2225      	movs	r2, #37	; 0x25
 8000f1c:	5c9b      	ldrb	r3, [r3, r2]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d006      	beq.n	8000f32 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2204      	movs	r2, #4
 8000f28:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	e02a      	b.n	8000f88 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	210e      	movs	r1, #14
 8000f3e:	438a      	bics	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	438a      	bics	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	221c      	movs	r2, #28
 8000f58:	401a      	ands	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	2101      	movs	r1, #1
 8000f60:	4091      	lsls	r1, r2
 8000f62:	000a      	movs	r2, r1
 8000f64:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2225      	movs	r2, #37	; 0x25
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2224      	movs	r2, #36	; 0x24
 8000f72:	2100      	movs	r1, #0
 8000f74:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d004      	beq.n	8000f88 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	0010      	movs	r0, r2
 8000f86:	4798      	blx	r3
    }
  }
  return status;
 8000f88:	230f      	movs	r3, #15
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	781b      	ldrb	r3, [r3, #0]
}
 8000f8e:	0018      	movs	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b004      	add	sp, #16
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fae:	e155      	b.n	800125c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4091      	lsls	r1, r2
 8000fba:	000a      	movs	r2, r1
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d100      	bne.n	8000fc8 <HAL_GPIO_Init+0x30>
 8000fc6:	e146      	b.n	8001256 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d00b      	beq.n	8000fe8 <HAL_GPIO_Init+0x50>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d007      	beq.n	8000fe8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fdc:	2b11      	cmp	r3, #17
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b12      	cmp	r3, #18
 8000fe6:	d130      	bne.n	800104a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	0013      	movs	r3, r2
 8000ff8:	43da      	mvns	r2, r3
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	409a      	lsls	r2, r3
 800100a:	0013      	movs	r3, r2
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800101e:	2201      	movs	r2, #1
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
 8001024:	0013      	movs	r3, r2
 8001026:	43da      	mvns	r2, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	091b      	lsrs	r3, r3, #4
 8001034:	2201      	movs	r2, #1
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	43da      	mvns	r2, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	409a      	lsls	r2, r3
 800106c:	0013      	movs	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0xf2>
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b12      	cmp	r3, #18
 8001088:	d123      	bne.n	80010d2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	58d3      	ldr	r3, [r2, r3]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	2207      	movs	r2, #7
 800109c:	4013      	ands	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	409a      	lsls	r2, r3
 80010a4:	0013      	movs	r3, r2
 80010a6:	43da      	mvns	r2, r3
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	2107      	movs	r1, #7
 80010b6:	400b      	ands	r3, r1
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	409a      	lsls	r2, r3
 80010bc:	0013      	movs	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	08da      	lsrs	r2, r3, #3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3208      	adds	r2, #8
 80010cc:	0092      	lsls	r2, r2, #2
 80010ce:	6939      	ldr	r1, [r7, #16]
 80010d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	409a      	lsls	r2, r3
 80010e0:	0013      	movs	r3, r2
 80010e2:	43da      	mvns	r2, r3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2203      	movs	r2, #3
 80010f0:	401a      	ands	r2, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	409a      	lsls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	055b      	lsls	r3, r3, #21
 800110e:	4013      	ands	r3, r2
 8001110:	d100      	bne.n	8001114 <HAL_GPIO_Init+0x17c>
 8001112:	e0a0      	b.n	8001256 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001114:	4b57      	ldr	r3, [pc, #348]	; (8001274 <HAL_GPIO_Init+0x2dc>)
 8001116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001118:	4b56      	ldr	r3, [pc, #344]	; (8001274 <HAL_GPIO_Init+0x2dc>)
 800111a:	2101      	movs	r1, #1
 800111c:	430a      	orrs	r2, r1
 800111e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001120:	4a55      	ldr	r2, [pc, #340]	; (8001278 <HAL_GPIO_Init+0x2e0>)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	589b      	ldr	r3, [r3, r2]
 800112c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	2203      	movs	r2, #3
 8001132:	4013      	ands	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	409a      	lsls	r2, r3
 800113a:	0013      	movs	r3, r2
 800113c:	43da      	mvns	r2, r3
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	23a0      	movs	r3, #160	; 0xa0
 8001148:	05db      	lsls	r3, r3, #23
 800114a:	429a      	cmp	r2, r3
 800114c:	d01f      	beq.n	800118e <HAL_GPIO_Init+0x1f6>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4a      	ldr	r2, [pc, #296]	; (800127c <HAL_GPIO_Init+0x2e4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d019      	beq.n	800118a <HAL_GPIO_Init+0x1f2>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a49      	ldr	r2, [pc, #292]	; (8001280 <HAL_GPIO_Init+0x2e8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0x1ee>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a48      	ldr	r2, [pc, #288]	; (8001284 <HAL_GPIO_Init+0x2ec>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d00d      	beq.n	8001182 <HAL_GPIO_Init+0x1ea>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a47      	ldr	r2, [pc, #284]	; (8001288 <HAL_GPIO_Init+0x2f0>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x1e6>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a46      	ldr	r2, [pc, #280]	; (800128c <HAL_GPIO_Init+0x2f4>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_GPIO_Init+0x1e2>
 8001176:	2305      	movs	r3, #5
 8001178:	e00a      	b.n	8001190 <HAL_GPIO_Init+0x1f8>
 800117a:	2306      	movs	r3, #6
 800117c:	e008      	b.n	8001190 <HAL_GPIO_Init+0x1f8>
 800117e:	2304      	movs	r3, #4
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x1f8>
 8001182:	2303      	movs	r3, #3
 8001184:	e004      	b.n	8001190 <HAL_GPIO_Init+0x1f8>
 8001186:	2302      	movs	r3, #2
 8001188:	e002      	b.n	8001190 <HAL_GPIO_Init+0x1f8>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <HAL_GPIO_Init+0x1f8>
 800118e:	2300      	movs	r3, #0
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	2103      	movs	r1, #3
 8001194:	400a      	ands	r2, r1
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	4093      	lsls	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a0:	4935      	ldr	r1, [pc, #212]	; (8001278 <HAL_GPIO_Init+0x2e0>)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ae:	4b38      	ldr	r3, [pc, #224]	; (8001290 <HAL_GPIO_Init+0x2f8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43da      	mvns	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	025b      	lsls	r3, r3, #9
 80011c6:	4013      	ands	r3, r2
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011d2:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <HAL_GPIO_Init+0x2f8>)
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011d8:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <HAL_GPIO_Init+0x2f8>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	43da      	mvns	r2, r3
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	029b      	lsls	r3, r3, #10
 80011f0:	4013      	ands	r3, r2
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011fc:	4b24      	ldr	r3, [pc, #144]	; (8001290 <HAL_GPIO_Init+0x2f8>)
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <HAL_GPIO_Init+0x2f8>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	43da      	mvns	r2, r3
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	035b      	lsls	r3, r3, #13
 800121a:	4013      	ands	r3, r2
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <HAL_GPIO_Init+0x2f8>)
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <HAL_GPIO_Init+0x2f8>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43da      	mvns	r2, r3
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	039b      	lsls	r3, r3, #14
 8001244:	4013      	ands	r3, r2
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_GPIO_Init+0x2f8>)
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3301      	adds	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	40da      	lsrs	r2, r3
 8001264:	1e13      	subs	r3, r2, #0
 8001266:	d000      	beq.n	800126a <HAL_GPIO_Init+0x2d2>
 8001268:	e6a2      	b.n	8000fb0 <HAL_GPIO_Init+0x18>
  }
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46c0      	nop			; (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b006      	add	sp, #24
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40021000 	.word	0x40021000
 8001278:	40010000 	.word	0x40010000
 800127c:	50000400 	.word	0x50000400
 8001280:	50000800 	.word	0x50000800
 8001284:	50000c00 	.word	0x50000c00
 8001288:	50001000 	.word	0x50001000
 800128c:	50001c00 	.word	0x50001c00
 8001290:	40010400 	.word	0x40010400

08001294 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	0008      	movs	r0, r1
 800129e:	0011      	movs	r1, r2
 80012a0:	1cbb      	adds	r3, r7, #2
 80012a2:	1c02      	adds	r2, r0, #0
 80012a4:	801a      	strh	r2, [r3, #0]
 80012a6:	1c7b      	adds	r3, r7, #1
 80012a8:	1c0a      	adds	r2, r1, #0
 80012aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012ac:	1c7b      	adds	r3, r7, #1
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d004      	beq.n	80012be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b4:	1cbb      	adds	r3, r7, #2
 80012b6:	881a      	ldrh	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80012bc:	e003      	b.n	80012c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80012be:	1cbb      	adds	r3, r7, #2
 80012c0:	881a      	ldrh	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b002      	add	sp, #8
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	000a      	movs	r2, r1
 80012d8:	1cbb      	adds	r3, r7, #2
 80012da:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012e2:	1cbb      	adds	r3, r7, #2
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	4013      	ands	r3, r2
 80012ea:	041a      	lsls	r2, r3, #16
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	1cb9      	adds	r1, r7, #2
 80012f2:	8809      	ldrh	r1, [r1, #0]
 80012f4:	400b      	ands	r3, r1
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
}
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b004      	add	sp, #16
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	0002      	movs	r2, r0
 800130c:	1dbb      	adds	r3, r7, #6
 800130e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	1dba      	adds	r2, r7, #6
 8001316:	8812      	ldrh	r2, [r2, #0]
 8001318:	4013      	ands	r3, r2
 800131a:	d008      	beq.n	800132e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800131e:	1dba      	adds	r2, r7, #6
 8001320:	8812      	ldrh	r2, [r2, #0]
 8001322:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001324:	1dbb      	adds	r3, r7, #6
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	0018      	movs	r0, r3
 800132a:	f000 f807 	bl	800133c <HAL_GPIO_EXTI_Callback>
  }
}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	46bd      	mov	sp, r7
 8001332:	b002      	add	sp, #8
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	40010400 	.word	0x40010400

0800133c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	0002      	movs	r2, r0
 8001344:	1dbb      	adds	r3, r7, #6
 8001346:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d102      	bne.n	8001364 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	f000 fbbf 	bl	8001ae2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001364:	4bc9      	ldr	r3, [pc, #804]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	220c      	movs	r2, #12
 800136a:	4013      	ands	r3, r2
 800136c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800136e:	4bc7      	ldr	r3, [pc, #796]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	025b      	lsls	r3, r3, #9
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2201      	movs	r2, #1
 8001380:	4013      	ands	r3, r2
 8001382:	d100      	bne.n	8001386 <HAL_RCC_OscConfig+0x36>
 8001384:	e07e      	b.n	8001484 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	2b08      	cmp	r3, #8
 800138a:	d007      	beq.n	800139c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b0c      	cmp	r3, #12
 8001390:	d112      	bne.n	80013b8 <HAL_RCC_OscConfig+0x68>
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	025b      	lsls	r3, r3, #9
 8001398:	429a      	cmp	r2, r3
 800139a:	d10d      	bne.n	80013b8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139c:	4bbb      	ldr	r3, [pc, #748]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	029b      	lsls	r3, r3, #10
 80013a4:	4013      	ands	r3, r2
 80013a6:	d100      	bne.n	80013aa <HAL_RCC_OscConfig+0x5a>
 80013a8:	e06b      	b.n	8001482 <HAL_RCC_OscConfig+0x132>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d167      	bne.n	8001482 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	f000 fb95 	bl	8001ae2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	025b      	lsls	r3, r3, #9
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d107      	bne.n	80013d4 <HAL_RCC_OscConfig+0x84>
 80013c4:	4bb1      	ldr	r3, [pc, #708]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4bb0      	ldr	r3, [pc, #704]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	0249      	lsls	r1, r1, #9
 80013ce:	430a      	orrs	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e027      	b.n	8001424 <HAL_RCC_OscConfig+0xd4>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	23a0      	movs	r3, #160	; 0xa0
 80013da:	02db      	lsls	r3, r3, #11
 80013dc:	429a      	cmp	r2, r3
 80013de:	d10e      	bne.n	80013fe <HAL_RCC_OscConfig+0xae>
 80013e0:	4baa      	ldr	r3, [pc, #680]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4ba9      	ldr	r3, [pc, #676]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	02c9      	lsls	r1, r1, #11
 80013ea:	430a      	orrs	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	4ba7      	ldr	r3, [pc, #668]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4ba6      	ldr	r3, [pc, #664]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 80013f4:	2180      	movs	r1, #128	; 0x80
 80013f6:	0249      	lsls	r1, r1, #9
 80013f8:	430a      	orrs	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e012      	b.n	8001424 <HAL_RCC_OscConfig+0xd4>
 80013fe:	4ba3      	ldr	r3, [pc, #652]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4ba2      	ldr	r3, [pc, #648]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 8001404:	49a2      	ldr	r1, [pc, #648]	; (8001690 <HAL_RCC_OscConfig+0x340>)
 8001406:	400a      	ands	r2, r1
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	4ba0      	ldr	r3, [pc, #640]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	025b      	lsls	r3, r3, #9
 8001412:	4013      	ands	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4b9c      	ldr	r3, [pc, #624]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b9b      	ldr	r3, [pc, #620]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 800141e:	499d      	ldr	r1, [pc, #628]	; (8001694 <HAL_RCC_OscConfig+0x344>)
 8001420:	400a      	ands	r2, r1
 8001422:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d015      	beq.n	8001458 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fc44 	bl	8000cb8 <HAL_GetTick>
 8001430:	0003      	movs	r3, r0
 8001432:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001434:	e009      	b.n	800144a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001436:	f7ff fc3f 	bl	8000cb8 <HAL_GetTick>
 800143a:	0002      	movs	r2, r0
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b64      	cmp	r3, #100	; 0x64
 8001442:	d902      	bls.n	800144a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	f000 fb4c 	bl	8001ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800144a:	4b90      	ldr	r3, [pc, #576]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	029b      	lsls	r3, r3, #10
 8001452:	4013      	ands	r3, r2
 8001454:	d0ef      	beq.n	8001436 <HAL_RCC_OscConfig+0xe6>
 8001456:	e015      	b.n	8001484 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fc2e 	bl	8000cb8 <HAL_GetTick>
 800145c:	0003      	movs	r3, r0
 800145e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001462:	f7ff fc29 	bl	8000cb8 <HAL_GetTick>
 8001466:	0002      	movs	r2, r0
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b64      	cmp	r3, #100	; 0x64
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e336      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001474:	4b85      	ldr	r3, [pc, #532]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	029b      	lsls	r3, r3, #10
 800147c:	4013      	ands	r3, r2
 800147e:	d1f0      	bne.n	8001462 <HAL_RCC_OscConfig+0x112>
 8001480:	e000      	b.n	8001484 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001482:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2202      	movs	r2, #2
 800148a:	4013      	ands	r3, r2
 800148c:	d100      	bne.n	8001490 <HAL_RCC_OscConfig+0x140>
 800148e:	e099      	b.n	80015c4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	2220      	movs	r2, #32
 800149a:	4013      	ands	r3, r2
 800149c:	d009      	beq.n	80014b2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800149e:	4b7b      	ldr	r3, [pc, #492]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4b7a      	ldr	r3, [pc, #488]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 80014a4:	2120      	movs	r1, #32
 80014a6:	430a      	orrs	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	2220      	movs	r2, #32
 80014ae:	4393      	bics	r3, r2
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d005      	beq.n	80014c4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	2b0c      	cmp	r3, #12
 80014bc:	d13e      	bne.n	800153c <HAL_RCC_OscConfig+0x1ec>
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d13b      	bne.n	800153c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80014c4:	4b71      	ldr	r3, [pc, #452]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2204      	movs	r2, #4
 80014ca:	4013      	ands	r3, r2
 80014cc:	d004      	beq.n	80014d8 <HAL_RCC_OscConfig+0x188>
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e304      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d8:	4b6c      	ldr	r3, [pc, #432]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a6e      	ldr	r2, [pc, #440]	; (8001698 <HAL_RCC_OscConfig+0x348>)
 80014de:	4013      	ands	r3, r2
 80014e0:	0019      	movs	r1, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	021a      	lsls	r2, r3, #8
 80014e8:	4b68      	ldr	r3, [pc, #416]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 80014ea:	430a      	orrs	r2, r1
 80014ec:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014ee:	4b67      	ldr	r3, [pc, #412]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2209      	movs	r2, #9
 80014f4:	4393      	bics	r3, r2
 80014f6:	0019      	movs	r1, r3
 80014f8:	4b64      	ldr	r3, [pc, #400]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 80014fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001500:	f000 fc42 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8001504:	0001      	movs	r1, r0
 8001506:	4b61      	ldr	r3, [pc, #388]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	220f      	movs	r2, #15
 800150e:	4013      	ands	r3, r2
 8001510:	4a62      	ldr	r2, [pc, #392]	; (800169c <HAL_RCC_OscConfig+0x34c>)
 8001512:	5cd3      	ldrb	r3, [r2, r3]
 8001514:	000a      	movs	r2, r1
 8001516:	40da      	lsrs	r2, r3
 8001518:	4b61      	ldr	r3, [pc, #388]	; (80016a0 <HAL_RCC_OscConfig+0x350>)
 800151a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800151c:	4b61      	ldr	r3, [pc, #388]	; (80016a4 <HAL_RCC_OscConfig+0x354>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2513      	movs	r5, #19
 8001522:	197c      	adds	r4, r7, r5
 8001524:	0018      	movs	r0, r3
 8001526:	f7ff fb81 	bl	8000c2c <HAL_InitTick>
 800152a:	0003      	movs	r3, r0
 800152c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800152e:	197b      	adds	r3, r7, r5
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d046      	beq.n	80015c4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001536:	197b      	adds	r3, r7, r5
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	e2d2      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	2b00      	cmp	r3, #0
 8001540:	d027      	beq.n	8001592 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001542:	4b52      	ldr	r3, [pc, #328]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2209      	movs	r2, #9
 8001548:	4393      	bics	r3, r2
 800154a:	0019      	movs	r1, r3
 800154c:	4b4f      	ldr	r3, [pc, #316]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 800154e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001550:	430a      	orrs	r2, r1
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fbb0 	bl	8000cb8 <HAL_GetTick>
 8001558:	0003      	movs	r3, r0
 800155a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff fbab 	bl	8000cb8 <HAL_GetTick>
 8001562:	0002      	movs	r2, r0
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e2b8      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001570:	4b46      	ldr	r3, [pc, #280]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2204      	movs	r2, #4
 8001576:	4013      	ands	r3, r2
 8001578:	d0f1      	beq.n	800155e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157a:	4b44      	ldr	r3, [pc, #272]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4a46      	ldr	r2, [pc, #280]	; (8001698 <HAL_RCC_OscConfig+0x348>)
 8001580:	4013      	ands	r3, r2
 8001582:	0019      	movs	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	021a      	lsls	r2, r3, #8
 800158a:	4b40      	ldr	r3, [pc, #256]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 800158c:	430a      	orrs	r2, r1
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	e018      	b.n	80015c4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001592:	4b3e      	ldr	r3, [pc, #248]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4b3d      	ldr	r3, [pc, #244]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 8001598:	2101      	movs	r1, #1
 800159a:	438a      	bics	r2, r1
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff fb8b 	bl	8000cb8 <HAL_GetTick>
 80015a2:	0003      	movs	r3, r0
 80015a4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a8:	f7ff fb86 	bl	8000cb8 <HAL_GetTick>
 80015ac:	0002      	movs	r2, r0
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e293      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015ba:	4b34      	ldr	r3, [pc, #208]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2204      	movs	r2, #4
 80015c0:	4013      	ands	r3, r2
 80015c2:	d1f1      	bne.n	80015a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2210      	movs	r2, #16
 80015ca:	4013      	ands	r3, r2
 80015cc:	d100      	bne.n	80015d0 <HAL_RCC_OscConfig+0x280>
 80015ce:	e0a2      	b.n	8001716 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d140      	bne.n	8001658 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015d6:	4b2d      	ldr	r3, [pc, #180]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4013      	ands	r3, r2
 80015e0:	d005      	beq.n	80015ee <HAL_RCC_OscConfig+0x29e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e279      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ee:	4b27      	ldr	r3, [pc, #156]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4a2d      	ldr	r2, [pc, #180]	; (80016a8 <HAL_RCC_OscConfig+0x358>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	0019      	movs	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015fc:	4b23      	ldr	r3, [pc, #140]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 80015fe:	430a      	orrs	r2, r1
 8001600:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	0a19      	lsrs	r1, r3, #8
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	061a      	lsls	r2, r3, #24
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 8001612:	430a      	orrs	r2, r1
 8001614:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	0b5b      	lsrs	r3, r3, #13
 800161c:	3301      	adds	r3, #1
 800161e:	2280      	movs	r2, #128	; 0x80
 8001620:	0212      	lsls	r2, r2, #8
 8001622:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	210f      	movs	r1, #15
 800162c:	400b      	ands	r3, r1
 800162e:	491b      	ldr	r1, [pc, #108]	; (800169c <HAL_RCC_OscConfig+0x34c>)
 8001630:	5ccb      	ldrb	r3, [r1, r3]
 8001632:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_RCC_OscConfig+0x350>)
 8001636:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HAL_RCC_OscConfig+0x354>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2513      	movs	r5, #19
 800163e:	197c      	adds	r4, r7, r5
 8001640:	0018      	movs	r0, r3
 8001642:	f7ff faf3 	bl	8000c2c <HAL_InitTick>
 8001646:	0003      	movs	r3, r0
 8001648:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800164a:	197b      	adds	r3, r7, r5
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d061      	beq.n	8001716 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001652:	197b      	adds	r3, r7, r5
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	e244      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d040      	beq.n	80016e2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_RCC_OscConfig+0x33c>)
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	0049      	lsls	r1, r1, #1
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fb23 	bl	8000cb8 <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001676:	e019      	b.n	80016ac <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001678:	f7ff fb1e 	bl	8000cb8 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d912      	bls.n	80016ac <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e22b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	40021000 	.word	0x40021000
 8001690:	fffeffff 	.word	0xfffeffff
 8001694:	fffbffff 	.word	0xfffbffff
 8001698:	ffffe0ff 	.word	0xffffe0ff
 800169c:	08005f38 	.word	0x08005f38
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000014 	.word	0x20000014
 80016a8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016ac:	4bca      	ldr	r3, [pc, #808]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4013      	ands	r3, r2
 80016b6:	d0df      	beq.n	8001678 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016b8:	4bc7      	ldr	r3, [pc, #796]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	4ac7      	ldr	r2, [pc, #796]	; (80019dc <HAL_RCC_OscConfig+0x68c>)
 80016be:	4013      	ands	r3, r2
 80016c0:	0019      	movs	r1, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c6:	4bc4      	ldr	r3, [pc, #784]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 80016c8:	430a      	orrs	r2, r1
 80016ca:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016cc:	4bc2      	ldr	r3, [pc, #776]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	0a19      	lsrs	r1, r3, #8
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	061a      	lsls	r2, r3, #24
 80016da:	4bbf      	ldr	r3, [pc, #764]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	e019      	b.n	8001716 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016e2:	4bbd      	ldr	r3, [pc, #756]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4bbc      	ldr	r3, [pc, #752]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 80016e8:	49bd      	ldr	r1, [pc, #756]	; (80019e0 <HAL_RCC_OscConfig+0x690>)
 80016ea:	400a      	ands	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fae3 	bl	8000cb8 <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016f8:	f7ff fade 	bl	8000cb8 <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e1eb      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800170a:	4bb3      	ldr	r3, [pc, #716]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4013      	ands	r3, r2
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2208      	movs	r2, #8
 800171c:	4013      	ands	r3, r2
 800171e:	d036      	beq.n	800178e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d019      	beq.n	800175c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001728:	4bab      	ldr	r3, [pc, #684]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 800172a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800172c:	4baa      	ldr	r3, [pc, #680]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 800172e:	2101      	movs	r1, #1
 8001730:	430a      	orrs	r2, r1
 8001732:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001734:	f7ff fac0 	bl	8000cb8 <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173e:	f7ff fabb 	bl	8000cb8 <HAL_GetTick>
 8001742:	0002      	movs	r2, r0
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e1c8      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001750:	4ba1      	ldr	r3, [pc, #644]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 8001752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001754:	2202      	movs	r2, #2
 8001756:	4013      	ands	r3, r2
 8001758:	d0f1      	beq.n	800173e <HAL_RCC_OscConfig+0x3ee>
 800175a:	e018      	b.n	800178e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800175c:	4b9e      	ldr	r3, [pc, #632]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 800175e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001760:	4b9d      	ldr	r3, [pc, #628]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 8001762:	2101      	movs	r1, #1
 8001764:	438a      	bics	r2, r1
 8001766:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001768:	f7ff faa6 	bl	8000cb8 <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001772:	f7ff faa1 	bl	8000cb8 <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e1ae      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001784:	4b94      	ldr	r3, [pc, #592]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 8001786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001788:	2202      	movs	r2, #2
 800178a:	4013      	ands	r3, r2
 800178c:	d1f1      	bne.n	8001772 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2204      	movs	r2, #4
 8001794:	4013      	ands	r3, r2
 8001796:	d100      	bne.n	800179a <HAL_RCC_OscConfig+0x44a>
 8001798:	e0ae      	b.n	80018f8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179a:	2023      	movs	r0, #35	; 0x23
 800179c:	183b      	adds	r3, r7, r0
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a2:	4b8d      	ldr	r3, [pc, #564]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 80017a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	055b      	lsls	r3, r3, #21
 80017aa:	4013      	ands	r3, r2
 80017ac:	d109      	bne.n	80017c2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b8a      	ldr	r3, [pc, #552]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 80017b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017b2:	4b89      	ldr	r3, [pc, #548]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 80017b4:	2180      	movs	r1, #128	; 0x80
 80017b6:	0549      	lsls	r1, r1, #21
 80017b8:	430a      	orrs	r2, r1
 80017ba:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80017bc:	183b      	adds	r3, r7, r0
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c2:	4b88      	ldr	r3, [pc, #544]	; (80019e4 <HAL_RCC_OscConfig+0x694>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4013      	ands	r3, r2
 80017cc:	d11a      	bne.n	8001804 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ce:	4b85      	ldr	r3, [pc, #532]	; (80019e4 <HAL_RCC_OscConfig+0x694>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b84      	ldr	r3, [pc, #528]	; (80019e4 <HAL_RCC_OscConfig+0x694>)
 80017d4:	2180      	movs	r1, #128	; 0x80
 80017d6:	0049      	lsls	r1, r1, #1
 80017d8:	430a      	orrs	r2, r1
 80017da:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017dc:	f7ff fa6c 	bl	8000cb8 <HAL_GetTick>
 80017e0:	0003      	movs	r3, r0
 80017e2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e6:	f7ff fa67 	bl	8000cb8 <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b64      	cmp	r3, #100	; 0x64
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e174      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f8:	4b7a      	ldr	r3, [pc, #488]	; (80019e4 <HAL_RCC_OscConfig+0x694>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4013      	ands	r3, r2
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	429a      	cmp	r2, r3
 800180e:	d107      	bne.n	8001820 <HAL_RCC_OscConfig+0x4d0>
 8001810:	4b71      	ldr	r3, [pc, #452]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 8001812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001814:	4b70      	ldr	r3, [pc, #448]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 8001816:	2180      	movs	r1, #128	; 0x80
 8001818:	0049      	lsls	r1, r1, #1
 800181a:	430a      	orrs	r2, r1
 800181c:	651a      	str	r2, [r3, #80]	; 0x50
 800181e:	e031      	b.n	8001884 <HAL_RCC_OscConfig+0x534>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10c      	bne.n	8001842 <HAL_RCC_OscConfig+0x4f2>
 8001828:	4b6b      	ldr	r3, [pc, #428]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 800182a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800182c:	4b6a      	ldr	r3, [pc, #424]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 800182e:	496c      	ldr	r1, [pc, #432]	; (80019e0 <HAL_RCC_OscConfig+0x690>)
 8001830:	400a      	ands	r2, r1
 8001832:	651a      	str	r2, [r3, #80]	; 0x50
 8001834:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 8001836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001838:	4b67      	ldr	r3, [pc, #412]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 800183a:	496b      	ldr	r1, [pc, #428]	; (80019e8 <HAL_RCC_OscConfig+0x698>)
 800183c:	400a      	ands	r2, r1
 800183e:	651a      	str	r2, [r3, #80]	; 0x50
 8001840:	e020      	b.n	8001884 <HAL_RCC_OscConfig+0x534>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	23a0      	movs	r3, #160	; 0xa0
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	429a      	cmp	r2, r3
 800184c:	d10e      	bne.n	800186c <HAL_RCC_OscConfig+0x51c>
 800184e:	4b62      	ldr	r3, [pc, #392]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 8001850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001852:	4b61      	ldr	r3, [pc, #388]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 8001854:	2180      	movs	r1, #128	; 0x80
 8001856:	00c9      	lsls	r1, r1, #3
 8001858:	430a      	orrs	r2, r1
 800185a:	651a      	str	r2, [r3, #80]	; 0x50
 800185c:	4b5e      	ldr	r3, [pc, #376]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 800185e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001860:	4b5d      	ldr	r3, [pc, #372]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 8001862:	2180      	movs	r1, #128	; 0x80
 8001864:	0049      	lsls	r1, r1, #1
 8001866:	430a      	orrs	r2, r1
 8001868:	651a      	str	r2, [r3, #80]	; 0x50
 800186a:	e00b      	b.n	8001884 <HAL_RCC_OscConfig+0x534>
 800186c:	4b5a      	ldr	r3, [pc, #360]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 800186e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001870:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 8001872:	495b      	ldr	r1, [pc, #364]	; (80019e0 <HAL_RCC_OscConfig+0x690>)
 8001874:	400a      	ands	r2, r1
 8001876:	651a      	str	r2, [r3, #80]	; 0x50
 8001878:	4b57      	ldr	r3, [pc, #348]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 800187a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800187c:	4b56      	ldr	r3, [pc, #344]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 800187e:	495a      	ldr	r1, [pc, #360]	; (80019e8 <HAL_RCC_OscConfig+0x698>)
 8001880:	400a      	ands	r2, r1
 8001882:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d015      	beq.n	80018b8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188c:	f7ff fa14 	bl	8000cb8 <HAL_GetTick>
 8001890:	0003      	movs	r3, r0
 8001892:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001894:	e009      	b.n	80018aa <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7ff fa0f 	bl	8000cb8 <HAL_GetTick>
 800189a:	0002      	movs	r2, r0
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	4a52      	ldr	r2, [pc, #328]	; (80019ec <HAL_RCC_OscConfig+0x69c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e11b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018aa:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 80018ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4013      	ands	r3, r2
 80018b4:	d0ef      	beq.n	8001896 <HAL_RCC_OscConfig+0x546>
 80018b6:	e014      	b.n	80018e2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b8:	f7ff f9fe 	bl	8000cb8 <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018c0:	e009      	b.n	80018d6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f7ff f9f9 	bl	8000cb8 <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	4a47      	ldr	r2, [pc, #284]	; (80019ec <HAL_RCC_OscConfig+0x69c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e105      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018d6:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 80018d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4013      	ands	r3, r2
 80018e0:	d1ef      	bne.n	80018c2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018e2:	2323      	movs	r3, #35	; 0x23
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d105      	bne.n	80018f8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ec:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 80018ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018f0:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 80018f2:	493f      	ldr	r1, [pc, #252]	; (80019f0 <HAL_RCC_OscConfig+0x6a0>)
 80018f4:	400a      	ands	r2, r1
 80018f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2220      	movs	r2, #32
 80018fe:	4013      	ands	r3, r2
 8001900:	d049      	beq.n	8001996 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d026      	beq.n	8001958 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800190a:	4b33      	ldr	r3, [pc, #204]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	4b32      	ldr	r3, [pc, #200]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 8001910:	2101      	movs	r1, #1
 8001912:	430a      	orrs	r2, r1
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	4b30      	ldr	r3, [pc, #192]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 8001918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800191a:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 800191c:	2101      	movs	r1, #1
 800191e:	430a      	orrs	r2, r1
 8001920:	635a      	str	r2, [r3, #52]	; 0x34
 8001922:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <HAL_RCC_OscConfig+0x6a4>)
 8001924:	6a1a      	ldr	r2, [r3, #32]
 8001926:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <HAL_RCC_OscConfig+0x6a4>)
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	0189      	lsls	r1, r1, #6
 800192c:	430a      	orrs	r2, r1
 800192e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff f9c2 	bl	8000cb8 <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800193a:	f7ff f9bd 	bl	8000cb8 <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e0ca      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800194c:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2202      	movs	r2, #2
 8001952:	4013      	ands	r3, r2
 8001954:	d0f1      	beq.n	800193a <HAL_RCC_OscConfig+0x5ea>
 8001956:	e01e      	b.n	8001996 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001958:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 800195e:	2101      	movs	r1, #1
 8001960:	438a      	bics	r2, r1
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <HAL_RCC_OscConfig+0x6a4>)
 8001966:	6a1a      	ldr	r2, [r3, #32]
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <HAL_RCC_OscConfig+0x6a4>)
 800196a:	4923      	ldr	r1, [pc, #140]	; (80019f8 <HAL_RCC_OscConfig+0x6a8>)
 800196c:	400a      	ands	r2, r1
 800196e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff f9a2 	bl	8000cb8 <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800197a:	f7ff f99d 	bl	8000cb8 <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0aa      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d1f1      	bne.n	800197a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	2b00      	cmp	r3, #0
 800199c:	d100      	bne.n	80019a0 <HAL_RCC_OscConfig+0x650>
 800199e:	e09f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d100      	bne.n	80019a8 <HAL_RCC_OscConfig+0x658>
 80019a6:	e078      	b.n	8001a9a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d159      	bne.n	8001a64 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_RCC_OscConfig+0x688>)
 80019b6:	4911      	ldr	r1, [pc, #68]	; (80019fc <HAL_RCC_OscConfig+0x6ac>)
 80019b8:	400a      	ands	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff f97c 	bl	8000cb8 <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019c4:	e01c      	b.n	8001a00 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff f977 	bl	8000cb8 <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d915      	bls.n	8001a00 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e084      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
 80019d8:	40021000 	.word	0x40021000
 80019dc:	ffff1fff 	.word	0xffff1fff
 80019e0:	fffffeff 	.word	0xfffffeff
 80019e4:	40007000 	.word	0x40007000
 80019e8:	fffffbff 	.word	0xfffffbff
 80019ec:	00001388 	.word	0x00001388
 80019f0:	efffffff 	.word	0xefffffff
 80019f4:	40010000 	.word	0x40010000
 80019f8:	ffffdfff 	.word	0xffffdfff
 80019fc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a00:	4b3a      	ldr	r3, [pc, #232]	; (8001aec <HAL_RCC_OscConfig+0x79c>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	049b      	lsls	r3, r3, #18
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d1dc      	bne.n	80019c6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a0c:	4b37      	ldr	r3, [pc, #220]	; (8001aec <HAL_RCC_OscConfig+0x79c>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4a37      	ldr	r2, [pc, #220]	; (8001af0 <HAL_RCC_OscConfig+0x7a0>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	0019      	movs	r1, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a24:	431a      	orrs	r2, r3
 8001a26:	4b31      	ldr	r3, [pc, #196]	; (8001aec <HAL_RCC_OscConfig+0x79c>)
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a2c:	4b2f      	ldr	r3, [pc, #188]	; (8001aec <HAL_RCC_OscConfig+0x79c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <HAL_RCC_OscConfig+0x79c>)
 8001a32:	2180      	movs	r1, #128	; 0x80
 8001a34:	0449      	lsls	r1, r1, #17
 8001a36:	430a      	orrs	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7ff f93d 	bl	8000cb8 <HAL_GetTick>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff f938 	bl	8000cb8 <HAL_GetTick>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e045      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a56:	4b25      	ldr	r3, [pc, #148]	; (8001aec <HAL_RCC_OscConfig+0x79c>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	049b      	lsls	r3, r3, #18
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x6f4>
 8001a62:	e03d      	b.n	8001ae0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <HAL_RCC_OscConfig+0x79c>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_RCC_OscConfig+0x79c>)
 8001a6a:	4922      	ldr	r1, [pc, #136]	; (8001af4 <HAL_RCC_OscConfig+0x7a4>)
 8001a6c:	400a      	ands	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff f922 	bl	8000cb8 <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7a:	f7ff f91d 	bl	8000cb8 <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e02a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a8c:	4b17      	ldr	r3, [pc, #92]	; (8001aec <HAL_RCC_OscConfig+0x79c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	049b      	lsls	r3, r3, #18
 8001a94:	4013      	ands	r3, r2
 8001a96:	d1f0      	bne.n	8001a7a <HAL_RCC_OscConfig+0x72a>
 8001a98:	e022      	b.n	8001ae0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e01d      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_RCC_OscConfig+0x79c>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	025b      	lsls	r3, r3, #9
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d10f      	bne.n	8001adc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	23f0      	movs	r3, #240	; 0xf0
 8001ac0:	039b      	lsls	r3, r3, #14
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	23c0      	movs	r3, #192	; 0xc0
 8001ad0:	041b      	lsls	r3, r3, #16
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b00a      	add	sp, #40	; 0x28
 8001ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	40021000 	.word	0x40021000
 8001af0:	ff02ffff 	.word	0xff02ffff
 8001af4:	feffffff 	.word	0xfeffffff

08001af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af8:	b5b0      	push	{r4, r5, r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e128      	b.n	8001d5e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b0c:	4b96      	ldr	r3, [pc, #600]	; (8001d68 <HAL_RCC_ClockConfig+0x270>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2201      	movs	r2, #1
 8001b12:	4013      	ands	r3, r2
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d91e      	bls.n	8001b58 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1a:	4b93      	ldr	r3, [pc, #588]	; (8001d68 <HAL_RCC_ClockConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4393      	bics	r3, r2
 8001b22:	0019      	movs	r1, r3
 8001b24:	4b90      	ldr	r3, [pc, #576]	; (8001d68 <HAL_RCC_ClockConfig+0x270>)
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b2c:	f7ff f8c4 	bl	8000cb8 <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b34:	e009      	b.n	8001b4a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b36:	f7ff f8bf 	bl	8000cb8 <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	4a8a      	ldr	r2, [pc, #552]	; (8001d6c <HAL_RCC_ClockConfig+0x274>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e109      	b.n	8001d5e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b87      	ldr	r3, [pc, #540]	; (8001d68 <HAL_RCC_ClockConfig+0x270>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4013      	ands	r3, r2
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d1ee      	bne.n	8001b36 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d009      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b62:	4b83      	ldr	r3, [pc, #524]	; (8001d70 <HAL_RCC_ClockConfig+0x278>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	22f0      	movs	r2, #240	; 0xf0
 8001b68:	4393      	bics	r3, r2
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	4b7f      	ldr	r3, [pc, #508]	; (8001d70 <HAL_RCC_ClockConfig+0x278>)
 8001b72:	430a      	orrs	r2, r1
 8001b74:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d100      	bne.n	8001b82 <HAL_RCC_ClockConfig+0x8a>
 8001b80:	e089      	b.n	8001c96 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b8a:	4b79      	ldr	r3, [pc, #484]	; (8001d70 <HAL_RCC_ClockConfig+0x278>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	029b      	lsls	r3, r3, #10
 8001b92:	4013      	ands	r3, r2
 8001b94:	d120      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e0e1      	b.n	8001d5e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ba2:	4b73      	ldr	r3, [pc, #460]	; (8001d70 <HAL_RCC_ClockConfig+0x278>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	049b      	lsls	r3, r3, #18
 8001baa:	4013      	ands	r3, r2
 8001bac:	d114      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e0d5      	b.n	8001d5e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d106      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bba:	4b6d      	ldr	r3, [pc, #436]	; (8001d70 <HAL_RCC_ClockConfig+0x278>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d109      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0ca      	b.n	8001d5e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bc8:	4b69      	ldr	r3, [pc, #420]	; (8001d70 <HAL_RCC_ClockConfig+0x278>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0c2      	b.n	8001d5e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bd8:	4b65      	ldr	r3, [pc, #404]	; (8001d70 <HAL_RCC_ClockConfig+0x278>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2203      	movs	r2, #3
 8001bde:	4393      	bics	r3, r2
 8001be0:	0019      	movs	r1, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	4b62      	ldr	r3, [pc, #392]	; (8001d70 <HAL_RCC_ClockConfig+0x278>)
 8001be8:	430a      	orrs	r2, r1
 8001bea:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bec:	f7ff f864 	bl	8000cb8 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d111      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bfc:	e009      	b.n	8001c12 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfe:	f7ff f85b 	bl	8000cb8 <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	4a58      	ldr	r2, [pc, #352]	; (8001d6c <HAL_RCC_ClockConfig+0x274>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e0a5      	b.n	8001d5e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c12:	4b57      	ldr	r3, [pc, #348]	; (8001d70 <HAL_RCC_ClockConfig+0x278>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	220c      	movs	r2, #12
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d1ef      	bne.n	8001bfe <HAL_RCC_ClockConfig+0x106>
 8001c1e:	e03a      	b.n	8001c96 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d111      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c28:	e009      	b.n	8001c3e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2a:	f7ff f845 	bl	8000cb8 <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	4a4d      	ldr	r2, [pc, #308]	; (8001d6c <HAL_RCC_ClockConfig+0x274>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e08f      	b.n	8001d5e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c3e:	4b4c      	ldr	r3, [pc, #304]	; (8001d70 <HAL_RCC_ClockConfig+0x278>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	220c      	movs	r2, #12
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d1ef      	bne.n	8001c2a <HAL_RCC_ClockConfig+0x132>
 8001c4a:	e024      	b.n	8001c96 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d11b      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c54:	e009      	b.n	8001c6a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c56:	f7ff f82f 	bl	8000cb8 <HAL_GetTick>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	4a42      	ldr	r2, [pc, #264]	; (8001d6c <HAL_RCC_ClockConfig+0x274>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e079      	b.n	8001d5e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c6a:	4b41      	ldr	r3, [pc, #260]	; (8001d70 <HAL_RCC_ClockConfig+0x278>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	220c      	movs	r2, #12
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d1ef      	bne.n	8001c56 <HAL_RCC_ClockConfig+0x15e>
 8001c76:	e00e      	b.n	8001c96 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c78:	f7ff f81e 	bl	8000cb8 <HAL_GetTick>
 8001c7c:	0002      	movs	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	4a3a      	ldr	r2, [pc, #232]	; (8001d6c <HAL_RCC_ClockConfig+0x274>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e068      	b.n	8001d5e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c8c:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <HAL_RCC_ClockConfig+0x278>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	220c      	movs	r2, #12
 8001c92:	4013      	ands	r3, r2
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c96:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_RCC_ClockConfig+0x270>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d21e      	bcs.n	8001ce2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca4:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <HAL_RCC_ClockConfig+0x270>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	4393      	bics	r3, r2
 8001cac:	0019      	movs	r1, r3
 8001cae:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <HAL_RCC_ClockConfig+0x270>)
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cb6:	f7fe ffff 	bl	8000cb8 <HAL_GetTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	e009      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc0:	f7fe fffa 	bl	8000cb8 <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	4a28      	ldr	r2, [pc, #160]	; (8001d6c <HAL_RCC_ClockConfig+0x274>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e044      	b.n	8001d5e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_RCC_ClockConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4013      	ands	r3, r2
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d1ee      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d009      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cec:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_RCC_ClockConfig+0x278>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4a20      	ldr	r2, [pc, #128]	; (8001d74 <HAL_RCC_ClockConfig+0x27c>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_RCC_ClockConfig+0x278>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2208      	movs	r2, #8
 8001d06:	4013      	ands	r3, r2
 8001d08:	d00a      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d0a:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_RCC_ClockConfig+0x278>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	4a1a      	ldr	r2, [pc, #104]	; (8001d78 <HAL_RCC_ClockConfig+0x280>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	0019      	movs	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	00da      	lsls	r2, r3, #3
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_RCC_ClockConfig+0x278>)
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d20:	f000 f832 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8001d24:	0001      	movs	r1, r0
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_RCC_ClockConfig+0x278>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	4013      	ands	r3, r2
 8001d30:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <HAL_RCC_ClockConfig+0x284>)
 8001d32:	5cd3      	ldrb	r3, [r2, r3]
 8001d34:	000a      	movs	r2, r1
 8001d36:	40da      	lsrs	r2, r3
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_RCC_ClockConfig+0x288>)
 8001d3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_RCC_ClockConfig+0x28c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	250b      	movs	r5, #11
 8001d42:	197c      	adds	r4, r7, r5
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7fe ff71 	bl	8000c2c <HAL_InitTick>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d4e:	197b      	adds	r3, r7, r5
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001d56:	197b      	adds	r3, r7, r5
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b004      	add	sp, #16
 8001d64:	bdb0      	pop	{r4, r5, r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	40022000 	.word	0x40022000
 8001d6c:	00001388 	.word	0x00001388
 8001d70:	40021000 	.word	0x40021000
 8001d74:	fffff8ff 	.word	0xfffff8ff
 8001d78:	ffffc7ff 	.word	0xffffc7ff
 8001d7c:	08005f38 	.word	0x08005f38
 8001d80:	20000000 	.word	0x20000000
 8001d84:	20000014 	.word	0x20000014

08001d88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d88:	b5b0      	push	{r4, r5, r7, lr}
 8001d8a:	b08e      	sub	sp, #56	; 0x38
 8001d8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d8e:	4b4c      	ldr	r3, [pc, #304]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d96:	230c      	movs	r3, #12
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d014      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8001d9e:	d900      	bls.n	8001da2 <HAL_RCC_GetSysClockFreq+0x1a>
 8001da0:	e07b      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x112>
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d002      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x24>
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d00b      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001daa:	e076      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001dac:	4b44      	ldr	r3, [pc, #272]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2210      	movs	r2, #16
 8001db2:	4013      	ands	r3, r2
 8001db4:	d002      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001db6:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001dba:	e07c      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001dbc:	4b42      	ldr	r3, [pc, #264]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x140>)
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dc0:	e079      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dc2:	4b42      	ldr	r3, [pc, #264]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x144>)
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dc6:	e076      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dca:	0c9a      	lsrs	r2, r3, #18
 8001dcc:	230f      	movs	r3, #15
 8001dce:	401a      	ands	r2, r3
 8001dd0:	4b3f      	ldr	r3, [pc, #252]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x148>)
 8001dd2:	5c9b      	ldrb	r3, [r3, r2]
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd8:	0d9a      	lsrs	r2, r3, #22
 8001dda:	2303      	movs	r3, #3
 8001ddc:	4013      	ands	r3, r2
 8001dde:	3301      	adds	r3, #1
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001de2:	4b37      	ldr	r3, [pc, #220]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	025b      	lsls	r3, r3, #9
 8001dea:	4013      	ands	r3, r2
 8001dec:	d01a      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df0:	61bb      	str	r3, [r7, #24]
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	4a35      	ldr	r2, [pc, #212]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x144>)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	69b8      	ldr	r0, [r7, #24]
 8001dfc:	69f9      	ldr	r1, [r7, #28]
 8001dfe:	f7fe fa2f 	bl	8000260 <__aeabi_lmul>
 8001e02:	0002      	movs	r2, r0
 8001e04:	000b      	movs	r3, r1
 8001e06:	0010      	movs	r0, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f7fe fa03 	bl	8000220 <__aeabi_uldivmod>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	000b      	movs	r3, r1
 8001e1e:	0013      	movs	r3, r2
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
 8001e22:	e037      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e24:	4b26      	ldr	r3, [pc, #152]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2210      	movs	r2, #16
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d01a      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4a23      	ldr	r2, [pc, #140]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	68b8      	ldr	r0, [r7, #8]
 8001e3c:	68f9      	ldr	r1, [r7, #12]
 8001e3e:	f7fe fa0f 	bl	8000260 <__aeabi_lmul>
 8001e42:	0002      	movs	r2, r0
 8001e44:	000b      	movs	r3, r1
 8001e46:	0010      	movs	r0, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f7fe f9e3 	bl	8000220 <__aeabi_uldivmod>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	000b      	movs	r3, r1
 8001e5e:	0013      	movs	r3, r2
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34
 8001e62:	e017      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	0018      	movs	r0, r3
 8001e68:	2300      	movs	r3, #0
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	4a16      	ldr	r2, [pc, #88]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x140>)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f7fe f9f6 	bl	8000260 <__aeabi_lmul>
 8001e74:	0002      	movs	r2, r0
 8001e76:	000b      	movs	r3, r1
 8001e78:	0010      	movs	r0, r2
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	001c      	movs	r4, r3
 8001e80:	2300      	movs	r3, #0
 8001e82:	001d      	movs	r5, r3
 8001e84:	0022      	movs	r2, r4
 8001e86:	002b      	movs	r3, r5
 8001e88:	f7fe f9ca 	bl	8000220 <__aeabi_uldivmod>
 8001e8c:	0002      	movs	r2, r0
 8001e8e:	000b      	movs	r3, r1
 8001e90:	0013      	movs	r3, r2
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e98:	e00d      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	0b5b      	lsrs	r3, r3, #13
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	0212      	lsls	r2, r2, #8
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	0013      	movs	r3, r2
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eb4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001eb8:	0018      	movs	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b00e      	add	sp, #56	; 0x38
 8001ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	003d0900 	.word	0x003d0900
 8001ec8:	00f42400 	.word	0x00f42400
 8001ecc:	007a1200 	.word	0x007a1200
 8001ed0:	08005f50 	.word	0x08005f50

08001ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed8:	4b02      	ldr	r3, [pc, #8]	; (8001ee4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	20000000 	.word	0x20000000

08001ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eec:	f7ff fff2 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001ef0:	0001      	movs	r1, r0
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	2207      	movs	r2, #7
 8001efa:	4013      	ands	r3, r2
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001efe:	5cd3      	ldrb	r3, [r2, r3]
 8001f00:	40d9      	lsrs	r1, r3
 8001f02:	000b      	movs	r3, r1
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	08005f48 	.word	0x08005f48

08001f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f18:	f7ff ffdc 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001f1c:	0001      	movs	r1, r0
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	0adb      	lsrs	r3, r3, #11
 8001f24:	2207      	movs	r2, #7
 8001f26:	4013      	ands	r3, r2
 8001f28:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	40d9      	lsrs	r1, r3
 8001f2e:	000b      	movs	r3, r1
}
 8001f30:	0018      	movs	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08005f48 	.word	0x08005f48

08001f40 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001f48:	2017      	movs	r0, #23
 8001f4a:	183b      	adds	r3, r7, r0
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2220      	movs	r2, #32
 8001f56:	4013      	ands	r3, r2
 8001f58:	d100      	bne.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001f5a:	e0c2      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5c:	4b98      	ldr	r3, [pc, #608]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	055b      	lsls	r3, r3, #21
 8001f64:	4013      	ands	r3, r2
 8001f66:	d109      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f68:	4b95      	ldr	r3, [pc, #596]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f6c:	4b94      	ldr	r3, [pc, #592]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f6e:	2180      	movs	r1, #128	; 0x80
 8001f70:	0549      	lsls	r1, r1, #21
 8001f72:	430a      	orrs	r2, r1
 8001f74:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f76:	183b      	adds	r3, r7, r0
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	4b91      	ldr	r3, [pc, #580]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4013      	ands	r3, r2
 8001f86:	d11a      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f88:	4b8e      	ldr	r3, [pc, #568]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b8d      	ldr	r3, [pc, #564]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f8e:	2180      	movs	r1, #128	; 0x80
 8001f90:	0049      	lsls	r1, r1, #1
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f96:	f7fe fe8f 	bl	8000cb8 <HAL_GetTick>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa0:	f7fe fe8a 	bl	8000cb8 <HAL_GetTick>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e102      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb2:	4b84      	ldr	r3, [pc, #528]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001fbe:	4b80      	ldr	r3, [pc, #512]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	23c0      	movs	r3, #192	; 0xc0
 8001fc4:	039b      	lsls	r3, r3, #14
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	23c0      	movs	r3, #192	; 0xc0
 8001fd0:	039b      	lsls	r3, r3, #14
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d013      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	23c0      	movs	r3, #192	; 0xc0
 8001fe0:	029b      	lsls	r3, r3, #10
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	23c0      	movs	r3, #192	; 0xc0
 8001fe6:	029b      	lsls	r3, r3, #10
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d10a      	bne.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001fec:	4b74      	ldr	r3, [pc, #464]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	029b      	lsls	r3, r3, #10
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	029b      	lsls	r3, r3, #10
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d101      	bne.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0da      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002002:	4b6f      	ldr	r3, [pc, #444]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002004:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002006:	23c0      	movs	r3, #192	; 0xc0
 8002008:	029b      	lsls	r3, r3, #10
 800200a:	4013      	ands	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d03b      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	23c0      	movs	r3, #192	; 0xc0
 800201a:	029b      	lsls	r3, r3, #10
 800201c:	4013      	ands	r3, r2
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	429a      	cmp	r2, r3
 8002022:	d033      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2220      	movs	r2, #32
 800202a:	4013      	ands	r3, r2
 800202c:	d02e      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800202e:	4b64      	ldr	r3, [pc, #400]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002032:	4a65      	ldr	r2, [pc, #404]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002038:	4b61      	ldr	r3, [pc, #388]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800203a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800203c:	4b60      	ldr	r3, [pc, #384]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	0309      	lsls	r1, r1, #12
 8002042:	430a      	orrs	r2, r1
 8002044:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002046:	4b5e      	ldr	r3, [pc, #376]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800204a:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800204c:	495f      	ldr	r1, [pc, #380]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800204e:	400a      	ands	r2, r1
 8002050:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002052:	4b5b      	ldr	r3, [pc, #364]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4013      	ands	r3, r2
 8002060:	d014      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7fe fe29 	bl	8000cb8 <HAL_GetTick>
 8002066:	0003      	movs	r3, r0
 8002068:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800206a:	e009      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206c:	f7fe fe24 	bl	8000cb8 <HAL_GetTick>
 8002070:	0002      	movs	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	4a56      	ldr	r2, [pc, #344]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d901      	bls.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e09b      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002080:	4b4f      	ldr	r3, [pc, #316]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002082:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4013      	ands	r3, r2
 800208a:	d0ef      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	23c0      	movs	r3, #192	; 0xc0
 8002092:	029b      	lsls	r3, r3, #10
 8002094:	401a      	ands	r2, r3
 8002096:	23c0      	movs	r3, #192	; 0xc0
 8002098:	029b      	lsls	r3, r3, #10
 800209a:	429a      	cmp	r2, r3
 800209c:	d10c      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800209e:	4b48      	ldr	r3, [pc, #288]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a4c      	ldr	r2, [pc, #304]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	23c0      	movs	r3, #192	; 0xc0
 80020ae:	039b      	lsls	r3, r3, #14
 80020b0:	401a      	ands	r2, r3
 80020b2:	4b43      	ldr	r3, [pc, #268]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020b4:	430a      	orrs	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	4b41      	ldr	r3, [pc, #260]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020ba:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	23c0      	movs	r3, #192	; 0xc0
 80020c2:	029b      	lsls	r3, r3, #10
 80020c4:	401a      	ands	r2, r3
 80020c6:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020c8:	430a      	orrs	r2, r1
 80020ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020cc:	2317      	movs	r3, #23
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d105      	bne.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d6:	4b3a      	ldr	r3, [pc, #232]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020da:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020dc:	493e      	ldr	r1, [pc, #248]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80020de:	400a      	ands	r2, r1
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2201      	movs	r2, #1
 80020e8:	4013      	ands	r3, r2
 80020ea:	d009      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ec:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	2203      	movs	r2, #3
 80020f2:	4393      	bics	r3, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020fc:	430a      	orrs	r2, r1
 80020fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2202      	movs	r2, #2
 8002106:	4013      	ands	r3, r2
 8002108:	d009      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800210a:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210e:	220c      	movs	r2, #12
 8002110:	4393      	bics	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800211a:	430a      	orrs	r2, r1
 800211c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2204      	movs	r2, #4
 8002124:	4013      	ands	r3, r2
 8002126:	d009      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002128:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800212a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212c:	4a2b      	ldr	r2, [pc, #172]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800212e:	4013      	ands	r3, r2
 8002130:	0019      	movs	r1, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002138:	430a      	orrs	r2, r1
 800213a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2208      	movs	r2, #8
 8002142:	4013      	ands	r3, r2
 8002144:	d009      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	4a25      	ldr	r2, [pc, #148]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800214c:	4013      	ands	r3, r2
 800214e:	0019      	movs	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002156:	430a      	orrs	r2, r1
 8002158:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4013      	ands	r3, r2
 8002164:	d009      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002166:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216a:	4a17      	ldr	r2, [pc, #92]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800216c:	4013      	ands	r3, r2
 800216e:	0019      	movs	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699a      	ldr	r2, [r3, #24]
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002176:	430a      	orrs	r2, r1
 8002178:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2240      	movs	r2, #64	; 0x40
 8002180:	4013      	ands	r3, r2
 8002182:	d009      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002188:	4a16      	ldr	r2, [pc, #88]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800218a:	4013      	ands	r3, r2
 800218c:	0019      	movs	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1a      	ldr	r2, [r3, #32]
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002194:	430a      	orrs	r2, r1
 8002196:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2280      	movs	r2, #128	; 0x80
 800219e:	4013      	ands	r3, r2
 80021a0:	d009      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a6:	4a10      	ldr	r2, [pc, #64]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	0019      	movs	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69da      	ldr	r2, [r3, #28]
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021b2:	430a      	orrs	r2, r1
 80021b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	0018      	movs	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b006      	add	sp, #24
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40007000 	.word	0x40007000
 80021c8:	fffcffff 	.word	0xfffcffff
 80021cc:	fff7ffff 	.word	0xfff7ffff
 80021d0:	00001388 	.word	0x00001388
 80021d4:	ffcfffff 	.word	0xffcfffff
 80021d8:	efffffff 	.word	0xefffffff
 80021dc:	fffff3ff 	.word	0xfffff3ff
 80021e0:	ffffcfff 	.word	0xffffcfff
 80021e4:	fbffffff 	.word	0xfbffffff
 80021e8:	fff3ffff 	.word	0xfff3ffff

080021ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e08e      	b.n	800231c <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2221      	movs	r2, #33	; 0x21
 8002202:	5c9b      	ldrb	r3, [r3, r2]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d107      	bne.n	800221a <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2220      	movs	r2, #32
 800220e:	2100      	movs	r1, #0
 8002210:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	0018      	movs	r0, r3
 8002216:	f7fe fb23 	bl	8000860 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2221      	movs	r2, #33	; 0x21
 800221e:	2102      	movs	r1, #2
 8002220:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	22ca      	movs	r2, #202	; 0xca
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2253      	movs	r2, #83	; 0x53
 8002230:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	0018      	movs	r0, r3
 8002236:	f000 fbb2 	bl	800299e <RTC_EnterInitMode>
 800223a:	1e03      	subs	r3, r0, #0
 800223c:	d009      	beq.n	8002252 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	22ff      	movs	r2, #255	; 0xff
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2221      	movs	r2, #33	; 0x21
 800224a:	2104      	movs	r1, #4
 800224c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e064      	b.n	800231c <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4931      	ldr	r1, [pc, #196]	; (8002324 <HAL_RTC_Init+0x138>)
 800225e:	400a      	ands	r2, r1
 8002260:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6899      	ldr	r1, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68d2      	ldr	r2, [r2, #12]
 8002288:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6919      	ldr	r1, [r3, #16]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	041a      	lsls	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2180      	movs	r1, #128	; 0x80
 80022aa:	438a      	bics	r2, r1
 80022ac:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2103      	movs	r1, #3
 80022ba:	438a      	bics	r2, r1
 80022bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69da      	ldr	r2, [r3, #28]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2220      	movs	r2, #32
 80022de:	4013      	ands	r3, r2
 80022e0:	d113      	bne.n	800230a <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	0018      	movs	r0, r3
 80022e6:	f000 fb33 	bl	8002950 <HAL_RTC_WaitForSynchro>
 80022ea:	1e03      	subs	r3, r0, #0
 80022ec:	d00d      	beq.n	800230a <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	22ff      	movs	r2, #255	; 0xff
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2221      	movs	r2, #33	; 0x21
 80022fa:	2104      	movs	r1, #4
 80022fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2220      	movs	r2, #32
 8002302:	2100      	movs	r1, #0
 8002304:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e008      	b.n	800231c <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	22ff      	movs	r2, #255	; 0xff
 8002310:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2221      	movs	r2, #33	; 0x21
 8002316:	2101      	movs	r1, #1
 8002318:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800231a:	2300      	movs	r3, #0
  }
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b002      	add	sp, #8
 8002322:	bd80      	pop	{r7, pc}
 8002324:	ff8fffbf 	.word	0xff8fffbf

08002328 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	5c9b      	ldrb	r3, [r3, r2]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_RTC_SetTime+0x1a>
 800233e:	2302      	movs	r3, #2
 8002340:	e0ad      	b.n	800249e <HAL_RTC_SetTime+0x176>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2220      	movs	r2, #32
 8002346:	2101      	movs	r1, #1
 8002348:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2221      	movs	r2, #33	; 0x21
 800234e:	2102      	movs	r1, #2
 8002350:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d125      	bne.n	80023a4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2240      	movs	r2, #64	; 0x40
 8002360:	4013      	ands	r3, r2
 8002362:	d102      	bne.n	800236a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2200      	movs	r2, #0
 8002368:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	0018      	movs	r0, r3
 8002370:	f000 fb3f 	bl	80029f2 <RTC_ByteToBcd2>
 8002374:	0003      	movs	r3, r0
 8002376:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	785b      	ldrb	r3, [r3, #1]
 800237c:	0018      	movs	r0, r3
 800237e:	f000 fb38 	bl	80029f2 <RTC_ByteToBcd2>
 8002382:	0003      	movs	r3, r0
 8002384:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002386:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	789b      	ldrb	r3, [r3, #2]
 800238c:	0018      	movs	r0, r3
 800238e:	f000 fb30 	bl	80029f2 <RTC_ByteToBcd2>
 8002392:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002394:	0022      	movs	r2, r4
 8002396:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	78db      	ldrb	r3, [r3, #3]
 800239c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	e017      	b.n	80023d4 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2240      	movs	r2, #64	; 0x40
 80023ac:	4013      	ands	r3, r2
 80023ae:	d102      	bne.n	80023b6 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2200      	movs	r2, #0
 80023b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	785b      	ldrb	r3, [r3, #1]
 80023c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80023c2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80023c8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	78db      	ldrb	r3, [r3, #3]
 80023ce:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80023d0:	4313      	orrs	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	22ca      	movs	r2, #202	; 0xca
 80023da:	625a      	str	r2, [r3, #36]	; 0x24
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2253      	movs	r2, #83	; 0x53
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	0018      	movs	r0, r3
 80023e8:	f000 fad9 	bl	800299e <RTC_EnterInitMode>
 80023ec:	1e03      	subs	r3, r0, #0
 80023ee:	d00d      	beq.n	800240c <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	22ff      	movs	r2, #255	; 0xff
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2221      	movs	r2, #33	; 0x21
 80023fc:	2104      	movs	r1, #4
 80023fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	2100      	movs	r1, #0
 8002406:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e048      	b.n	800249e <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	4925      	ldr	r1, [pc, #148]	; (80024a8 <HAL_RTC_SetTime+0x180>)
 8002414:	400a      	ands	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4922      	ldr	r1, [pc, #136]	; (80024ac <HAL_RTC_SetTime+0x184>)
 8002424:	400a      	ands	r2, r1
 8002426:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6899      	ldr	r1, [r3, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	431a      	orrs	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2180      	movs	r1, #128	; 0x80
 800244c:	438a      	bics	r2, r1
 800244e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2220      	movs	r2, #32
 8002458:	4013      	ands	r3, r2
 800245a:	d113      	bne.n	8002484 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	0018      	movs	r0, r3
 8002460:	f000 fa76 	bl	8002950 <HAL_RTC_WaitForSynchro>
 8002464:	1e03      	subs	r3, r0, #0
 8002466:	d00d      	beq.n	8002484 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	22ff      	movs	r2, #255	; 0xff
 800246e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2221      	movs	r2, #33	; 0x21
 8002474:	2104      	movs	r1, #4
 8002476:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2220      	movs	r2, #32
 800247c:	2100      	movs	r1, #0
 800247e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e00c      	b.n	800249e <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	22ff      	movs	r2, #255	; 0xff
 800248a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2221      	movs	r2, #33	; 0x21
 8002490:	2101      	movs	r1, #1
 8002492:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	2100      	movs	r1, #0
 800249a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800249c:	2300      	movs	r3, #0
  }
}
 800249e:	0018      	movs	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b007      	add	sp, #28
 80024a4:	bd90      	pop	{r4, r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	007f7f7f 	.word	0x007f7f7f
 80024ac:	fffbffff 	.word	0xfffbffff

080024b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	5c9b      	ldrb	r3, [r3, r2]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_RTC_SetDate+0x1a>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e099      	b.n	80025fe <HAL_RTC_SetDate+0x14e>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2220      	movs	r2, #32
 80024ce:	2101      	movs	r1, #1
 80024d0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2221      	movs	r2, #33	; 0x21
 80024d6:	2102      	movs	r1, #2
 80024d8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10e      	bne.n	80024fe <HAL_RTC_SetDate+0x4e>
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	785b      	ldrb	r3, [r3, #1]
 80024e4:	001a      	movs	r2, r3
 80024e6:	2310      	movs	r3, #16
 80024e8:	4013      	ands	r3, r2
 80024ea:	d008      	beq.n	80024fe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	785b      	ldrb	r3, [r3, #1]
 80024f0:	2210      	movs	r2, #16
 80024f2:	4393      	bics	r3, r2
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	330a      	adds	r3, #10
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d11c      	bne.n	800253e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	78db      	ldrb	r3, [r3, #3]
 8002508:	0018      	movs	r0, r3
 800250a:	f000 fa72 	bl	80029f2 <RTC_ByteToBcd2>
 800250e:	0003      	movs	r3, r0
 8002510:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	785b      	ldrb	r3, [r3, #1]
 8002516:	0018      	movs	r0, r3
 8002518:	f000 fa6b 	bl	80029f2 <RTC_ByteToBcd2>
 800251c:	0003      	movs	r3, r0
 800251e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002520:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	789b      	ldrb	r3, [r3, #2]
 8002526:	0018      	movs	r0, r3
 8002528:	f000 fa63 	bl	80029f2 <RTC_ByteToBcd2>
 800252c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800252e:	0022      	movs	r2, r4
 8002530:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	e00e      	b.n	800255c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	78db      	ldrb	r3, [r3, #3]
 8002542:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	785b      	ldrb	r3, [r3, #1]
 8002548:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800254a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002550:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002558:	4313      	orrs	r3, r2
 800255a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	22ca      	movs	r2, #202	; 0xca
 8002562:	625a      	str	r2, [r3, #36]	; 0x24
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2253      	movs	r2, #83	; 0x53
 800256a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	0018      	movs	r0, r3
 8002570:	f000 fa15 	bl	800299e <RTC_EnterInitMode>
 8002574:	1e03      	subs	r3, r0, #0
 8002576:	d00d      	beq.n	8002594 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	22ff      	movs	r2, #255	; 0xff
 800257e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2221      	movs	r2, #33	; 0x21
 8002584:	2104      	movs	r1, #4
 8002586:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	2100      	movs	r1, #0
 800258e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e034      	b.n	80025fe <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	491b      	ldr	r1, [pc, #108]	; (8002608 <HAL_RTC_SetDate+0x158>)
 800259c:	400a      	ands	r2, r1
 800259e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2180      	movs	r1, #128	; 0x80
 80025ac:	438a      	bics	r2, r1
 80025ae:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2220      	movs	r2, #32
 80025b8:	4013      	ands	r3, r2
 80025ba:	d113      	bne.n	80025e4 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	0018      	movs	r0, r3
 80025c0:	f000 f9c6 	bl	8002950 <HAL_RTC_WaitForSynchro>
 80025c4:	1e03      	subs	r3, r0, #0
 80025c6:	d00d      	beq.n	80025e4 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	22ff      	movs	r2, #255	; 0xff
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2221      	movs	r2, #33	; 0x21
 80025d4:	2104      	movs	r1, #4
 80025d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	2100      	movs	r1, #0
 80025de:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e00c      	b.n	80025fe <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	22ff      	movs	r2, #255	; 0xff
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2221      	movs	r2, #33	; 0x21
 80025f0:	2101      	movs	r1, #1
 80025f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	2100      	movs	r1, #0
 80025fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025fc:	2300      	movs	r3, #0
  }
}
 80025fe:	0018      	movs	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	b007      	add	sp, #28
 8002604:	bd90      	pop	{r4, r7, pc}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	00ffff3f 	.word	0x00ffff3f

0800260c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b089      	sub	sp, #36	; 0x24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2220      	movs	r2, #32
 800261c:	5c9b      	ldrb	r3, [r3, r2]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_RTC_SetAlarm_IT+0x1a>
 8002622:	2302      	movs	r3, #2
 8002624:	e130      	b.n	8002888 <HAL_RTC_SetAlarm_IT+0x27c>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2220      	movs	r2, #32
 800262a:	2101      	movs	r1, #1
 800262c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2221      	movs	r2, #33	; 0x21
 8002632:	2102      	movs	r1, #2
 8002634:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d136      	bne.n	80026aa <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2240      	movs	r2, #64	; 0x40
 8002644:	4013      	ands	r3, r2
 8002646:	d102      	bne.n	800264e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2200      	movs	r2, #0
 800264c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	0018      	movs	r0, r3
 8002654:	f000 f9cd 	bl	80029f2 <RTC_ByteToBcd2>
 8002658:	0003      	movs	r3, r0
 800265a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	785b      	ldrb	r3, [r3, #1]
 8002660:	0018      	movs	r0, r3
 8002662:	f000 f9c6 	bl	80029f2 <RTC_ByteToBcd2>
 8002666:	0003      	movs	r3, r0
 8002668:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800266a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	789b      	ldrb	r3, [r3, #2]
 8002670:	0018      	movs	r0, r3
 8002672:	f000 f9be 	bl	80029f2 <RTC_ByteToBcd2>
 8002676:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002678:	0022      	movs	r2, r4
 800267a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	78db      	ldrb	r3, [r3, #3]
 8002680:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002682:	431a      	orrs	r2, r3
 8002684:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2220      	movs	r2, #32
 800268a:	5c9b      	ldrb	r3, [r3, r2]
 800268c:	0018      	movs	r0, r3
 800268e:	f000 f9b0 	bl	80029f2 <RTC_ByteToBcd2>
 8002692:	0003      	movs	r3, r0
 8002694:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002696:	0022      	movs	r2, r4
 8002698:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800269e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	e022      	b.n	80026f0 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2240      	movs	r2, #64	; 0x40
 80026b2:	4013      	ands	r3, r2
 80026b4:	d102      	bne.n	80026bc <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2200      	movs	r2, #0
 80026ba:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	785b      	ldrb	r3, [r3, #1]
 80026c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80026c8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80026ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	78db      	ldrb	r3, [r3, #3]
 80026d4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80026d6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2120      	movs	r1, #32
 80026dc:	5c5b      	ldrb	r3, [r3, r1]
 80026de:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80026e0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80026e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	22ca      	movs	r2, #202	; 0xca
 8002702:	625a      	str	r2, [r3, #36]	; 0x24
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2253      	movs	r2, #83	; 0x53
 800270a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	429a      	cmp	r2, r3
 8002716:	d14e      	bne.n	80027b6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	495b      	ldr	r1, [pc, #364]	; (8002890 <HAL_RTC_SetAlarm_IT+0x284>)
 8002724:	400a      	ands	r2, r1
 8002726:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	22ff      	movs	r2, #255	; 0xff
 8002730:	401a      	ands	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4957      	ldr	r1, [pc, #348]	; (8002894 <HAL_RTC_SetAlarm_IT+0x288>)
 8002738:	430a      	orrs	r2, r1
 800273a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800273c:	f7fe fabc 	bl	8000cb8 <HAL_GetTick>
 8002740:	0003      	movs	r3, r0
 8002742:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002744:	e016      	b.n	8002774 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002746:	f7fe fab7 	bl	8000cb8 <HAL_GetTick>
 800274a:	0002      	movs	r2, r0
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	1ad2      	subs	r2, r2, r3
 8002750:	23fa      	movs	r3, #250	; 0xfa
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	429a      	cmp	r2, r3
 8002756:	d90d      	bls.n	8002774 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	22ff      	movs	r2, #255	; 0xff
 800275e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2221      	movs	r2, #33	; 0x21
 8002764:	2103      	movs	r1, #3
 8002766:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	2100      	movs	r1, #0
 800276e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e089      	b.n	8002888 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2201      	movs	r2, #1
 800277c:	4013      	ands	r3, r2
 800277e:	d0e2      	beq.n	8002746 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2180      	movs	r1, #128	; 0x80
 800279c:	0049      	lsls	r1, r1, #1
 800279e:	430a      	orrs	r2, r1
 80027a0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2180      	movs	r1, #128	; 0x80
 80027ae:	0149      	lsls	r1, r1, #5
 80027b0:	430a      	orrs	r2, r1
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	e04d      	b.n	8002852 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4935      	ldr	r1, [pc, #212]	; (8002898 <HAL_RTC_SetAlarm_IT+0x28c>)
 80027c2:	400a      	ands	r2, r1
 80027c4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	22ff      	movs	r2, #255	; 0xff
 80027ce:	401a      	ands	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4931      	ldr	r1, [pc, #196]	; (800289c <HAL_RTC_SetAlarm_IT+0x290>)
 80027d6:	430a      	orrs	r2, r1
 80027d8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80027da:	f7fe fa6d 	bl	8000cb8 <HAL_GetTick>
 80027de:	0003      	movs	r3, r0
 80027e0:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80027e2:	e016      	b.n	8002812 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027e4:	f7fe fa68 	bl	8000cb8 <HAL_GetTick>
 80027e8:	0002      	movs	r2, r0
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	23fa      	movs	r3, #250	; 0xfa
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d90d      	bls.n	8002812 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	22ff      	movs	r2, #255	; 0xff
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2221      	movs	r2, #33	; 0x21
 8002802:	2103      	movs	r1, #3
 8002804:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2220      	movs	r2, #32
 800280a:	2100      	movs	r1, #0
 800280c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e03a      	b.n	8002888 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2202      	movs	r2, #2
 800281a:	4013      	ands	r3, r2
 800281c:	d0e2      	beq.n	80027e4 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2180      	movs	r1, #128	; 0x80
 800283a:	0089      	lsls	r1, r1, #2
 800283c:	430a      	orrs	r2, r1
 800283e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2180      	movs	r1, #128	; 0x80
 800284c:	0189      	lsls	r1, r1, #6
 800284e:	430a      	orrs	r2, r1
 8002850:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002852:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <HAL_RTC_SetAlarm_IT+0x294>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_RTC_SetAlarm_IT+0x294>)
 8002858:	2180      	movs	r1, #128	; 0x80
 800285a:	0289      	lsls	r1, r1, #10
 800285c:	430a      	orrs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <HAL_RTC_SetAlarm_IT+0x294>)
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <HAL_RTC_SetAlarm_IT+0x294>)
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	0289      	lsls	r1, r1, #10
 800286a:	430a      	orrs	r2, r1
 800286c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	22ff      	movs	r2, #255	; 0xff
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2221      	movs	r2, #33	; 0x21
 800287a:	2101      	movs	r1, #1
 800287c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	2100      	movs	r1, #0
 8002884:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	b009      	add	sp, #36	; 0x24
 800288e:	bd90      	pop	{r4, r7, pc}
 8002890:	fffffeff 	.word	0xfffffeff
 8002894:	fffffe7f 	.word	0xfffffe7f
 8002898:	fffffdff 	.word	0xfffffdff
 800289c:	fffffd7f 	.word	0xfffffd7f
 80028a0:	40010400 	.word	0x40010400

080028a4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	015b      	lsls	r3, r3, #5
 80028b6:	4013      	ands	r3, r2
 80028b8:	d014      	beq.n	80028e4 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4013      	ands	r3, r2
 80028c6:	d00d      	beq.n	80028e4 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 f838 	bl	8002940 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	22ff      	movs	r2, #255	; 0xff
 80028d8:	401a      	ands	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4915      	ldr	r1, [pc, #84]	; (8002934 <HAL_RTC_AlarmIRQHandler+0x90>)
 80028e0:	430a      	orrs	r2, r1
 80028e2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	019b      	lsls	r3, r3, #6
 80028ee:	4013      	ands	r3, r2
 80028f0:	d014      	beq.n	800291c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4013      	ands	r3, r2
 80028fe:	d00d      	beq.n	800291c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	0018      	movs	r0, r3
 8002904:	f000 f89d 	bl	8002a42 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	22ff      	movs	r2, #255	; 0xff
 8002910:	401a      	ands	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4908      	ldr	r1, [pc, #32]	; (8002938 <HAL_RTC_AlarmIRQHandler+0x94>)
 8002918:	430a      	orrs	r2, r1
 800291a:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <HAL_RTC_AlarmIRQHandler+0x98>)
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	0292      	lsls	r2, r2, #10
 8002922:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2221      	movs	r2, #33	; 0x21
 8002928:	2101      	movs	r1, #1
 800292a:	5499      	strb	r1, [r3, r2]
}
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b002      	add	sp, #8
 8002932:	bd80      	pop	{r7, pc}
 8002934:	fffffe7f 	.word	0xfffffe7f
 8002938:	fffffd7f 	.word	0xfffffd7f
 800293c:	40010400 	.word	0x40010400

08002940 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b002      	add	sp, #8
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	21a0      	movs	r1, #160	; 0xa0
 8002964:	438a      	bics	r2, r1
 8002966:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002968:	f7fe f9a6 	bl	8000cb8 <HAL_GetTick>
 800296c:	0003      	movs	r3, r0
 800296e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002970:	e00a      	b.n	8002988 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002972:	f7fe f9a1 	bl	8000cb8 <HAL_GetTick>
 8002976:	0002      	movs	r2, r0
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1ad2      	subs	r2, r2, r3
 800297c:	23fa      	movs	r3, #250	; 0xfa
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	429a      	cmp	r2, r3
 8002982:	d901      	bls.n	8002988 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e006      	b.n	8002996 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	4013      	ands	r3, r2
 8002992:	d0ee      	beq.n	8002972 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b004      	add	sp, #16
 800299c:	bd80      	pop	{r7, pc}

0800299e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2240      	movs	r2, #64	; 0x40
 80029ae:	4013      	ands	r3, r2
 80029b0:	d11a      	bne.n	80029e8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2201      	movs	r2, #1
 80029b8:	4252      	negs	r2, r2
 80029ba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80029bc:	f7fe f97c 	bl	8000cb8 <HAL_GetTick>
 80029c0:	0003      	movs	r3, r0
 80029c2:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80029c4:	e00a      	b.n	80029dc <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80029c6:	f7fe f977 	bl	8000cb8 <HAL_GetTick>
 80029ca:	0002      	movs	r2, r0
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1ad2      	subs	r2, r2, r3
 80029d0:	23fa      	movs	r3, #250	; 0xfa
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d901      	bls.n	80029dc <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e006      	b.n	80029ea <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2240      	movs	r2, #64	; 0x40
 80029e4:	4013      	ands	r3, r2
 80029e6:	d0ee      	beq.n	80029c6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	0018      	movs	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b004      	add	sp, #16
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	0002      	movs	r2, r0
 80029fa:	1dfb      	adds	r3, r7, #7
 80029fc:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002a02:	230b      	movs	r3, #11
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	1dfa      	adds	r2, r7, #7
 8002a08:	7812      	ldrb	r2, [r2, #0]
 8002a0a:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002a0c:	e008      	b.n	8002a20 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	3301      	adds	r3, #1
 8002a12:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002a14:	220b      	movs	r2, #11
 8002a16:	18bb      	adds	r3, r7, r2
 8002a18:	18ba      	adds	r2, r7, r2
 8002a1a:	7812      	ldrb	r2, [r2, #0]
 8002a1c:	3a0a      	subs	r2, #10
 8002a1e:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002a20:	210b      	movs	r1, #11
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b09      	cmp	r3, #9
 8002a28:	d8f1      	bhi.n	8002a0e <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	187b      	adds	r3, r7, r1
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	b2db      	uxtb	r3, r3
}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b004      	add	sp, #16
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b002      	add	sp, #8
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e083      	b.n	8002b6e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	2382      	movs	r3, #130	; 0x82
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d009      	beq.n	8002a8e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	61da      	str	r2, [r3, #28]
 8002a80:	e005      	b.n	8002a8e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2251      	movs	r2, #81	; 0x51
 8002a98:	5c9b      	ldrb	r3, [r3, r2]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d107      	bne.n	8002ab0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2250      	movs	r2, #80	; 0x50
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f7fd fef8 	bl	80008a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2251      	movs	r2, #81	; 0x51
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2140      	movs	r1, #64	; 0x40
 8002ac4:	438a      	bics	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	2382      	movs	r3, #130	; 0x82
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	401a      	ands	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6899      	ldr	r1, [r3, #8]
 8002ad6:	2384      	movs	r3, #132	; 0x84
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	400b      	ands	r3, r1
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68d9      	ldr	r1, [r3, #12]
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	400b      	ands	r3, r1
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2102      	movs	r1, #2
 8002af0:	400b      	ands	r3, r1
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	2101      	movs	r1, #1
 8002afa:	400b      	ands	r3, r1
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6999      	ldr	r1, [r3, #24]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	400b      	ands	r3, r1
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	2138      	movs	r1, #56	; 0x38
 8002b10:	400b      	ands	r3, r1
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	2180      	movs	r1, #128	; 0x80
 8002b1a:	400b      	ands	r3, r1
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	0011      	movs	r1, r2
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	019b      	lsls	r3, r3, #6
 8002b28:	401a      	ands	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	0c1b      	lsrs	r3, r3, #16
 8002b38:	2204      	movs	r2, #4
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	2210      	movs	r2, #16
 8002b44:	401a      	ands	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69da      	ldr	r2, [r3, #28]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4907      	ldr	r1, [pc, #28]	; (8002b78 <HAL_SPI_Init+0x124>)
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2251      	movs	r2, #81	; 0x51
 8002b68:	2101      	movs	r1, #1
 8002b6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	0018      	movs	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b002      	add	sp, #8
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	fffff7ff 	.word	0xfffff7ff

08002b7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e044      	b.n	8002c18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d107      	bne.n	8002ba6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2274      	movs	r2, #116	; 0x74
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f7fd fee3 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2224      	movs	r2, #36	; 0x24
 8002baa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	438a      	bics	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f000 fa50 	bl	8003064 <UART_SetConfig>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e024      	b.n	8002c18 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f000 fd01 	bl	80035e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	490d      	ldr	r1, [pc, #52]	; (8002c20 <HAL_UART_Init+0xa4>)
 8002bea:	400a      	ands	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	212a      	movs	r1, #42	; 0x2a
 8002bfa:	438a      	bics	r2, r1
 8002bfc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f000 fd99 	bl	8003748 <UART_CheckIdleState>
 8002c16:	0003      	movs	r3, r0
}
 8002c18:	0018      	movs	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	ffffb7ff 	.word	0xffffb7ff

08002c24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	4ab5      	ldr	r2, [pc, #724]	; (8002f1c <HAL_UART_IRQHandler+0x2f8>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d112      	bne.n	8002c78 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	2220      	movs	r2, #32
 8002c56:	4013      	ands	r3, r2
 8002c58:	d00e      	beq.n	8002c78 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d00a      	beq.n	8002c78 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d100      	bne.n	8002c6c <HAL_UART_IRQHandler+0x48>
 8002c6a:	e1d1      	b.n	8003010 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	0010      	movs	r0, r2
 8002c74:	4798      	blx	r3
      }
      return;
 8002c76:	e1cb      	b.n	8003010 <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d100      	bne.n	8002c80 <HAL_UART_IRQHandler+0x5c>
 8002c7e:	e0d9      	b.n	8002e34 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2201      	movs	r2, #1
 8002c84:	4013      	ands	r3, r2
 8002c86:	d104      	bne.n	8002c92 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	4aa5      	ldr	r2, [pc, #660]	; (8002f20 <HAL_UART_IRQHandler+0x2fc>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d100      	bne.n	8002c92 <HAL_UART_IRQHandler+0x6e>
 8002c90:	e0d0      	b.n	8002e34 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	2201      	movs	r2, #1
 8002c96:	4013      	ands	r3, r2
 8002c98:	d010      	beq.n	8002cbc <HAL_UART_IRQHandler+0x98>
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d00b      	beq.n	8002cbc <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2280      	movs	r2, #128	; 0x80
 8002cb0:	589b      	ldr	r3, [r3, r2]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2180      	movs	r1, #128	; 0x80
 8002cba:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d00f      	beq.n	8002ce4 <HAL_UART_IRQHandler+0xc0>
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d00b      	beq.n	8002ce4 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2280      	movs	r2, #128	; 0x80
 8002cd8:	589b      	ldr	r3, [r3, r2]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2180      	movs	r1, #128	; 0x80
 8002ce2:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d00f      	beq.n	8002d0c <HAL_UART_IRQHandler+0xe8>
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d00b      	beq.n	8002d0c <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	589b      	ldr	r3, [r3, r2]
 8002d02:	2202      	movs	r2, #2
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2180      	movs	r1, #128	; 0x80
 8002d0a:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2208      	movs	r2, #8
 8002d10:	4013      	ands	r3, r2
 8002d12:	d013      	beq.n	8002d3c <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2220      	movs	r2, #32
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d103      	bne.n	8002d24 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d22:	d00b      	beq.n	8002d3c <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2208      	movs	r2, #8
 8002d2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2280      	movs	r2, #128	; 0x80
 8002d30:	589b      	ldr	r3, [r3, r2]
 8002d32:	2208      	movs	r2, #8
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2180      	movs	r1, #128	; 0x80
 8002d3a:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	2380      	movs	r3, #128	; 0x80
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	4013      	ands	r3, r2
 8002d44:	d011      	beq.n	8002d6a <HAL_UART_IRQHandler+0x146>
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	04db      	lsls	r3, r3, #19
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d00c      	beq.n	8002d6a <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2280      	movs	r2, #128	; 0x80
 8002d56:	0112      	lsls	r2, r2, #4
 8002d58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2280      	movs	r2, #128	; 0x80
 8002d5e:	589b      	ldr	r3, [r3, r2]
 8002d60:	2220      	movs	r2, #32
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2180      	movs	r1, #128	; 0x80
 8002d68:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2280      	movs	r2, #128	; 0x80
 8002d6e:	589b      	ldr	r3, [r3, r2]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d100      	bne.n	8002d76 <HAL_UART_IRQHandler+0x152>
 8002d74:	e14e      	b.n	8003014 <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d00c      	beq.n	8002d98 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	2220      	movs	r2, #32
 8002d82:	4013      	ands	r3, r2
 8002d84:	d008      	beq.n	8002d98 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d004      	beq.n	8002d98 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	0010      	movs	r0, r2
 8002d96:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2280      	movs	r2, #128	; 0x80
 8002d9c:	589b      	ldr	r3, [r3, r2]
 8002d9e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2240      	movs	r2, #64	; 0x40
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d003      	beq.n	8002db6 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2228      	movs	r2, #40	; 0x28
 8002db2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002db4:	d033      	beq.n	8002e1e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	0018      	movs	r0, r3
 8002dba:	f000 fd8b 	bl	80038d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2240      	movs	r2, #64	; 0x40
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
 8002dca:	d123      	bne.n	8002e14 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2140      	movs	r1, #64	; 0x40
 8002dd8:	438a      	bics	r2, r1
 8002dda:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d012      	beq.n	8002e0a <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	4a4e      	ldr	r2, [pc, #312]	; (8002f24 <HAL_UART_IRQHandler+0x300>)
 8002dea:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	0018      	movs	r0, r3
 8002df2:	f7fe f889 	bl	8000f08 <HAL_DMA_Abort_IT>
 8002df6:	1e03      	subs	r3, r0, #0
 8002df8:	d01a      	beq.n	8002e30 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	0018      	movs	r0, r3
 8002e06:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e08:	e012      	b.n	8002e30 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f000 f915 	bl	800303c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e12:	e00d      	b.n	8002e30 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	0018      	movs	r0, r3
 8002e18:	f000 f910 	bl	800303c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e1c:	e008      	b.n	8002e30 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	0018      	movs	r0, r3
 8002e22:	f000 f90b 	bl	800303c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002e2e:	e0f1      	b.n	8003014 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e30:	46c0      	nop			; (mov r8, r8)
    return;
 8002e32:	e0ef      	b.n	8003014 <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d000      	beq.n	8002e3e <HAL_UART_IRQHandler+0x21a>
 8002e3c:	e0b5      	b.n	8002faa <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	2210      	movs	r2, #16
 8002e42:	4013      	ands	r3, r2
 8002e44:	d100      	bne.n	8002e48 <HAL_UART_IRQHandler+0x224>
 8002e46:	e0b0      	b.n	8002faa <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2210      	movs	r2, #16
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d100      	bne.n	8002e52 <HAL_UART_IRQHandler+0x22e>
 8002e50:	e0ab      	b.n	8002faa <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2210      	movs	r2, #16
 8002e58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2240      	movs	r2, #64	; 0x40
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	d161      	bne.n	8002f2c <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	2108      	movs	r1, #8
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8002e76:	187b      	adds	r3, r7, r1
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d100      	bne.n	8002e80 <HAL_UART_IRQHandler+0x25c>
 8002e7e:	e0cb      	b.n	8003018 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2258      	movs	r2, #88	; 0x58
 8002e84:	5a9b      	ldrh	r3, [r3, r2]
 8002e86:	187a      	adds	r2, r7, r1
 8002e88:	8812      	ldrh	r2, [r2, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d300      	bcc.n	8002e90 <HAL_UART_IRQHandler+0x26c>
 8002e8e:	e0c3      	b.n	8003018 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	187a      	adds	r2, r7, r1
 8002e94:	215a      	movs	r1, #90	; 0x5a
 8002e96:	8812      	ldrh	r2, [r2, #0]
 8002e98:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d12a      	bne.n	8002efe <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	491d      	ldr	r1, [pc, #116]	; (8002f28 <HAL_UART_IRQHandler+0x304>)
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	438a      	bics	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2140      	movs	r1, #64	; 0x40
 8002ed4:	438a      	bics	r2, r1
 8002ed6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2110      	movs	r1, #16
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7fd ffc5 	bl	8000e88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2258      	movs	r2, #88	; 0x58
 8002f02:	5a9a      	ldrh	r2, [r3, r2]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	215a      	movs	r1, #90	; 0x5a
 8002f08:	5a5b      	ldrh	r3, [r3, r1]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	0011      	movs	r1, r2
 8002f14:	0018      	movs	r0, r3
 8002f16:	f000 f899 	bl	800304c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f1a:	e07d      	b.n	8003018 <HAL_UART_IRQHandler+0x3f4>
 8002f1c:	0000080f 	.word	0x0000080f
 8002f20:	04000120 	.word	0x04000120
 8002f24:	08003935 	.word	0x08003935
 8002f28:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2258      	movs	r2, #88	; 0x58
 8002f30:	5a99      	ldrh	r1, [r3, r2]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	225a      	movs	r2, #90	; 0x5a
 8002f36:	5a9b      	ldrh	r3, [r3, r2]
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	200a      	movs	r0, #10
 8002f3c:	183b      	adds	r3, r7, r0
 8002f3e:	1a8a      	subs	r2, r1, r2
 8002f40:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	225a      	movs	r2, #90	; 0x5a
 8002f46:	5a9b      	ldrh	r3, [r3, r2]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d100      	bne.n	8002f50 <HAL_UART_IRQHandler+0x32c>
 8002f4e:	e065      	b.n	800301c <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 8002f50:	183b      	adds	r3, r7, r0
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d061      	beq.n	800301c <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4931      	ldr	r1, [pc, #196]	; (8003028 <HAL_UART_IRQHandler+0x404>)
 8002f64:	400a      	ands	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2101      	movs	r1, #1
 8002f74:	438a      	bics	r2, r1
 8002f76:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2110      	movs	r1, #16
 8002f96:	438a      	bics	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f9a:	183b      	adds	r3, r7, r0
 8002f9c:	881a      	ldrh	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0011      	movs	r1, r2
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 f852 	bl	800304c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002fa8:	e038      	b.n	800301c <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	035b      	lsls	r3, r3, #13
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d00e      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x3ae>
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	2380      	movs	r3, #128	; 0x80
 8002fb8:	03db      	lsls	r3, r3, #15
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d009      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	0352      	lsls	r2, r2, #13
 8002fc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f000 fce3 	bl	8003996 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fd0:	e027      	b.n	8003022 <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d00d      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2280      	movs	r2, #128	; 0x80
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d009      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d01a      	beq.n	8003020 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	0010      	movs	r0, r2
 8002ff2:	4798      	blx	r3
    }
    return;
 8002ff4:	e014      	b.n	8003020 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	2240      	movs	r2, #64	; 0x40
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d011      	beq.n	8003022 <HAL_UART_IRQHandler+0x3fe>
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2240      	movs	r2, #64	; 0x40
 8003002:	4013      	ands	r3, r2
 8003004:	d00d      	beq.n	8003022 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	0018      	movs	r0, r3
 800300a:	f000 fcaa 	bl	8003962 <UART_EndTransmit_IT>
    return;
 800300e:	e008      	b.n	8003022 <HAL_UART_IRQHandler+0x3fe>
      return;
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	e006      	b.n	8003022 <HAL_UART_IRQHandler+0x3fe>
    return;
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	e004      	b.n	8003022 <HAL_UART_IRQHandler+0x3fe>
      return;
 8003018:	46c0      	nop			; (mov r8, r8)
 800301a:	e002      	b.n	8003022 <HAL_UART_IRQHandler+0x3fe>
      return;
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	e000      	b.n	8003022 <HAL_UART_IRQHandler+0x3fe>
    return;
 8003020:	46c0      	nop			; (mov r8, r8)
  }

}
 8003022:	46bd      	mov	sp, r7
 8003024:	b008      	add	sp, #32
 8003026:	bd80      	pop	{r7, pc}
 8003028:	fffffedf 	.word	0xfffffedf

0800302c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003034:	46c0      	nop			; (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003044:	46c0      	nop			; (mov r8, r8)
 8003046:	46bd      	mov	sp, r7
 8003048:	b002      	add	sp, #8
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	000a      	movs	r2, r1
 8003056:	1cbb      	adds	r3, r7, #2
 8003058:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	b002      	add	sp, #8
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003064:	b5b0      	push	{r4, r5, r7, lr}
 8003066:	b08e      	sub	sp, #56	; 0x38
 8003068:	af00      	add	r7, sp, #0
 800306a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800306c:	231a      	movs	r3, #26
 800306e:	2218      	movs	r2, #24
 8003070:	4694      	mov	ip, r2
 8003072:	44bc      	add	ip, r7
 8003074:	4463      	add	r3, ip
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	431a      	orrs	r2, r3
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	431a      	orrs	r2, r3
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	4313      	orrs	r3, r2
 8003090:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4ab0      	ldr	r2, [pc, #704]	; (800335c <UART_SetConfig+0x2f8>)
 800309a:	4013      	ands	r3, r2
 800309c:	0019      	movs	r1, r3
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030a4:	430a      	orrs	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4aac      	ldr	r2, [pc, #688]	; (8003360 <UART_SetConfig+0x2fc>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	0019      	movs	r1, r3
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4aa6      	ldr	r2, [pc, #664]	; (8003364 <UART_SetConfig+0x300>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d004      	beq.n	80030da <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030d6:	4313      	orrs	r3, r2
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4aa1      	ldr	r2, [pc, #644]	; (8003368 <UART_SetConfig+0x304>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	0019      	movs	r1, r3
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030ec:	430a      	orrs	r2, r1
 80030ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a9d      	ldr	r2, [pc, #628]	; (800336c <UART_SetConfig+0x308>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d136      	bne.n	8003168 <UART_SetConfig+0x104>
 80030fa:	4b9d      	ldr	r3, [pc, #628]	; (8003370 <UART_SetConfig+0x30c>)
 80030fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fe:	2203      	movs	r2, #3
 8003100:	4013      	ands	r3, r2
 8003102:	2b03      	cmp	r3, #3
 8003104:	d020      	beq.n	8003148 <UART_SetConfig+0xe4>
 8003106:	d827      	bhi.n	8003158 <UART_SetConfig+0xf4>
 8003108:	2b02      	cmp	r3, #2
 800310a:	d00d      	beq.n	8003128 <UART_SetConfig+0xc4>
 800310c:	d824      	bhi.n	8003158 <UART_SetConfig+0xf4>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <UART_SetConfig+0xb4>
 8003112:	2b01      	cmp	r3, #1
 8003114:	d010      	beq.n	8003138 <UART_SetConfig+0xd4>
 8003116:	e01f      	b.n	8003158 <UART_SetConfig+0xf4>
 8003118:	231b      	movs	r3, #27
 800311a:	2218      	movs	r2, #24
 800311c:	4694      	mov	ip, r2
 800311e:	44bc      	add	ip, r7
 8003120:	4463      	add	r3, ip
 8003122:	2201      	movs	r2, #1
 8003124:	701a      	strb	r2, [r3, #0]
 8003126:	e0c5      	b.n	80032b4 <UART_SetConfig+0x250>
 8003128:	231b      	movs	r3, #27
 800312a:	2218      	movs	r2, #24
 800312c:	4694      	mov	ip, r2
 800312e:	44bc      	add	ip, r7
 8003130:	4463      	add	r3, ip
 8003132:	2202      	movs	r2, #2
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	e0bd      	b.n	80032b4 <UART_SetConfig+0x250>
 8003138:	231b      	movs	r3, #27
 800313a:	2218      	movs	r2, #24
 800313c:	4694      	mov	ip, r2
 800313e:	44bc      	add	ip, r7
 8003140:	4463      	add	r3, ip
 8003142:	2204      	movs	r2, #4
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	e0b5      	b.n	80032b4 <UART_SetConfig+0x250>
 8003148:	231b      	movs	r3, #27
 800314a:	2218      	movs	r2, #24
 800314c:	4694      	mov	ip, r2
 800314e:	44bc      	add	ip, r7
 8003150:	4463      	add	r3, ip
 8003152:	2208      	movs	r2, #8
 8003154:	701a      	strb	r2, [r3, #0]
 8003156:	e0ad      	b.n	80032b4 <UART_SetConfig+0x250>
 8003158:	231b      	movs	r3, #27
 800315a:	2218      	movs	r2, #24
 800315c:	4694      	mov	ip, r2
 800315e:	44bc      	add	ip, r7
 8003160:	4463      	add	r3, ip
 8003162:	2210      	movs	r2, #16
 8003164:	701a      	strb	r2, [r3, #0]
 8003166:	e0a5      	b.n	80032b4 <UART_SetConfig+0x250>
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a81      	ldr	r2, [pc, #516]	; (8003374 <UART_SetConfig+0x310>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d136      	bne.n	80031e0 <UART_SetConfig+0x17c>
 8003172:	4b7f      	ldr	r3, [pc, #508]	; (8003370 <UART_SetConfig+0x30c>)
 8003174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003176:	220c      	movs	r2, #12
 8003178:	4013      	ands	r3, r2
 800317a:	2b0c      	cmp	r3, #12
 800317c:	d020      	beq.n	80031c0 <UART_SetConfig+0x15c>
 800317e:	d827      	bhi.n	80031d0 <UART_SetConfig+0x16c>
 8003180:	2b08      	cmp	r3, #8
 8003182:	d00d      	beq.n	80031a0 <UART_SetConfig+0x13c>
 8003184:	d824      	bhi.n	80031d0 <UART_SetConfig+0x16c>
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <UART_SetConfig+0x12c>
 800318a:	2b04      	cmp	r3, #4
 800318c:	d010      	beq.n	80031b0 <UART_SetConfig+0x14c>
 800318e:	e01f      	b.n	80031d0 <UART_SetConfig+0x16c>
 8003190:	231b      	movs	r3, #27
 8003192:	2218      	movs	r2, #24
 8003194:	4694      	mov	ip, r2
 8003196:	44bc      	add	ip, r7
 8003198:	4463      	add	r3, ip
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	e089      	b.n	80032b4 <UART_SetConfig+0x250>
 80031a0:	231b      	movs	r3, #27
 80031a2:	2218      	movs	r2, #24
 80031a4:	4694      	mov	ip, r2
 80031a6:	44bc      	add	ip, r7
 80031a8:	4463      	add	r3, ip
 80031aa:	2202      	movs	r2, #2
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	e081      	b.n	80032b4 <UART_SetConfig+0x250>
 80031b0:	231b      	movs	r3, #27
 80031b2:	2218      	movs	r2, #24
 80031b4:	4694      	mov	ip, r2
 80031b6:	44bc      	add	ip, r7
 80031b8:	4463      	add	r3, ip
 80031ba:	2204      	movs	r2, #4
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	e079      	b.n	80032b4 <UART_SetConfig+0x250>
 80031c0:	231b      	movs	r3, #27
 80031c2:	2218      	movs	r2, #24
 80031c4:	4694      	mov	ip, r2
 80031c6:	44bc      	add	ip, r7
 80031c8:	4463      	add	r3, ip
 80031ca:	2208      	movs	r2, #8
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e071      	b.n	80032b4 <UART_SetConfig+0x250>
 80031d0:	231b      	movs	r3, #27
 80031d2:	2218      	movs	r2, #24
 80031d4:	4694      	mov	ip, r2
 80031d6:	44bc      	add	ip, r7
 80031d8:	4463      	add	r3, ip
 80031da:	2210      	movs	r2, #16
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e069      	b.n	80032b4 <UART_SetConfig+0x250>
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a64      	ldr	r2, [pc, #400]	; (8003378 <UART_SetConfig+0x314>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d107      	bne.n	80031fa <UART_SetConfig+0x196>
 80031ea:	231b      	movs	r3, #27
 80031ec:	2218      	movs	r2, #24
 80031ee:	4694      	mov	ip, r2
 80031f0:	44bc      	add	ip, r7
 80031f2:	4463      	add	r3, ip
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	e05c      	b.n	80032b4 <UART_SetConfig+0x250>
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a5f      	ldr	r2, [pc, #380]	; (800337c <UART_SetConfig+0x318>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d107      	bne.n	8003214 <UART_SetConfig+0x1b0>
 8003204:	231b      	movs	r3, #27
 8003206:	2218      	movs	r2, #24
 8003208:	4694      	mov	ip, r2
 800320a:	44bc      	add	ip, r7
 800320c:	4463      	add	r3, ip
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
 8003212:	e04f      	b.n	80032b4 <UART_SetConfig+0x250>
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a52      	ldr	r2, [pc, #328]	; (8003364 <UART_SetConfig+0x300>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d143      	bne.n	80032a6 <UART_SetConfig+0x242>
 800321e:	4b54      	ldr	r3, [pc, #336]	; (8003370 <UART_SetConfig+0x30c>)
 8003220:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003222:	23c0      	movs	r3, #192	; 0xc0
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	4013      	ands	r3, r2
 8003228:	22c0      	movs	r2, #192	; 0xc0
 800322a:	0112      	lsls	r2, r2, #4
 800322c:	4293      	cmp	r3, r2
 800322e:	d02a      	beq.n	8003286 <UART_SetConfig+0x222>
 8003230:	22c0      	movs	r2, #192	; 0xc0
 8003232:	0112      	lsls	r2, r2, #4
 8003234:	4293      	cmp	r3, r2
 8003236:	d82e      	bhi.n	8003296 <UART_SetConfig+0x232>
 8003238:	2280      	movs	r2, #128	; 0x80
 800323a:	0112      	lsls	r2, r2, #4
 800323c:	4293      	cmp	r3, r2
 800323e:	d012      	beq.n	8003266 <UART_SetConfig+0x202>
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	0112      	lsls	r2, r2, #4
 8003244:	4293      	cmp	r3, r2
 8003246:	d826      	bhi.n	8003296 <UART_SetConfig+0x232>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d004      	beq.n	8003256 <UART_SetConfig+0x1f2>
 800324c:	2280      	movs	r2, #128	; 0x80
 800324e:	00d2      	lsls	r2, r2, #3
 8003250:	4293      	cmp	r3, r2
 8003252:	d010      	beq.n	8003276 <UART_SetConfig+0x212>
 8003254:	e01f      	b.n	8003296 <UART_SetConfig+0x232>
 8003256:	231b      	movs	r3, #27
 8003258:	2218      	movs	r2, #24
 800325a:	4694      	mov	ip, r2
 800325c:	44bc      	add	ip, r7
 800325e:	4463      	add	r3, ip
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	e026      	b.n	80032b4 <UART_SetConfig+0x250>
 8003266:	231b      	movs	r3, #27
 8003268:	2218      	movs	r2, #24
 800326a:	4694      	mov	ip, r2
 800326c:	44bc      	add	ip, r7
 800326e:	4463      	add	r3, ip
 8003270:	2202      	movs	r2, #2
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	e01e      	b.n	80032b4 <UART_SetConfig+0x250>
 8003276:	231b      	movs	r3, #27
 8003278:	2218      	movs	r2, #24
 800327a:	4694      	mov	ip, r2
 800327c:	44bc      	add	ip, r7
 800327e:	4463      	add	r3, ip
 8003280:	2204      	movs	r2, #4
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e016      	b.n	80032b4 <UART_SetConfig+0x250>
 8003286:	231b      	movs	r3, #27
 8003288:	2218      	movs	r2, #24
 800328a:	4694      	mov	ip, r2
 800328c:	44bc      	add	ip, r7
 800328e:	4463      	add	r3, ip
 8003290:	2208      	movs	r2, #8
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	e00e      	b.n	80032b4 <UART_SetConfig+0x250>
 8003296:	231b      	movs	r3, #27
 8003298:	2218      	movs	r2, #24
 800329a:	4694      	mov	ip, r2
 800329c:	44bc      	add	ip, r7
 800329e:	4463      	add	r3, ip
 80032a0:	2210      	movs	r2, #16
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e006      	b.n	80032b4 <UART_SetConfig+0x250>
 80032a6:	231b      	movs	r3, #27
 80032a8:	2218      	movs	r2, #24
 80032aa:	4694      	mov	ip, r2
 80032ac:	44bc      	add	ip, r7
 80032ae:	4463      	add	r3, ip
 80032b0:	2210      	movs	r2, #16
 80032b2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2a      	ldr	r2, [pc, #168]	; (8003364 <UART_SetConfig+0x300>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d000      	beq.n	80032c0 <UART_SetConfig+0x25c>
 80032be:	e09e      	b.n	80033fe <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032c0:	231b      	movs	r3, #27
 80032c2:	2218      	movs	r2, #24
 80032c4:	4694      	mov	ip, r2
 80032c6:	44bc      	add	ip, r7
 80032c8:	4463      	add	r3, ip
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d01d      	beq.n	800330c <UART_SetConfig+0x2a8>
 80032d0:	dc20      	bgt.n	8003314 <UART_SetConfig+0x2b0>
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d015      	beq.n	8003302 <UART_SetConfig+0x29e>
 80032d6:	dc1d      	bgt.n	8003314 <UART_SetConfig+0x2b0>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <UART_SetConfig+0x27e>
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d005      	beq.n	80032ec <UART_SetConfig+0x288>
 80032e0:	e018      	b.n	8003314 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e2:	f7fe fe01 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 80032e6:	0003      	movs	r3, r0
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032ea:	e01d      	b.n	8003328 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032ec:	4b20      	ldr	r3, [pc, #128]	; (8003370 <UART_SetConfig+0x30c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2210      	movs	r2, #16
 80032f2:	4013      	ands	r3, r2
 80032f4:	d002      	beq.n	80032fc <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80032f6:	4b22      	ldr	r3, [pc, #136]	; (8003380 <UART_SetConfig+0x31c>)
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80032fa:	e015      	b.n	8003328 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 80032fc:	4b21      	ldr	r3, [pc, #132]	; (8003384 <UART_SetConfig+0x320>)
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003300:	e012      	b.n	8003328 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003302:	f7fe fd41 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8003306:	0003      	movs	r3, r0
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800330a:	e00d      	b.n	8003328 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003312:	e009      	b.n	8003328 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003318:	231a      	movs	r3, #26
 800331a:	2218      	movs	r2, #24
 800331c:	4694      	mov	ip, r2
 800331e:	44bc      	add	ip, r7
 8003320:	4463      	add	r3, ip
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
        break;
 8003326:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332a:	2b00      	cmp	r3, #0
 800332c:	d100      	bne.n	8003330 <UART_SetConfig+0x2cc>
 800332e:	e13c      	b.n	80035aa <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	0013      	movs	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	189b      	adds	r3, r3, r2
 800333a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800333c:	429a      	cmp	r2, r3
 800333e:	d305      	bcc.n	800334c <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003348:	429a      	cmp	r2, r3
 800334a:	d91d      	bls.n	8003388 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 800334c:	231a      	movs	r3, #26
 800334e:	2218      	movs	r2, #24
 8003350:	4694      	mov	ip, r2
 8003352:	44bc      	add	ip, r7
 8003354:	4463      	add	r3, ip
 8003356:	2201      	movs	r2, #1
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	e126      	b.n	80035aa <UART_SetConfig+0x546>
 800335c:	efff69f3 	.word	0xefff69f3
 8003360:	ffffcfff 	.word	0xffffcfff
 8003364:	40004800 	.word	0x40004800
 8003368:	fffff4ff 	.word	0xfffff4ff
 800336c:	40013800 	.word	0x40013800
 8003370:	40021000 	.word	0x40021000
 8003374:	40004400 	.word	0x40004400
 8003378:	40004c00 	.word	0x40004c00
 800337c:	40005000 	.word	0x40005000
 8003380:	003d0900 	.word	0x003d0900
 8003384:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	6939      	ldr	r1, [r7, #16]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	000b      	movs	r3, r1
 8003396:	0e1b      	lsrs	r3, r3, #24
 8003398:	0010      	movs	r0, r2
 800339a:	0205      	lsls	r5, r0, #8
 800339c:	431d      	orrs	r5, r3
 800339e:	000b      	movs	r3, r1
 80033a0:	021c      	lsls	r4, r3, #8
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	085b      	lsrs	r3, r3, #1
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	2300      	movs	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	68b8      	ldr	r0, [r7, #8]
 80033b0:	68f9      	ldr	r1, [r7, #12]
 80033b2:	1900      	adds	r0, r0, r4
 80033b4:	4169      	adcs	r1, r5
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	2300      	movs	r3, #0
 80033be:	607b      	str	r3, [r7, #4]
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f7fc ff2c 	bl	8000220 <__aeabi_uldivmod>
 80033c8:	0002      	movs	r2, r0
 80033ca:	000b      	movs	r3, r1
 80033cc:	0013      	movs	r3, r2
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033d2:	23c0      	movs	r3, #192	; 0xc0
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d309      	bcc.n	80033ee <UART_SetConfig+0x38a>
 80033da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	035b      	lsls	r3, r3, #13
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d204      	bcs.n	80033ee <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033ea:	60da      	str	r2, [r3, #12]
 80033ec:	e0dd      	b.n	80035aa <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80033ee:	231a      	movs	r3, #26
 80033f0:	2218      	movs	r2, #24
 80033f2:	4694      	mov	ip, r2
 80033f4:	44bc      	add	ip, r7
 80033f6:	4463      	add	r3, ip
 80033f8:	2201      	movs	r2, #1
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	e0d5      	b.n	80035aa <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	429a      	cmp	r2, r3
 8003408:	d000      	beq.n	800340c <UART_SetConfig+0x3a8>
 800340a:	e074      	b.n	80034f6 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 800340c:	231b      	movs	r3, #27
 800340e:	2218      	movs	r2, #24
 8003410:	4694      	mov	ip, r2
 8003412:	44bc      	add	ip, r7
 8003414:	4463      	add	r3, ip
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b08      	cmp	r3, #8
 800341a:	d822      	bhi.n	8003462 <UART_SetConfig+0x3fe>
 800341c:	009a      	lsls	r2, r3, #2
 800341e:	4b6b      	ldr	r3, [pc, #428]	; (80035cc <UART_SetConfig+0x568>)
 8003420:	18d3      	adds	r3, r2, r3
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003426:	f7fe fd5f 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 800342a:	0003      	movs	r3, r0
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800342e:	e022      	b.n	8003476 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003430:	f7fe fd70 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8003434:	0003      	movs	r3, r0
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003438:	e01d      	b.n	8003476 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800343a:	4b65      	ldr	r3, [pc, #404]	; (80035d0 <UART_SetConfig+0x56c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2210      	movs	r2, #16
 8003440:	4013      	ands	r3, r2
 8003442:	d002      	beq.n	800344a <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003444:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <UART_SetConfig+0x570>)
 8003446:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003448:	e015      	b.n	8003476 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800344a:	4b63      	ldr	r3, [pc, #396]	; (80035d8 <UART_SetConfig+0x574>)
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800344e:	e012      	b.n	8003476 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003450:	f7fe fc9a 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8003454:	0003      	movs	r3, r0
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003458:	e00d      	b.n	8003476 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800345a:	2380      	movs	r3, #128	; 0x80
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003460:	e009      	b.n	8003476 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003466:	231a      	movs	r3, #26
 8003468:	2218      	movs	r2, #24
 800346a:	4694      	mov	ip, r2
 800346c:	44bc      	add	ip, r7
 800346e:	4463      	add	r3, ip
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
        break;
 8003474:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d100      	bne.n	800347e <UART_SetConfig+0x41a>
 800347c:	e095      	b.n	80035aa <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	005a      	lsls	r2, r3, #1
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	085b      	lsrs	r3, r3, #1
 8003488:	18d2      	adds	r2, r2, r3
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	0019      	movs	r1, r3
 8003490:	0010      	movs	r0, r2
 8003492:	f7fc fe39 	bl	8000108 <__udivsi3>
 8003496:	0003      	movs	r3, r0
 8003498:	b29b      	uxth	r3, r3
 800349a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349e:	2b0f      	cmp	r3, #15
 80034a0:	d921      	bls.n	80034e6 <UART_SetConfig+0x482>
 80034a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034a4:	2380      	movs	r3, #128	; 0x80
 80034a6:	025b      	lsls	r3, r3, #9
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d21c      	bcs.n	80034e6 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	200e      	movs	r0, #14
 80034b2:	2418      	movs	r4, #24
 80034b4:	193b      	adds	r3, r7, r4
 80034b6:	181b      	adds	r3, r3, r0
 80034b8:	210f      	movs	r1, #15
 80034ba:	438a      	bics	r2, r1
 80034bc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	085b      	lsrs	r3, r3, #1
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2207      	movs	r2, #7
 80034c6:	4013      	ands	r3, r2
 80034c8:	b299      	uxth	r1, r3
 80034ca:	193b      	adds	r3, r7, r4
 80034cc:	181b      	adds	r3, r3, r0
 80034ce:	193a      	adds	r2, r7, r4
 80034d0:	1812      	adds	r2, r2, r0
 80034d2:	8812      	ldrh	r2, [r2, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	193a      	adds	r2, r7, r4
 80034de:	1812      	adds	r2, r2, r0
 80034e0:	8812      	ldrh	r2, [r2, #0]
 80034e2:	60da      	str	r2, [r3, #12]
 80034e4:	e061      	b.n	80035aa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80034e6:	231a      	movs	r3, #26
 80034e8:	2218      	movs	r2, #24
 80034ea:	4694      	mov	ip, r2
 80034ec:	44bc      	add	ip, r7
 80034ee:	4463      	add	r3, ip
 80034f0:	2201      	movs	r2, #1
 80034f2:	701a      	strb	r2, [r3, #0]
 80034f4:	e059      	b.n	80035aa <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034f6:	231b      	movs	r3, #27
 80034f8:	2218      	movs	r2, #24
 80034fa:	4694      	mov	ip, r2
 80034fc:	44bc      	add	ip, r7
 80034fe:	4463      	add	r3, ip
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b08      	cmp	r3, #8
 8003504:	d822      	bhi.n	800354c <UART_SetConfig+0x4e8>
 8003506:	009a      	lsls	r2, r3, #2
 8003508:	4b34      	ldr	r3, [pc, #208]	; (80035dc <UART_SetConfig+0x578>)
 800350a:	18d3      	adds	r3, r2, r3
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003510:	f7fe fcea 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 8003514:	0003      	movs	r3, r0
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003518:	e022      	b.n	8003560 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800351a:	f7fe fcfb 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 800351e:	0003      	movs	r3, r0
 8003520:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003522:	e01d      	b.n	8003560 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003524:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <UART_SetConfig+0x56c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2210      	movs	r2, #16
 800352a:	4013      	ands	r3, r2
 800352c:	d002      	beq.n	8003534 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800352e:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <UART_SetConfig+0x570>)
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003532:	e015      	b.n	8003560 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8003534:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <UART_SetConfig+0x574>)
 8003536:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003538:	e012      	b.n	8003560 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800353a:	f7fe fc25 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 800353e:	0003      	movs	r3, r0
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003542:	e00d      	b.n	8003560 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800354a:	e009      	b.n	8003560 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003550:	231a      	movs	r3, #26
 8003552:	2218      	movs	r2, #24
 8003554:	4694      	mov	ip, r2
 8003556:	44bc      	add	ip, r7
 8003558:	4463      	add	r3, ip
 800355a:	2201      	movs	r2, #1
 800355c:	701a      	strb	r2, [r3, #0]
        break;
 800355e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d021      	beq.n	80035aa <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	085a      	lsrs	r2, r3, #1
 800356c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356e:	18d2      	adds	r2, r2, r3
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	0019      	movs	r1, r3
 8003576:	0010      	movs	r0, r2
 8003578:	f7fc fdc6 	bl	8000108 <__udivsi3>
 800357c:	0003      	movs	r3, r0
 800357e:	b29b      	uxth	r3, r3
 8003580:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	2b0f      	cmp	r3, #15
 8003586:	d909      	bls.n	800359c <UART_SetConfig+0x538>
 8003588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	025b      	lsls	r3, r3, #9
 800358e:	429a      	cmp	r2, r3
 8003590:	d204      	bcs.n	800359c <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003598:	60da      	str	r2, [r3, #12]
 800359a:	e006      	b.n	80035aa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800359c:	231a      	movs	r3, #26
 800359e:	2218      	movs	r2, #24
 80035a0:	4694      	mov	ip, r2
 80035a2:	44bc      	add	ip, r7
 80035a4:	4463      	add	r3, ip
 80035a6:	2201      	movs	r2, #1
 80035a8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	2200      	movs	r2, #0
 80035ae:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	2200      	movs	r2, #0
 80035b4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035b6:	231a      	movs	r3, #26
 80035b8:	2218      	movs	r2, #24
 80035ba:	4694      	mov	ip, r2
 80035bc:	44bc      	add	ip, r7
 80035be:	4463      	add	r3, ip
 80035c0:	781b      	ldrb	r3, [r3, #0]
}
 80035c2:	0018      	movs	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b00e      	add	sp, #56	; 0x38
 80035c8:	bdb0      	pop	{r4, r5, r7, pc}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	08005f64 	.word	0x08005f64
 80035d0:	40021000 	.word	0x40021000
 80035d4:	003d0900 	.word	0x003d0900
 80035d8:	00f42400 	.word	0x00f42400
 80035dc:	08005f88 	.word	0x08005f88

080035e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	2201      	movs	r2, #1
 80035ee:	4013      	ands	r3, r2
 80035f0:	d00b      	beq.n	800360a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	4a4a      	ldr	r2, [pc, #296]	; (8003724 <UART_AdvFeatureConfig+0x144>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	0019      	movs	r1, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	2202      	movs	r2, #2
 8003610:	4013      	ands	r3, r2
 8003612:	d00b      	beq.n	800362c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4a43      	ldr	r2, [pc, #268]	; (8003728 <UART_AdvFeatureConfig+0x148>)
 800361c:	4013      	ands	r3, r2
 800361e:	0019      	movs	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	2204      	movs	r2, #4
 8003632:	4013      	ands	r3, r2
 8003634:	d00b      	beq.n	800364e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4a3b      	ldr	r2, [pc, #236]	; (800372c <UART_AdvFeatureConfig+0x14c>)
 800363e:	4013      	ands	r3, r2
 8003640:	0019      	movs	r1, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	2208      	movs	r2, #8
 8003654:	4013      	ands	r3, r2
 8003656:	d00b      	beq.n	8003670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4a34      	ldr	r2, [pc, #208]	; (8003730 <UART_AdvFeatureConfig+0x150>)
 8003660:	4013      	ands	r3, r2
 8003662:	0019      	movs	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	2210      	movs	r2, #16
 8003676:	4013      	ands	r3, r2
 8003678:	d00b      	beq.n	8003692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a2c      	ldr	r2, [pc, #176]	; (8003734 <UART_AdvFeatureConfig+0x154>)
 8003682:	4013      	ands	r3, r2
 8003684:	0019      	movs	r1, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	2220      	movs	r2, #32
 8003698:	4013      	ands	r3, r2
 800369a:	d00b      	beq.n	80036b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	4a25      	ldr	r2, [pc, #148]	; (8003738 <UART_AdvFeatureConfig+0x158>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	0019      	movs	r1, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	2240      	movs	r2, #64	; 0x40
 80036ba:	4013      	ands	r3, r2
 80036bc:	d01d      	beq.n	80036fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	4a1d      	ldr	r2, [pc, #116]	; (800373c <UART_AdvFeatureConfig+0x15c>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	035b      	lsls	r3, r3, #13
 80036de:	429a      	cmp	r2, r3
 80036e0:	d10b      	bne.n	80036fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4a15      	ldr	r2, [pc, #84]	; (8003740 <UART_AdvFeatureConfig+0x160>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	2280      	movs	r2, #128	; 0x80
 8003700:	4013      	ands	r3, r2
 8003702:	d00b      	beq.n	800371c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	4a0e      	ldr	r2, [pc, #56]	; (8003744 <UART_AdvFeatureConfig+0x164>)
 800370c:	4013      	ands	r3, r2
 800370e:	0019      	movs	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]
  }
}
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b002      	add	sp, #8
 8003722:	bd80      	pop	{r7, pc}
 8003724:	fffdffff 	.word	0xfffdffff
 8003728:	fffeffff 	.word	0xfffeffff
 800372c:	fffbffff 	.word	0xfffbffff
 8003730:	ffff7fff 	.word	0xffff7fff
 8003734:	ffffefff 	.word	0xffffefff
 8003738:	ffffdfff 	.word	0xffffdfff
 800373c:	ffefffff 	.word	0xffefffff
 8003740:	ff9fffff 	.word	0xff9fffff
 8003744:	fff7ffff 	.word	0xfff7ffff

08003748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af02      	add	r7, sp, #8
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2280      	movs	r2, #128	; 0x80
 8003754:	2100      	movs	r1, #0
 8003756:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003758:	f7fd faae 	bl	8000cb8 <HAL_GetTick>
 800375c:	0003      	movs	r3, r0
 800375e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2208      	movs	r2, #8
 8003768:	4013      	ands	r3, r2
 800376a:	2b08      	cmp	r3, #8
 800376c:	d10c      	bne.n	8003788 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2280      	movs	r2, #128	; 0x80
 8003772:	0391      	lsls	r1, r2, #14
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4a17      	ldr	r2, [pc, #92]	; (80037d4 <UART_CheckIdleState+0x8c>)
 8003778:	9200      	str	r2, [sp, #0]
 800377a:	2200      	movs	r2, #0
 800377c:	f000 f82c 	bl	80037d8 <UART_WaitOnFlagUntilTimeout>
 8003780:	1e03      	subs	r3, r0, #0
 8003782:	d001      	beq.n	8003788 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e021      	b.n	80037cc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2204      	movs	r2, #4
 8003790:	4013      	ands	r3, r2
 8003792:	2b04      	cmp	r3, #4
 8003794:	d10c      	bne.n	80037b0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2280      	movs	r2, #128	; 0x80
 800379a:	03d1      	lsls	r1, r2, #15
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	4a0d      	ldr	r2, [pc, #52]	; (80037d4 <UART_CheckIdleState+0x8c>)
 80037a0:	9200      	str	r2, [sp, #0]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f000 f818 	bl	80037d8 <UART_WaitOnFlagUntilTimeout>
 80037a8:	1e03      	subs	r3, r0, #0
 80037aa:	d001      	beq.n	80037b0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e00d      	b.n	80037cc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2274      	movs	r2, #116	; 0x74
 80037c6:	2100      	movs	r1, #0
 80037c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	0018      	movs	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b004      	add	sp, #16
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	01ffffff 	.word	0x01ffffff

080037d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	1dfb      	adds	r3, r7, #7
 80037e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e8:	e05e      	b.n	80038a8 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	3301      	adds	r3, #1
 80037ee:	d05b      	beq.n	80038a8 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f0:	f7fd fa62 	bl	8000cb8 <HAL_GetTick>
 80037f4:	0002      	movs	r2, r0
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d302      	bcc.n	8003806 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d11b      	bne.n	800383e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	492f      	ldr	r1, [pc, #188]	; (80038d0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003812:	400a      	ands	r2, r1
 8003814:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2101      	movs	r1, #1
 8003822:	438a      	bics	r2, r1
 8003824:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2274      	movs	r2, #116	; 0x74
 8003836:	2100      	movs	r1, #0
 8003838:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e044      	b.n	80038c8 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2204      	movs	r2, #4
 8003846:	4013      	ands	r3, r2
 8003848:	d02e      	beq.n	80038a8 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	401a      	ands	r2, r3
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	429a      	cmp	r2, r3
 800385c:	d124      	bne.n	80038a8 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	0112      	lsls	r2, r2, #4
 8003866:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4917      	ldr	r1, [pc, #92]	; (80038d0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003874:	400a      	ands	r2, r1
 8003876:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2101      	movs	r1, #1
 8003884:	438a      	bics	r2, r1
 8003886:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2280      	movs	r2, #128	; 0x80
 8003898:	2120      	movs	r1, #32
 800389a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2274      	movs	r2, #116	; 0x74
 80038a0:	2100      	movs	r1, #0
 80038a2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e00f      	b.n	80038c8 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	4013      	ands	r3, r2
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	425a      	negs	r2, r3
 80038b8:	4153      	adcs	r3, r2
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	001a      	movs	r2, r3
 80038be:	1dfb      	adds	r3, r7, #7
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d091      	beq.n	80037ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b004      	add	sp, #16
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	fffffe5f 	.word	0xfffffe5f

080038d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4912      	ldr	r1, [pc, #72]	; (8003930 <UART_EndRxTransfer+0x5c>)
 80038e8:	400a      	ands	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2101      	movs	r1, #1
 80038f8:	438a      	bics	r2, r1
 80038fa:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003900:	2b01      	cmp	r3, #1
 8003902:	d107      	bne.n	8003914 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2110      	movs	r1, #16
 8003910:	438a      	bics	r2, r1
 8003912:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b002      	add	sp, #8
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	fffffedf 	.word	0xfffffedf

08003934 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	225a      	movs	r2, #90	; 0x5a
 8003946:	2100      	movs	r1, #0
 8003948:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2252      	movs	r2, #82	; 0x52
 800394e:	2100      	movs	r1, #0
 8003950:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	0018      	movs	r0, r3
 8003956:	f7ff fb71 	bl	800303c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	46bd      	mov	sp, r7
 800395e:	b004      	add	sp, #16
 8003960:	bd80      	pop	{r7, pc}

08003962 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2140      	movs	r1, #64	; 0x40
 8003976:	438a      	bics	r2, r1
 8003978:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	0018      	movs	r0, r3
 800398a:	f7ff fb4f 	bl	800302c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	46bd      	mov	sp, r7
 8003992:	b002      	add	sp, #8
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b002      	add	sp, #8
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80039a6:	b580      	push	{r7, lr}
 80039a8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039b6:	f3ef 8305 	mrs	r3, IPSR
 80039ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80039bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c2:	f3ef 8310 	mrs	r3, PRIMASK
 80039c6:	607b      	str	r3, [r7, #4]
  return(result);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d007      	beq.n	80039de <osKernelInitialize+0x2e>
 80039ce:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <osKernelInitialize+0x54>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d103      	bne.n	80039de <osKernelInitialize+0x2e>
    stat = osErrorISR;
 80039d6:	2306      	movs	r3, #6
 80039d8:	425b      	negs	r3, r3
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	e00c      	b.n	80039f8 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <osKernelInitialize+0x54>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d105      	bne.n	80039f2 <osKernelInitialize+0x42>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <osKernelInitialize+0x54>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	e002      	b.n	80039f8 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 80039f2:	2301      	movs	r3, #1
 80039f4:	425b      	negs	r3, r3
 80039f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80039f8:	68fb      	ldr	r3, [r7, #12]
}
 80039fa:	0018      	movs	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b004      	add	sp, #16
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	2000003c 	.word	0x2000003c

08003a08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a0e:	f3ef 8305 	mrs	r3, IPSR
 8003a12:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1e:	607b      	str	r3, [r7, #4]
  return(result);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <osKernelStart+0x2e>
 8003a26:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <osKernelStart+0x5c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d103      	bne.n	8003a36 <osKernelStart+0x2e>
    stat = osErrorISR;
 8003a2e:	2306      	movs	r3, #6
 8003a30:	425b      	negs	r3, r3
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e010      	b.n	8003a58 <osKernelStart+0x50>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <osKernelStart+0x5c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d109      	bne.n	8003a52 <osKernelStart+0x4a>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a3e:	f7ff ffb2 	bl	80039a6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <osKernelStart+0x5c>)
 8003a44:	2202      	movs	r2, #2
 8003a46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a48:	f000 ff86 	bl	8004958 <vTaskStartScheduler>
      stat = osOK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	e002      	b.n	8003a58 <osKernelStart+0x50>
    } else {
      stat = osError;
 8003a52:	2301      	movs	r3, #1
 8003a54:	425b      	negs	r3, r3
 8003a56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003a58:	68fb      	ldr	r3, [r7, #12]
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b004      	add	sp, #16
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	2000003c 	.word	0x2000003c

08003a68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a68:	b5b0      	push	{r4, r5, r7, lr}
 8003a6a:	b090      	sub	sp, #64	; 0x40
 8003a6c:	af04      	add	r7, sp, #16
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a78:	f3ef 8305 	mrs	r3, IPSR
 8003a7c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a7e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d000      	beq.n	8003a86 <osThreadNew+0x1e>
 8003a84:	e08c      	b.n	8003ba0 <osThreadNew+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a86:	f3ef 8310 	mrs	r3, PRIMASK
 8003a8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d004      	beq.n	8003a9c <osThreadNew+0x34>
 8003a92:	4b46      	ldr	r3, [pc, #280]	; (8003bac <osThreadNew+0x144>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d100      	bne.n	8003a9c <osThreadNew+0x34>
 8003a9a:	e081      	b.n	8003ba0 <osThreadNew+0x138>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d100      	bne.n	8003aa4 <osThreadNew+0x3c>
 8003aa2:	e07d      	b.n	8003ba0 <osThreadNew+0x138>
    stack = configMINIMAL_STACK_SIZE;
 8003aa4:	2380      	movs	r3, #128	; 0x80
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003aa8:	2318      	movs	r3, #24
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	425b      	negs	r3, r3
 8003ab4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d044      	beq.n	8003b46 <osThreadNew+0xde>
      if (attr->name != NULL) {
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <osThreadNew+0x62>
        name = attr->name;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <osThreadNew+0x70>
        prio = (UBaseType_t)attr->priority;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <osThreadNew+0x86>
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	2b38      	cmp	r3, #56	; 0x38
 8003ae2:	d804      	bhi.n	8003aee <osThreadNew+0x86>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	4013      	ands	r3, r2
 8003aec:	d001      	beq.n	8003af2 <osThreadNew+0x8a>
        return (NULL);
 8003aee:	2300      	movs	r3, #0
 8003af0:	e057      	b.n	8003ba2 <osThreadNew+0x13a>
      }

      if (attr->stack_size > 0U) {
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <osThreadNew+0x9a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00e      	beq.n	8003b28 <osThreadNew+0xc0>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2b5b      	cmp	r3, #91	; 0x5b
 8003b10:	d90a      	bls.n	8003b28 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d006      	beq.n	8003b28 <osThreadNew+0xc0>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <osThreadNew+0xc0>
        mem = 1;
 8003b22:	2301      	movs	r3, #1
 8003b24:	623b      	str	r3, [r7, #32]
 8003b26:	e010      	b.n	8003b4a <osThreadNew+0xe2>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10c      	bne.n	8003b4a <osThreadNew+0xe2>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d108      	bne.n	8003b4a <osThreadNew+0xe2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d104      	bne.n	8003b4a <osThreadNew+0xe2>
          mem = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	623b      	str	r3, [r7, #32]
 8003b44:	e001      	b.n	8003b4a <osThreadNew+0xe2>
        }
      }
    }
    else {
      mem = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d112      	bne.n	8003b76 <osThreadNew+0x10e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b58:	68bd      	ldr	r5, [r7, #8]
 8003b5a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003b5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	9302      	str	r3, [sp, #8]
 8003b62:	9201      	str	r2, [sp, #4]
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	002b      	movs	r3, r5
 8003b6a:	0022      	movs	r2, r4
 8003b6c:	f000 fd4b 	bl	8004606 <xTaskCreateStatic>
 8003b70:	0003      	movs	r3, r0
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	e014      	b.n	8003ba0 <osThreadNew+0x138>
    }
    else {
      if (mem == 0) {
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d111      	bne.n	8003ba0 <osThreadNew+0x138>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68bc      	ldr	r4, [r7, #8]
 8003b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	2314      	movs	r3, #20
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	0023      	movs	r3, r4
 8003b92:	f000 fd7c 	bl	800468e <xTaskCreate>
 8003b96:	0003      	movs	r3, r0
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d001      	beq.n	8003ba0 <osThreadNew+0x138>
          hTask = NULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ba0:	697b      	ldr	r3, [r7, #20]
}
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b00c      	add	sp, #48	; 0x30
 8003ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	2000003c 	.word	0x2000003c

08003bb0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bb8:	f3ef 8305 	mrs	r3, IPSR
 8003bbc:	613b      	str	r3, [r7, #16]
  return(result);
 8003bbe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d007      	beq.n	8003be0 <osDelay+0x30>
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <osDelay+0x4c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d103      	bne.n	8003be0 <osDelay+0x30>
    stat = osErrorISR;
 8003bd8:	2306      	movs	r3, #6
 8003bda:	425b      	negs	r3, r3
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	e008      	b.n	8003bf2 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <osDelay+0x42>
      vTaskDelay(ticks);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f000 fe8d 	bl	800490c <vTaskDelay>
    }
  }

  return (stat);
 8003bf2:	697b      	ldr	r3, [r7, #20]
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b006      	add	sp, #24
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	2000003c 	.word	0x2000003c

08003c00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a06      	ldr	r2, [pc, #24]	; (8003c28 <vApplicationGetIdleTaskMemory+0x28>)
 8003c10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4a05      	ldr	r2, [pc, #20]	; (8003c2c <vApplicationGetIdleTaskMemory+0x2c>)
 8003c16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2280      	movs	r2, #128	; 0x80
 8003c1c:	601a      	str	r2, [r3, #0]
}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b004      	add	sp, #16
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	20000040 	.word	0x20000040
 8003c2c:	2000009c 	.word	0x2000009c

08003c30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4a06      	ldr	r2, [pc, #24]	; (8003c58 <vApplicationGetTimerTaskMemory+0x28>)
 8003c40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4a05      	ldr	r2, [pc, #20]	; (8003c5c <vApplicationGetTimerTaskMemory+0x2c>)
 8003c46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2280      	movs	r2, #128	; 0x80
 8003c4c:	0052      	lsls	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
}
 8003c50:	46c0      	nop			; (mov r8, r8)
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b004      	add	sp, #16
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	2000029c 	.word	0x2000029c
 8003c5c:	200002f8 	.word	0x200002f8

08003c60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	001a      	movs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	4252      	negs	r2, r2
 8003c78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	001a      	movs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3308      	adds	r3, #8
 8003c88:	001a      	movs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c94:	46c0      	nop			; (mov r8, r8)
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b002      	add	sp, #8
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b002      	add	sp, #8
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	601a      	str	r2, [r3, #0]
}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b004      	add	sp, #16
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	d103      	bne.n	8003d14 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	e00c      	b.n	8003d2e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3308      	adds	r3, #8
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	e002      	b.n	8003d22 <vListInsert+0x2c>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d2f6      	bcs.n	8003d1c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	601a      	str	r2, [r3, #0]
}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b004      	add	sp, #16
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6892      	ldr	r2, [r2, #8]
 8003d78:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6852      	ldr	r2, [r2, #4]
 8003d82:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d103      	bne.n	8003d96 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	1e5a      	subs	r2, r3, #1
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
}
 8003daa:	0018      	movs	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b004      	add	sp, #16
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <xQueueGenericReset+0x18>
 8003dc6:	b672      	cpsid	i
 8003dc8:	e7fe      	b.n	8003dc8 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003dca:	f001 fe11 	bl	80059f0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	434b      	muls	r3, r1
 8003ddc:	18d2      	adds	r2, r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	1e59      	subs	r1, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	434b      	muls	r3, r1
 8003e00:	18d2      	adds	r2, r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2244      	movs	r2, #68	; 0x44
 8003e0a:	21ff      	movs	r1, #255	; 0xff
 8003e0c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2245      	movs	r2, #69	; 0x45
 8003e12:	21ff      	movs	r1, #255	; 0xff
 8003e14:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10d      	bne.n	8003e38 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d013      	beq.n	8003e4c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3310      	adds	r3, #16
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f000 ffd5 	bl	8004dd8 <xTaskRemoveFromEventList>
 8003e2e:	1e03      	subs	r3, r0, #0
 8003e30:	d00c      	beq.n	8003e4c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e32:	f001 fdcd 	bl	80059d0 <vPortYield>
 8003e36:	e009      	b.n	8003e4c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3310      	adds	r3, #16
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f7ff ff0f 	bl	8003c60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3324      	adds	r3, #36	; 0x24
 8003e46:	0018      	movs	r0, r3
 8003e48:	f7ff ff0a 	bl	8003c60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e4c:	f001 fde2 	bl	8005a14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e50:	2301      	movs	r3, #1
}
 8003e52:	0018      	movs	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b004      	add	sp, #16
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e5a:	b590      	push	{r4, r7, lr}
 8003e5c:	b089      	sub	sp, #36	; 0x24
 8003e5e:	af02      	add	r7, sp, #8
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <xQueueGenericCreateStatic+0x18>
 8003e6e:	b672      	cpsid	i
 8003e70:	e7fe      	b.n	8003e70 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <xQueueGenericCreateStatic+0x22>
 8003e78:	b672      	cpsid	i
 8003e7a:	e7fe      	b.n	8003e7a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <xQueueGenericCreateStatic+0x2e>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <xQueueGenericCreateStatic+0x32>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <xQueueGenericCreateStatic+0x34>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <xQueueGenericCreateStatic+0x3c>
 8003e92:	b672      	cpsid	i
 8003e94:	e7fe      	b.n	8003e94 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <xQueueGenericCreateStatic+0x48>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <xQueueGenericCreateStatic+0x4c>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <xQueueGenericCreateStatic+0x4e>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <xQueueGenericCreateStatic+0x56>
 8003eac:	b672      	cpsid	i
 8003eae:	e7fe      	b.n	8003eae <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003eb0:	2350      	movs	r3, #80	; 0x50
 8003eb2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b50      	cmp	r3, #80	; 0x50
 8003eb8:	d001      	beq.n	8003ebe <xQueueGenericCreateStatic+0x64>
 8003eba:	b672      	cpsid	i
 8003ebc:	e7fe      	b.n	8003ebc <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003ebe:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00e      	beq.n	8003ee8 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2246      	movs	r2, #70	; 0x46
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ed2:	2328      	movs	r3, #40	; 0x28
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	781c      	ldrb	r4, [r3, #0]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	0023      	movs	r3, r4
 8003ee4:	f000 f805 	bl	8003ef2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ee8:	697b      	ldr	r3, [r7, #20]
	}
 8003eea:	0018      	movs	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b007      	add	sp, #28
 8003ef0:	bd90      	pop	{r4, r7, pc}

08003ef2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	001a      	movs	r2, r3
 8003f00:	1cfb      	adds	r3, r7, #3
 8003f02:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	e002      	b.n	8003f18 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2101      	movs	r1, #1
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f7ff ff42 	bl	8003db2 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	1cfa      	adds	r2, r7, #3
 8003f32:	214c      	movs	r1, #76	; 0x4c
 8003f34:	7812      	ldrb	r2, [r2, #0]
 8003f36:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f38:	46c0      	nop			; (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b004      	add	sp, #16
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	; 0x28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <xQueueGenericSend+0x20>
 8003f5c:	b672      	cpsid	i
 8003f5e:	e7fe      	b.n	8003f5e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d103      	bne.n	8003f6e <xQueueGenericSend+0x2e>
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <xQueueGenericSend+0x32>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <xQueueGenericSend+0x34>
 8003f72:	2300      	movs	r3, #0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <xQueueGenericSend+0x3c>
 8003f78:	b672      	cpsid	i
 8003f7a:	e7fe      	b.n	8003f7a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d103      	bne.n	8003f8a <xQueueGenericSend+0x4a>
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <xQueueGenericSend+0x4e>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <xQueueGenericSend+0x50>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <xQueueGenericSend+0x58>
 8003f94:	b672      	cpsid	i
 8003f96:	e7fe      	b.n	8003f96 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f98:	f001 f8b0 	bl	80050fc <xTaskGetSchedulerState>
 8003f9c:	1e03      	subs	r3, r0, #0
 8003f9e:	d102      	bne.n	8003fa6 <xQueueGenericSend+0x66>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <xQueueGenericSend+0x6a>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <xQueueGenericSend+0x6c>
 8003faa:	2300      	movs	r3, #0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <xQueueGenericSend+0x74>
 8003fb0:	b672      	cpsid	i
 8003fb2:	e7fe      	b.n	8003fb2 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fb4:	f001 fd1c 	bl	80059f0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d302      	bcc.n	8003fca <xQueueGenericSend+0x8a>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d11e      	bne.n	8004008 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f000 f99f 	bl	8004314 <prvCopyDataToQueue>
 8003fd6:	0003      	movs	r3, r0
 8003fd8:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	3324      	adds	r3, #36	; 0x24
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f000 fef6 	bl	8004dd8 <xTaskRemoveFromEventList>
 8003fec:	1e03      	subs	r3, r0, #0
 8003fee:	d007      	beq.n	8004000 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ff0:	f001 fcee 	bl	80059d0 <vPortYield>
 8003ff4:	e004      	b.n	8004000 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ffc:	f001 fce8 	bl	80059d0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004000:	f001 fd08 	bl	8005a14 <vPortExitCritical>
				return pdPASS;
 8004004:	2301      	movs	r3, #1
 8004006:	e05b      	b.n	80040c0 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800400e:	f001 fd01 	bl	8005a14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004012:	2300      	movs	r3, #0
 8004014:	e054      	b.n	80040c0 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	2b00      	cmp	r3, #0
 800401a:	d106      	bne.n	800402a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800401c:	2314      	movs	r3, #20
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	0018      	movs	r0, r3
 8004022:	f000 ff35 	bl	8004e90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004026:	2301      	movs	r3, #1
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800402a:	f001 fcf3 	bl	8005a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800402e:	f000 fce7 	bl	8004a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004032:	f001 fcdd 	bl	80059f0 <vPortEnterCritical>
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	2244      	movs	r2, #68	; 0x44
 800403a:	5c9b      	ldrb	r3, [r3, r2]
 800403c:	b25b      	sxtb	r3, r3
 800403e:	3301      	adds	r3, #1
 8004040:	d103      	bne.n	800404a <xQueueGenericSend+0x10a>
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	2244      	movs	r2, #68	; 0x44
 8004046:	2100      	movs	r1, #0
 8004048:	5499      	strb	r1, [r3, r2]
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	2245      	movs	r2, #69	; 0x45
 800404e:	5c9b      	ldrb	r3, [r3, r2]
 8004050:	b25b      	sxtb	r3, r3
 8004052:	3301      	adds	r3, #1
 8004054:	d103      	bne.n	800405e <xQueueGenericSend+0x11e>
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	2245      	movs	r2, #69	; 0x45
 800405a:	2100      	movs	r1, #0
 800405c:	5499      	strb	r1, [r3, r2]
 800405e:	f001 fcd9 	bl	8005a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004062:	1d3a      	adds	r2, r7, #4
 8004064:	2314      	movs	r3, #20
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	0011      	movs	r1, r2
 800406a:	0018      	movs	r0, r3
 800406c:	f000 ff24 	bl	8004eb8 <xTaskCheckForTimeOut>
 8004070:	1e03      	subs	r3, r0, #0
 8004072:	d11e      	bne.n	80040b2 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	0018      	movs	r0, r3
 8004078:	f000 fa51 	bl	800451e <prvIsQueueFull>
 800407c:	1e03      	subs	r3, r0, #0
 800407e:	d011      	beq.n	80040a4 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	3310      	adds	r3, #16
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	0011      	movs	r1, r2
 8004088:	0018      	movs	r0, r3
 800408a:	f000 fe61 	bl	8004d50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	0018      	movs	r0, r3
 8004092:	f000 f9d0 	bl	8004436 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004096:	f000 fcbf 	bl	8004a18 <xTaskResumeAll>
 800409a:	1e03      	subs	r3, r0, #0
 800409c:	d18a      	bne.n	8003fb4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800409e:	f001 fc97 	bl	80059d0 <vPortYield>
 80040a2:	e787      	b.n	8003fb4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 f9c5 	bl	8004436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040ac:	f000 fcb4 	bl	8004a18 <xTaskResumeAll>
 80040b0:	e780      	b.n	8003fb4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	0018      	movs	r0, r3
 80040b6:	f000 f9be 	bl	8004436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040ba:	f000 fcad 	bl	8004a18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80040c0:	0018      	movs	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b00a      	add	sp, #40	; 0x28
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80040c8:	b590      	push	{r4, r7, lr}
 80040ca:	b089      	sub	sp, #36	; 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <xQueueGenericSendFromISR+0x1c>
 80040e0:	b672      	cpsid	i
 80040e2:	e7fe      	b.n	80040e2 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d103      	bne.n	80040f2 <xQueueGenericSendFromISR+0x2a>
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <xQueueGenericSendFromISR+0x2e>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <xQueueGenericSendFromISR+0x30>
 80040f6:	2300      	movs	r3, #0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <xQueueGenericSendFromISR+0x38>
 80040fc:	b672      	cpsid	i
 80040fe:	e7fe      	b.n	80040fe <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d103      	bne.n	800410e <xQueueGenericSendFromISR+0x46>
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <xQueueGenericSendFromISR+0x4a>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <xQueueGenericSendFromISR+0x4c>
 8004112:	2300      	movs	r3, #0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <xQueueGenericSendFromISR+0x54>
 8004118:	b672      	cpsid	i
 800411a:	e7fe      	b.n	800411a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800411c:	f001 fc92 	bl	8005a44 <ulSetInterruptMaskFromISR>
 8004120:	0003      	movs	r3, r0
 8004122:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412c:	429a      	cmp	r2, r3
 800412e:	d302      	bcc.n	8004136 <xQueueGenericSendFromISR+0x6e>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d12e      	bne.n	8004194 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004136:	2413      	movs	r4, #19
 8004138:	193b      	adds	r3, r7, r4
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	2145      	movs	r1, #69	; 0x45
 800413e:	5c52      	ldrb	r2, [r2, r1]
 8004140:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	0018      	movs	r0, r3
 800414a:	f000 f8e3 	bl	8004314 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800414e:	193b      	adds	r3, r7, r4
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	b25b      	sxtb	r3, r3
 8004154:	3301      	adds	r3, #1
 8004156:	d111      	bne.n	800417c <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	2b00      	cmp	r3, #0
 800415e:	d016      	beq.n	800418e <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	3324      	adds	r3, #36	; 0x24
 8004164:	0018      	movs	r0, r3
 8004166:	f000 fe37 	bl	8004dd8 <xTaskRemoveFromEventList>
 800416a:	1e03      	subs	r3, r0, #0
 800416c:	d00f      	beq.n	800418e <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00c      	beq.n	800418e <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e008      	b.n	800418e <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800417c:	2313      	movs	r3, #19
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	3301      	adds	r3, #1
 8004184:	b2db      	uxtb	r3, r3
 8004186:	b259      	sxtb	r1, r3
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	2245      	movs	r2, #69	; 0x45
 800418c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800418e:	2301      	movs	r3, #1
 8004190:	61fb      	str	r3, [r7, #28]
		{
 8004192:	e001      	b.n	8004198 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004194:	2300      	movs	r3, #0
 8004196:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	0018      	movs	r0, r3
 800419c:	f001 fc58 	bl	8005a50 <vClearInterruptMaskFromISR>

	return xReturn;
 80041a0:	69fb      	ldr	r3, [r7, #28]
}
 80041a2:	0018      	movs	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b009      	add	sp, #36	; 0x24
 80041a8:	bd90      	pop	{r4, r7, pc}

080041aa <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b08a      	sub	sp, #40	; 0x28
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80041b6:	2300      	movs	r3, #0
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <xQueueReceive+0x1e>
 80041c4:	b672      	cpsid	i
 80041c6:	e7fe      	b.n	80041c6 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <xQueueReceive+0x2c>
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <xQueueReceive+0x30>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <xQueueReceive+0x32>
 80041da:	2300      	movs	r3, #0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <xQueueReceive+0x3a>
 80041e0:	b672      	cpsid	i
 80041e2:	e7fe      	b.n	80041e2 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041e4:	f000 ff8a 	bl	80050fc <xTaskGetSchedulerState>
 80041e8:	1e03      	subs	r3, r0, #0
 80041ea:	d102      	bne.n	80041f2 <xQueueReceive+0x48>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <xQueueReceive+0x4c>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <xQueueReceive+0x4e>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <xQueueReceive+0x56>
 80041fc:	b672      	cpsid	i
 80041fe:	e7fe      	b.n	80041fe <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004200:	f001 fbf6 	bl	80059f0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d01a      	beq.n	8004246 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	0011      	movs	r1, r2
 8004216:	0018      	movs	r0, r3
 8004218:	f000 f8e7 	bl	80043ea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	1e5a      	subs	r2, r3, #1
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	3310      	adds	r3, #16
 8004230:	0018      	movs	r0, r3
 8004232:	f000 fdd1 	bl	8004dd8 <xTaskRemoveFromEventList>
 8004236:	1e03      	subs	r3, r0, #0
 8004238:	d001      	beq.n	800423e <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800423a:	f001 fbc9 	bl	80059d0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800423e:	f001 fbe9 	bl	8005a14 <vPortExitCritical>
				return pdPASS;
 8004242:	2301      	movs	r3, #1
 8004244:	e062      	b.n	800430c <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d103      	bne.n	8004254 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800424c:	f001 fbe2 	bl	8005a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004250:	2300      	movs	r3, #0
 8004252:	e05b      	b.n	800430c <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800425a:	2314      	movs	r3, #20
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	0018      	movs	r0, r3
 8004260:	f000 fe16 	bl	8004e90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004264:	2301      	movs	r3, #1
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004268:	f001 fbd4 	bl	8005a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800426c:	f000 fbc8 	bl	8004a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004270:	f001 fbbe 	bl	80059f0 <vPortEnterCritical>
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	2244      	movs	r2, #68	; 0x44
 8004278:	5c9b      	ldrb	r3, [r3, r2]
 800427a:	b25b      	sxtb	r3, r3
 800427c:	3301      	adds	r3, #1
 800427e:	d103      	bne.n	8004288 <xQueueReceive+0xde>
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	2244      	movs	r2, #68	; 0x44
 8004284:	2100      	movs	r1, #0
 8004286:	5499      	strb	r1, [r3, r2]
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	2245      	movs	r2, #69	; 0x45
 800428c:	5c9b      	ldrb	r3, [r3, r2]
 800428e:	b25b      	sxtb	r3, r3
 8004290:	3301      	adds	r3, #1
 8004292:	d103      	bne.n	800429c <xQueueReceive+0xf2>
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	2245      	movs	r2, #69	; 0x45
 8004298:	2100      	movs	r1, #0
 800429a:	5499      	strb	r1, [r3, r2]
 800429c:	f001 fbba 	bl	8005a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042a0:	1d3a      	adds	r2, r7, #4
 80042a2:	2314      	movs	r3, #20
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	0011      	movs	r1, r2
 80042a8:	0018      	movs	r0, r3
 80042aa:	f000 fe05 	bl	8004eb8 <xTaskCheckForTimeOut>
 80042ae:	1e03      	subs	r3, r0, #0
 80042b0:	d11e      	bne.n	80042f0 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	0018      	movs	r0, r3
 80042b6:	f000 f91c 	bl	80044f2 <prvIsQueueEmpty>
 80042ba:	1e03      	subs	r3, r0, #0
 80042bc:	d011      	beq.n	80042e2 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	3324      	adds	r3, #36	; 0x24
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	0011      	movs	r1, r2
 80042c6:	0018      	movs	r0, r3
 80042c8:	f000 fd42 	bl	8004d50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	0018      	movs	r0, r3
 80042d0:	f000 f8b1 	bl	8004436 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042d4:	f000 fba0 	bl	8004a18 <xTaskResumeAll>
 80042d8:	1e03      	subs	r3, r0, #0
 80042da:	d191      	bne.n	8004200 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80042dc:	f001 fb78 	bl	80059d0 <vPortYield>
 80042e0:	e78e      	b.n	8004200 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	0018      	movs	r0, r3
 80042e6:	f000 f8a6 	bl	8004436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042ea:	f000 fb95 	bl	8004a18 <xTaskResumeAll>
 80042ee:	e787      	b.n	8004200 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	0018      	movs	r0, r3
 80042f4:	f000 f89f 	bl	8004436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042f8:	f000 fb8e 	bl	8004a18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	0018      	movs	r0, r3
 8004300:	f000 f8f7 	bl	80044f2 <prvIsQueueEmpty>
 8004304:	1e03      	subs	r3, r0, #0
 8004306:	d100      	bne.n	800430a <xQueueReceive+0x160>
 8004308:	e77a      	b.n	8004200 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800430a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800430c:	0018      	movs	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	b00a      	add	sp, #40	; 0x28
 8004312:	bd80      	pop	{r7, pc}

08004314 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10e      	bne.n	8004350 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d14e      	bne.n	80043d8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	0018      	movs	r0, r3
 8004340:	f000 fef8 	bl	8005134 <xTaskPriorityDisinherit>
 8004344:	0003      	movs	r3, r0
 8004346:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	609a      	str	r2, [r3, #8]
 800434e:	e043      	b.n	80043d8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d119      	bne.n	800438a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6858      	ldr	r0, [r3, #4]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	0019      	movs	r1, r3
 8004362:	f001 fda7 	bl	8005eb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	18d2      	adds	r2, r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	429a      	cmp	r2, r3
 800437e:	d32b      	bcc.n	80043d8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	605a      	str	r2, [r3, #4]
 8004388:	e026      	b.n	80043d8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	68d8      	ldr	r0, [r3, #12]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	0019      	movs	r1, r3
 8004396:	f001 fd8d 	bl	8005eb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	425b      	negs	r3, r3
 80043a4:	18d2      	adds	r2, r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d207      	bcs.n	80043c6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	425b      	negs	r3, r3
 80043c0:	18d2      	adds	r2, r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d105      	bne.n	80043d8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80043e0:	697b      	ldr	r3, [r7, #20]
}
 80043e2:	0018      	movs	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b006      	add	sp, #24
 80043e8:	bd80      	pop	{r7, pc}

080043ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d018      	beq.n	800442e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	18d2      	adds	r2, r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	429a      	cmp	r2, r3
 8004414:	d303      	bcc.n	800441e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68d9      	ldr	r1, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	0018      	movs	r0, r3
 800442a:	f001 fd43 	bl	8005eb4 <memcpy>
	}
}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	46bd      	mov	sp, r7
 8004432:	b002      	add	sp, #8
 8004434:	bd80      	pop	{r7, pc}

08004436 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800443e:	f001 fad7 	bl	80059f0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004442:	230f      	movs	r3, #15
 8004444:	18fb      	adds	r3, r7, r3
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	2145      	movs	r1, #69	; 0x45
 800444a:	5c52      	ldrb	r2, [r2, r1]
 800444c:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800444e:	e013      	b.n	8004478 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	2b00      	cmp	r3, #0
 8004456:	d016      	beq.n	8004486 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3324      	adds	r3, #36	; 0x24
 800445c:	0018      	movs	r0, r3
 800445e:	f000 fcbb 	bl	8004dd8 <xTaskRemoveFromEventList>
 8004462:	1e03      	subs	r3, r0, #0
 8004464:	d001      	beq.n	800446a <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004466:	f000 fd77 	bl	8004f58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800446a:	210f      	movs	r1, #15
 800446c:	187b      	adds	r3, r7, r1
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	3b01      	subs	r3, #1
 8004472:	b2da      	uxtb	r2, r3
 8004474:	187b      	adds	r3, r7, r1
 8004476:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004478:	230f      	movs	r3, #15
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	b25b      	sxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	dce5      	bgt.n	8004450 <prvUnlockQueue+0x1a>
 8004484:	e000      	b.n	8004488 <prvUnlockQueue+0x52>
					break;
 8004486:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2245      	movs	r2, #69	; 0x45
 800448c:	21ff      	movs	r1, #255	; 0xff
 800448e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004490:	f001 fac0 	bl	8005a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004494:	f001 faac 	bl	80059f0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004498:	230e      	movs	r3, #14
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	2144      	movs	r1, #68	; 0x44
 80044a0:	5c52      	ldrb	r2, [r2, r1]
 80044a2:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044a4:	e013      	b.n	80044ce <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d016      	beq.n	80044dc <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3310      	adds	r3, #16
 80044b2:	0018      	movs	r0, r3
 80044b4:	f000 fc90 	bl	8004dd8 <xTaskRemoveFromEventList>
 80044b8:	1e03      	subs	r3, r0, #0
 80044ba:	d001      	beq.n	80044c0 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80044bc:	f000 fd4c 	bl	8004f58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80044c0:	210e      	movs	r1, #14
 80044c2:	187b      	adds	r3, r7, r1
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	187b      	adds	r3, r7, r1
 80044cc:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044ce:	230e      	movs	r3, #14
 80044d0:	18fb      	adds	r3, r7, r3
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	b25b      	sxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	dce5      	bgt.n	80044a6 <prvUnlockQueue+0x70>
 80044da:	e000      	b.n	80044de <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80044dc:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2244      	movs	r2, #68	; 0x44
 80044e2:	21ff      	movs	r1, #255	; 0xff
 80044e4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80044e6:	f001 fa95 	bl	8005a14 <vPortExitCritical>
}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b004      	add	sp, #16
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044fa:	f001 fa79 	bl	80059f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	2b00      	cmp	r3, #0
 8004504:	d102      	bne.n	800450c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004506:	2301      	movs	r3, #1
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	e001      	b.n	8004510 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004510:	f001 fa80 	bl	8005a14 <vPortExitCritical>

	return xReturn;
 8004514:	68fb      	ldr	r3, [r7, #12]
}
 8004516:	0018      	movs	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	b004      	add	sp, #16
 800451c:	bd80      	pop	{r7, pc}

0800451e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004526:	f001 fa63 	bl	80059f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004532:	429a      	cmp	r2, r3
 8004534:	d102      	bne.n	800453c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004536:	2301      	movs	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	e001      	b.n	8004540 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800453c:	2300      	movs	r3, #0
 800453e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004540:	f001 fa68 	bl	8005a14 <vPortExitCritical>

	return xReturn;
 8004544:	68fb      	ldr	r3, [r7, #12]
}
 8004546:	0018      	movs	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	b004      	add	sp, #16
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	e015      	b.n	800458c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004560:	4b0e      	ldr	r3, [pc, #56]	; (800459c <vQueueAddToRegistry+0x4c>)
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	00d2      	lsls	r2, r2, #3
 8004566:	58d3      	ldr	r3, [r2, r3]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10c      	bne.n	8004586 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800456c:	4b0b      	ldr	r3, [pc, #44]	; (800459c <vQueueAddToRegistry+0x4c>)
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	00d2      	lsls	r2, r2, #3
 8004572:	6839      	ldr	r1, [r7, #0]
 8004574:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004576:	4a09      	ldr	r2, [pc, #36]	; (800459c <vQueueAddToRegistry+0x4c>)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	18d3      	adds	r3, r2, r3
 800457e:	3304      	adds	r3, #4
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004584:	e006      	b.n	8004594 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3301      	adds	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b07      	cmp	r3, #7
 8004590:	d9e6      	bls.n	8004560 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	46c0      	nop			; (mov r8, r8)
 8004596:	46bd      	mov	sp, r7
 8004598:	b004      	add	sp, #16
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20001a44 	.word	0x20001a44

080045a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80045b0:	f001 fa1e 	bl	80059f0 <vPortEnterCritical>
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2244      	movs	r2, #68	; 0x44
 80045b8:	5c9b      	ldrb	r3, [r3, r2]
 80045ba:	b25b      	sxtb	r3, r3
 80045bc:	3301      	adds	r3, #1
 80045be:	d103      	bne.n	80045c8 <vQueueWaitForMessageRestricted+0x28>
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2244      	movs	r2, #68	; 0x44
 80045c4:	2100      	movs	r1, #0
 80045c6:	5499      	strb	r1, [r3, r2]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2245      	movs	r2, #69	; 0x45
 80045cc:	5c9b      	ldrb	r3, [r3, r2]
 80045ce:	b25b      	sxtb	r3, r3
 80045d0:	3301      	adds	r3, #1
 80045d2:	d103      	bne.n	80045dc <vQueueWaitForMessageRestricted+0x3c>
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2245      	movs	r2, #69	; 0x45
 80045d8:	2100      	movs	r1, #0
 80045da:	5499      	strb	r1, [r3, r2]
 80045dc:	f001 fa1a 	bl	8005a14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	3324      	adds	r3, #36	; 0x24
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f000 fbcb 	bl	8004d8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7ff ff1c 	bl	8004436 <prvUnlockQueue>
	}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	46bd      	mov	sp, r7
 8004602:	b006      	add	sp, #24
 8004604:	bd80      	pop	{r7, pc}

08004606 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004606:	b590      	push	{r4, r7, lr}
 8004608:	b08d      	sub	sp, #52	; 0x34
 800460a:	af04      	add	r7, sp, #16
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <xTaskCreateStatic+0x18>
 800461a:	b672      	cpsid	i
 800461c:	e7fe      	b.n	800461c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <xTaskCreateStatic+0x22>
 8004624:	b672      	cpsid	i
 8004626:	e7fe      	b.n	8004626 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004628:	235c      	movs	r3, #92	; 0x5c
 800462a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	2b5c      	cmp	r3, #92	; 0x5c
 8004630:	d001      	beq.n	8004636 <xTaskCreateStatic+0x30>
 8004632:	b672      	cpsid	i
 8004634:	e7fe      	b.n	8004634 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004636:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463a:	2b00      	cmp	r3, #0
 800463c:	d020      	beq.n	8004680 <xTaskCreateStatic+0x7a>
 800463e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01d      	beq.n	8004680 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004646:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800464c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	2259      	movs	r2, #89	; 0x59
 8004652:	2102      	movs	r1, #2
 8004654:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004656:	683c      	ldr	r4, [r7, #0]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	2300      	movs	r3, #0
 8004660:	9303      	str	r3, [sp, #12]
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	9302      	str	r3, [sp, #8]
 8004666:	2318      	movs	r3, #24
 8004668:	18fb      	adds	r3, r7, r3
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	0023      	movs	r3, r4
 8004672:	f000 f859 	bl	8004728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	0018      	movs	r0, r3
 800467a:	f000 f8df 	bl	800483c <prvAddNewTaskToReadyList>
 800467e:	e001      	b.n	8004684 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8004680:	2300      	movs	r3, #0
 8004682:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004684:	69bb      	ldr	r3, [r7, #24]
	}
 8004686:	0018      	movs	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	b009      	add	sp, #36	; 0x24
 800468c:	bd90      	pop	{r4, r7, pc}

0800468e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800468e:	b590      	push	{r4, r7, lr}
 8004690:	b08d      	sub	sp, #52	; 0x34
 8004692:	af04      	add	r7, sp, #16
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	603b      	str	r3, [r7, #0]
 800469a:	1dbb      	adds	r3, r7, #6
 800469c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800469e:	1dbb      	adds	r3, r7, #6
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	0018      	movs	r0, r3
 80046a6:	f001 fa3b 	bl	8005b20 <pvPortMalloc>
 80046aa:	0003      	movs	r3, r0
 80046ac:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d010      	beq.n	80046d6 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046b4:	205c      	movs	r0, #92	; 0x5c
 80046b6:	f001 fa33 	bl	8005b20 <pvPortMalloc>
 80046ba:	0003      	movs	r3, r0
 80046bc:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
 80046ca:	e006      	b.n	80046da <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	0018      	movs	r0, r3
 80046d0:	f001 facc 	bl	8005c6c <vPortFree>
 80046d4:	e001      	b.n	80046da <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01a      	beq.n	8004716 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	2259      	movs	r2, #89	; 0x59
 80046e4:	2100      	movs	r1, #0
 80046e6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046e8:	1dbb      	adds	r3, r7, #6
 80046ea:	881a      	ldrh	r2, [r3, #0]
 80046ec:	683c      	ldr	r4, [r7, #0]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	2300      	movs	r3, #0
 80046f4:	9303      	str	r3, [sp, #12]
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	9302      	str	r3, [sp, #8]
 80046fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	0023      	movs	r3, r4
 8004704:	f000 f810 	bl	8004728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	0018      	movs	r0, r3
 800470c:	f000 f896 	bl	800483c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004710:	2301      	movs	r3, #1
 8004712:	61bb      	str	r3, [r7, #24]
 8004714:	e002      	b.n	800471c <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004716:	2301      	movs	r3, #1
 8004718:	425b      	negs	r3, r3
 800471a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800471c:	69bb      	ldr	r3, [r7, #24]
	}
 800471e:	0018      	movs	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	b009      	add	sp, #36	; 0x24
 8004724:	bd90      	pop	{r4, r7, pc}
	...

08004728 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004738:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	001a      	movs	r2, r3
 8004740:	21a5      	movs	r1, #165	; 0xa5
 8004742:	f001 fbc0 	bl	8005ec6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	493a      	ldr	r1, [pc, #232]	; (8004838 <prvInitialiseNewTask+0x110>)
 800474e:	468c      	mov	ip, r1
 8004750:	4463      	add	r3, ip
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	18d3      	adds	r3, r2, r3
 8004756:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2207      	movs	r2, #7
 800475c:	4393      	bics	r3, r2
 800475e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	2207      	movs	r2, #7
 8004764:	4013      	ands	r3, r2
 8004766:	d001      	beq.n	800476c <prvInitialiseNewTask+0x44>
 8004768:	b672      	cpsid	i
 800476a:	e7fe      	b.n	800476a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d020      	beq.n	80047b4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	e013      	b.n	80047a0 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	18d3      	adds	r3, r2, r3
 800477e:	7818      	ldrb	r0, [r3, #0]
 8004780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004782:	2134      	movs	r1, #52	; 0x34
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	18d3      	adds	r3, r2, r3
 8004788:	185b      	adds	r3, r3, r1
 800478a:	1c02      	adds	r2, r0, #0
 800478c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	18d3      	adds	r3, r2, r3
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d006      	beq.n	80047a8 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	3301      	adds	r3, #1
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2b0f      	cmp	r3, #15
 80047a4:	d9e8      	bls.n	8004778 <prvInitialiseNewTask+0x50>
 80047a6:	e000      	b.n	80047aa <prvInitialiseNewTask+0x82>
			{
				break;
 80047a8:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	2243      	movs	r2, #67	; 0x43
 80047ae:	2100      	movs	r1, #0
 80047b0:	5499      	strb	r1, [r3, r2]
 80047b2:	e003      	b.n	80047bc <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	2234      	movs	r2, #52	; 0x34
 80047b8:	2100      	movs	r1, #0
 80047ba:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	2b37      	cmp	r3, #55	; 0x37
 80047c0:	d901      	bls.n	80047c6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047c2:	2337      	movs	r3, #55	; 0x37
 80047c4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	6a3a      	ldr	r2, [r7, #32]
 80047ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ce:	6a3a      	ldr	r2, [r7, #32]
 80047d0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	2200      	movs	r2, #0
 80047d6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	3304      	adds	r3, #4
 80047dc:	0018      	movs	r0, r3
 80047de:	f7ff fa5d 	bl	8003c9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	3318      	adds	r3, #24
 80047e6:	0018      	movs	r0, r3
 80047e8:	f7ff fa58 	bl	8003c9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	2238      	movs	r2, #56	; 0x38
 80047f6:	1ad2      	subs	r2, r2, r3
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004800:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	2200      	movs	r2, #0
 8004806:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480a:	2258      	movs	r2, #88	; 0x58
 800480c:	2100      	movs	r1, #0
 800480e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	68f9      	ldr	r1, [r7, #12]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	0018      	movs	r0, r3
 8004818:	f001 f84e 	bl	80058b8 <pxPortInitialiseStack>
 800481c:	0002      	movs	r2, r0
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800482c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	46bd      	mov	sp, r7
 8004832:	b006      	add	sp, #24
 8004834:	bd80      	pop	{r7, pc}
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	3fffffff 	.word	0x3fffffff

0800483c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004844:	f001 f8d4 	bl	80059f0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004848:	4b2a      	ldr	r3, [pc, #168]	; (80048f4 <prvAddNewTaskToReadyList+0xb8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <prvAddNewTaskToReadyList+0xb8>)
 8004850:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004852:	4b29      	ldr	r3, [pc, #164]	; (80048f8 <prvAddNewTaskToReadyList+0xbc>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800485a:	4b27      	ldr	r3, [pc, #156]	; (80048f8 <prvAddNewTaskToReadyList+0xbc>)
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004860:	4b24      	ldr	r3, [pc, #144]	; (80048f4 <prvAddNewTaskToReadyList+0xb8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d110      	bne.n	800488a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004868:	f000 fb90 	bl	8004f8c <prvInitialiseTaskLists>
 800486c:	e00d      	b.n	800488a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800486e:	4b23      	ldr	r3, [pc, #140]	; (80048fc <prvAddNewTaskToReadyList+0xc0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004876:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <prvAddNewTaskToReadyList+0xbc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	429a      	cmp	r2, r3
 8004882:	d802      	bhi.n	800488a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004884:	4b1c      	ldr	r3, [pc, #112]	; (80048f8 <prvAddNewTaskToReadyList+0xbc>)
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800488a:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <prvAddNewTaskToReadyList+0xc4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <prvAddNewTaskToReadyList+0xc4>)
 8004892:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004894:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <prvAddNewTaskToReadyList+0xc4>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a0:	4b18      	ldr	r3, [pc, #96]	; (8004904 <prvAddNewTaskToReadyList+0xc8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d903      	bls.n	80048b0 <prvAddNewTaskToReadyList+0x74>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ac:	4b15      	ldr	r3, [pc, #84]	; (8004904 <prvAddNewTaskToReadyList+0xc8>)
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b4:	0013      	movs	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	189b      	adds	r3, r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4a12      	ldr	r2, [pc, #72]	; (8004908 <prvAddNewTaskToReadyList+0xcc>)
 80048be:	189a      	adds	r2, r3, r2
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	0019      	movs	r1, r3
 80048c6:	0010      	movs	r0, r2
 80048c8:	f7ff f9f3 	bl	8003cb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048cc:	f001 f8a2 	bl	8005a14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048d0:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <prvAddNewTaskToReadyList+0xc0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d008      	beq.n	80048ea <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048d8:	4b07      	ldr	r3, [pc, #28]	; (80048f8 <prvAddNewTaskToReadyList+0xbc>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d201      	bcs.n	80048ea <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048e6:	f001 f873 	bl	80059d0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b002      	add	sp, #8
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	20000bcc 	.word	0x20000bcc
 80048f8:	200006f8 	.word	0x200006f8
 80048fc:	20000bd8 	.word	0x20000bd8
 8004900:	20000be8 	.word	0x20000be8
 8004904:	20000bd4 	.word	0x20000bd4
 8004908:	200006fc 	.word	0x200006fc

0800490c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d010      	beq.n	8004940 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800491e:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <vTaskDelay+0x48>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <vTaskDelay+0x1e>
 8004926:	b672      	cpsid	i
 8004928:	e7fe      	b.n	8004928 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800492a:	f000 f869 	bl	8004a00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2100      	movs	r1, #0
 8004932:	0018      	movs	r0, r3
 8004934:	f000 fc5a 	bl	80051ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004938:	f000 f86e 	bl	8004a18 <xTaskResumeAll>
 800493c:	0003      	movs	r3, r0
 800493e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8004946:	f001 f843 	bl	80059d0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	46bd      	mov	sp, r7
 800494e:	b004      	add	sp, #16
 8004950:	bd80      	pop	{r7, pc}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	20000bf4 	.word	0x20000bf4

08004958 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004958:	b590      	push	{r4, r7, lr}
 800495a:	b089      	sub	sp, #36	; 0x24
 800495c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800495e:	2300      	movs	r3, #0
 8004960:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004962:	2300      	movs	r3, #0
 8004964:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004966:	003a      	movs	r2, r7
 8004968:	1d39      	adds	r1, r7, #4
 800496a:	2308      	movs	r3, #8
 800496c:	18fb      	adds	r3, r7, r3
 800496e:	0018      	movs	r0, r3
 8004970:	f7ff f946 	bl	8003c00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004974:	683c      	ldr	r4, [r7, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	491b      	ldr	r1, [pc, #108]	; (80049e8 <vTaskStartScheduler+0x90>)
 800497c:	481b      	ldr	r0, [pc, #108]	; (80049ec <vTaskStartScheduler+0x94>)
 800497e:	9202      	str	r2, [sp, #8]
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	2300      	movs	r3, #0
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	2300      	movs	r3, #0
 8004988:	0022      	movs	r2, r4
 800498a:	f7ff fe3c 	bl	8004606 <xTaskCreateStatic>
 800498e:	0002      	movs	r2, r0
 8004990:	4b17      	ldr	r3, [pc, #92]	; (80049f0 <vTaskStartScheduler+0x98>)
 8004992:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004994:	4b16      	ldr	r3, [pc, #88]	; (80049f0 <vTaskStartScheduler+0x98>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800499c:	2301      	movs	r3, #1
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	e001      	b.n	80049a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d103      	bne.n	80049b4 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80049ac:	f000 fc72 	bl	8005294 <xTimerCreateTimerTask>
 80049b0:	0003      	movs	r3, r0
 80049b2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d10d      	bne.n	80049d6 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80049ba:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049bc:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <vTaskStartScheduler+0x9c>)
 80049be:	2201      	movs	r2, #1
 80049c0:	4252      	negs	r2, r2
 80049c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049c4:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <vTaskStartScheduler+0xa0>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049ca:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <vTaskStartScheduler+0xa4>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049d0:	f000 ffda 	bl	8005988 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049d4:	e004      	b.n	80049e0 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3301      	adds	r3, #1
 80049da:	d101      	bne.n	80049e0 <vTaskStartScheduler+0x88>
 80049dc:	b672      	cpsid	i
 80049de:	e7fe      	b.n	80049de <vTaskStartScheduler+0x86>
}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b005      	add	sp, #20
 80049e6:	bd90      	pop	{r4, r7, pc}
 80049e8:	08005efc 	.word	0x08005efc
 80049ec:	08004f6d 	.word	0x08004f6d
 80049f0:	20000bf0 	.word	0x20000bf0
 80049f4:	20000bec 	.word	0x20000bec
 80049f8:	20000bd8 	.word	0x20000bd8
 80049fc:	20000bd0 	.word	0x20000bd0

08004a00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a04:	4b03      	ldr	r3, [pc, #12]	; (8004a14 <vTaskSuspendAll+0x14>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	4b02      	ldr	r3, [pc, #8]	; (8004a14 <vTaskSuspendAll+0x14>)
 8004a0c:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000bf4 	.word	0x20000bf4

08004a18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a26:	4b3a      	ldr	r3, [pc, #232]	; (8004b10 <xTaskResumeAll+0xf8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <xTaskResumeAll+0x1a>
 8004a2e:	b672      	cpsid	i
 8004a30:	e7fe      	b.n	8004a30 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a32:	f000 ffdd 	bl	80059f0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a36:	4b36      	ldr	r3, [pc, #216]	; (8004b10 <xTaskResumeAll+0xf8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	1e5a      	subs	r2, r3, #1
 8004a3c:	4b34      	ldr	r3, [pc, #208]	; (8004b10 <xTaskResumeAll+0xf8>)
 8004a3e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a40:	4b33      	ldr	r3, [pc, #204]	; (8004b10 <xTaskResumeAll+0xf8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d15b      	bne.n	8004b00 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a48:	4b32      	ldr	r3, [pc, #200]	; (8004b14 <xTaskResumeAll+0xfc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d057      	beq.n	8004b00 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a50:	e02f      	b.n	8004ab2 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a52:	4b31      	ldr	r3, [pc, #196]	; (8004b18 <xTaskResumeAll+0x100>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3318      	adds	r3, #24
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f7ff f97f 	bl	8003d62 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3304      	adds	r3, #4
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f7ff f97a 	bl	8003d62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a72:	4b2a      	ldr	r3, [pc, #168]	; (8004b1c <xTaskResumeAll+0x104>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d903      	bls.n	8004a82 <xTaskResumeAll+0x6a>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7e:	4b27      	ldr	r3, [pc, #156]	; (8004b1c <xTaskResumeAll+0x104>)
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a86:	0013      	movs	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	189b      	adds	r3, r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4a24      	ldr	r2, [pc, #144]	; (8004b20 <xTaskResumeAll+0x108>)
 8004a90:	189a      	adds	r2, r3, r2
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3304      	adds	r3, #4
 8004a96:	0019      	movs	r1, r3
 8004a98:	0010      	movs	r0, r2
 8004a9a:	f7ff f90a 	bl	8003cb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa2:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <xTaskResumeAll+0x10c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d302      	bcc.n	8004ab2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004aac:	4b1e      	ldr	r3, [pc, #120]	; (8004b28 <xTaskResumeAll+0x110>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ab2:	4b19      	ldr	r3, [pc, #100]	; (8004b18 <xTaskResumeAll+0x100>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1cb      	bne.n	8004a52 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ac0:	f000 fafe 	bl	80050c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ac4:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <xTaskResumeAll+0x114>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00f      	beq.n	8004af0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ad0:	f000 f83c 	bl	8004b4c <xTaskIncrementTick>
 8004ad4:	1e03      	subs	r3, r0, #0
 8004ad6:	d002      	beq.n	8004ade <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004ad8:	4b13      	ldr	r3, [pc, #76]	; (8004b28 <xTaskResumeAll+0x110>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f2      	bne.n	8004ad0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8004aea:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <xTaskResumeAll+0x114>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004af0:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <xTaskResumeAll+0x110>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004af8:	2301      	movs	r3, #1
 8004afa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004afc:	f000 ff68 	bl	80059d0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b00:	f000 ff88 	bl	8005a14 <vPortExitCritical>

	return xAlreadyYielded;
 8004b04:	68bb      	ldr	r3, [r7, #8]
}
 8004b06:	0018      	movs	r0, r3
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	b004      	add	sp, #16
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	20000bf4 	.word	0x20000bf4
 8004b14:	20000bcc 	.word	0x20000bcc
 8004b18:	20000b8c 	.word	0x20000b8c
 8004b1c:	20000bd4 	.word	0x20000bd4
 8004b20:	200006fc 	.word	0x200006fc
 8004b24:	200006f8 	.word	0x200006f8
 8004b28:	20000be0 	.word	0x20000be0
 8004b2c:	20000bdc 	.word	0x20000bdc

08004b30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b36:	4b04      	ldr	r3, [pc, #16]	; (8004b48 <xTaskGetTickCount+0x18>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b3c:	687b      	ldr	r3, [r7, #4]
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b002      	add	sp, #8
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	20000bd0 	.word	0x20000bd0

08004b4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b56:	4b4a      	ldr	r3, [pc, #296]	; (8004c80 <xTaskIncrementTick+0x134>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d000      	beq.n	8004b60 <xTaskIncrementTick+0x14>
 8004b5e:	e07e      	b.n	8004c5e <xTaskIncrementTick+0x112>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b60:	4b48      	ldr	r3, [pc, #288]	; (8004c84 <xTaskIncrementTick+0x138>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3301      	adds	r3, #1
 8004b66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b68:	4b46      	ldr	r3, [pc, #280]	; (8004c84 <xTaskIncrementTick+0x138>)
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d117      	bne.n	8004ba4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b74:	4b44      	ldr	r3, [pc, #272]	; (8004c88 <xTaskIncrementTick+0x13c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <xTaskIncrementTick+0x36>
 8004b7e:	b672      	cpsid	i
 8004b80:	e7fe      	b.n	8004b80 <xTaskIncrementTick+0x34>
 8004b82:	4b41      	ldr	r3, [pc, #260]	; (8004c88 <xTaskIncrementTick+0x13c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	4b40      	ldr	r3, [pc, #256]	; (8004c8c <xTaskIncrementTick+0x140>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b3e      	ldr	r3, [pc, #248]	; (8004c88 <xTaskIncrementTick+0x13c>)
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	4b3e      	ldr	r3, [pc, #248]	; (8004c8c <xTaskIncrementTick+0x140>)
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	4b3e      	ldr	r3, [pc, #248]	; (8004c90 <xTaskIncrementTick+0x144>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	4b3c      	ldr	r3, [pc, #240]	; (8004c90 <xTaskIncrementTick+0x144>)
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	f000 fa8e 	bl	80050c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	; (8004c94 <xTaskIncrementTick+0x148>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d349      	bcc.n	8004c42 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bae:	4b36      	ldr	r3, [pc, #216]	; (8004c88 <xTaskIncrementTick+0x13c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d104      	bne.n	8004bc2 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bb8:	4b36      	ldr	r3, [pc, #216]	; (8004c94 <xTaskIncrementTick+0x148>)
 8004bba:	2201      	movs	r2, #1
 8004bbc:	4252      	negs	r2, r2
 8004bbe:	601a      	str	r2, [r3, #0]
					break;
 8004bc0:	e03f      	b.n	8004c42 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bc2:	4b31      	ldr	r3, [pc, #196]	; (8004c88 <xTaskIncrementTick+0x13c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d203      	bcs.n	8004be2 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004bda:	4b2e      	ldr	r3, [pc, #184]	; (8004c94 <xTaskIncrementTick+0x148>)
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004be0:	e02f      	b.n	8004c42 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	3304      	adds	r3, #4
 8004be6:	0018      	movs	r0, r3
 8004be8:	f7ff f8bb 	bl	8003d62 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d004      	beq.n	8004bfe <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	3318      	adds	r3, #24
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f7ff f8b2 	bl	8003d62 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c02:	4b25      	ldr	r3, [pc, #148]	; (8004c98 <xTaskIncrementTick+0x14c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d903      	bls.n	8004c12 <xTaskIncrementTick+0xc6>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0e:	4b22      	ldr	r3, [pc, #136]	; (8004c98 <xTaskIncrementTick+0x14c>)
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c16:	0013      	movs	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	189b      	adds	r3, r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4a1f      	ldr	r2, [pc, #124]	; (8004c9c <xTaskIncrementTick+0x150>)
 8004c20:	189a      	adds	r2, r3, r2
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	3304      	adds	r3, #4
 8004c26:	0019      	movs	r1, r3
 8004c28:	0010      	movs	r0, r2
 8004c2a:	f7ff f842 	bl	8003cb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c32:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <xTaskIncrementTick+0x154>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d3b8      	bcc.n	8004bae <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c40:	e7b5      	b.n	8004bae <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c42:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <xTaskIncrementTick+0x154>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c48:	4914      	ldr	r1, [pc, #80]	; (8004c9c <xTaskIncrementTick+0x150>)
 8004c4a:	0013      	movs	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	189b      	adds	r3, r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	585b      	ldr	r3, [r3, r1]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d907      	bls.n	8004c68 <xTaskIncrementTick+0x11c>
			{
				xSwitchRequired = pdTRUE;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	e004      	b.n	8004c68 <xTaskIncrementTick+0x11c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004c5e:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <xTaskIncrementTick+0x158>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <xTaskIncrementTick+0x158>)
 8004c66:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004c68:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <xTaskIncrementTick+0x15c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <xTaskIncrementTick+0x128>
		{
			xSwitchRequired = pdTRUE;
 8004c70:	2301      	movs	r3, #1
 8004c72:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004c74:	697b      	ldr	r3, [r7, #20]
}
 8004c76:	0018      	movs	r0, r3
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b006      	add	sp, #24
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	20000bf4 	.word	0x20000bf4
 8004c84:	20000bd0 	.word	0x20000bd0
 8004c88:	20000b84 	.word	0x20000b84
 8004c8c:	20000b88 	.word	0x20000b88
 8004c90:	20000be4 	.word	0x20000be4
 8004c94:	20000bec 	.word	0x20000bec
 8004c98:	20000bd4 	.word	0x20000bd4
 8004c9c:	200006fc 	.word	0x200006fc
 8004ca0:	200006f8 	.word	0x200006f8
 8004ca4:	20000bdc 	.word	0x20000bdc
 8004ca8:	20000be0 	.word	0x20000be0

08004cac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cb2:	4b22      	ldr	r3, [pc, #136]	; (8004d3c <vTaskSwitchContext+0x90>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cba:	4b21      	ldr	r3, [pc, #132]	; (8004d40 <vTaskSwitchContext+0x94>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004cc0:	e037      	b.n	8004d32 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004cc2:	4b1f      	ldr	r3, [pc, #124]	; (8004d40 <vTaskSwitchContext+0x94>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cc8:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <vTaskSwitchContext+0x98>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	607b      	str	r3, [r7, #4]
 8004cce:	e007      	b.n	8004ce0 <vTaskSwitchContext+0x34>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <vTaskSwitchContext+0x2e>
 8004cd6:	b672      	cpsid	i
 8004cd8:	e7fe      	b.n	8004cd8 <vTaskSwitchContext+0x2c>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	607b      	str	r3, [r7, #4]
 8004ce0:	4919      	ldr	r1, [pc, #100]	; (8004d48 <vTaskSwitchContext+0x9c>)
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	0013      	movs	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	189b      	adds	r3, r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	585b      	ldr	r3, [r3, r1]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0ee      	beq.n	8004cd0 <vTaskSwitchContext+0x24>
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	0013      	movs	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	189b      	adds	r3, r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4a12      	ldr	r2, [pc, #72]	; (8004d48 <vTaskSwitchContext+0x9c>)
 8004cfe:	189b      	adds	r3, r3, r2
 8004d00:	603b      	str	r3, [r7, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	605a      	str	r2, [r3, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	3308      	adds	r3, #8
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d104      	bne.n	8004d22 <vTaskSwitchContext+0x76>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	605a      	str	r2, [r3, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <vTaskSwitchContext+0xa0>)
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <vTaskSwitchContext+0x98>)
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	601a      	str	r2, [r3, #0]
}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b002      	add	sp, #8
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	20000bf4 	.word	0x20000bf4
 8004d40:	20000be0 	.word	0x20000be0
 8004d44:	20000bd4 	.word	0x20000bd4
 8004d48:	200006fc 	.word	0x200006fc
 8004d4c:	200006f8 	.word	0x200006f8

08004d50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <vTaskPlaceOnEventList+0x14>
 8004d60:	b672      	cpsid	i
 8004d62:	e7fe      	b.n	8004d62 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d64:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <vTaskPlaceOnEventList+0x38>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3318      	adds	r3, #24
 8004d6a:	001a      	movs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	0011      	movs	r1, r2
 8004d70:	0018      	movs	r0, r3
 8004d72:	f7fe ffc0 	bl	8003cf6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2101      	movs	r1, #1
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f000 fa36 	bl	80051ec <prvAddCurrentTaskToDelayedList>
}
 8004d80:	46c0      	nop			; (mov r8, r8)
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b002      	add	sp, #8
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	200006f8 	.word	0x200006f8

08004d8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <vTaskPlaceOnEventListRestricted+0x16>
 8004d9e:	b672      	cpsid	i
 8004da0:	e7fe      	b.n	8004da0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004da2:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <vTaskPlaceOnEventListRestricted+0x48>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3318      	adds	r3, #24
 8004da8:	001a      	movs	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	0011      	movs	r1, r2
 8004dae:	0018      	movs	r0, r3
 8004db0:	f7fe ff7f 	bl	8003cb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	425b      	negs	r3, r3
 8004dbe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	0011      	movs	r1, r2
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f000 fa10 	bl	80051ec <prvAddCurrentTaskToDelayedList>
	}
 8004dcc:	46c0      	nop			; (mov r8, r8)
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b004      	add	sp, #16
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	200006f8 	.word	0x200006f8

08004dd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <xTaskRemoveFromEventList+0x1a>
 8004dee:	b672      	cpsid	i
 8004df0:	e7fe      	b.n	8004df0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	3318      	adds	r3, #24
 8004df6:	0018      	movs	r0, r3
 8004df8:	f7fe ffb3 	bl	8003d62 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dfc:	4b1e      	ldr	r3, [pc, #120]	; (8004e78 <xTaskRemoveFromEventList+0xa0>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d11d      	bne.n	8004e40 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	3304      	adds	r3, #4
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f7fe ffaa 	bl	8003d62 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e12:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <xTaskRemoveFromEventList+0xa4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d903      	bls.n	8004e22 <xTaskRemoveFromEventList+0x4a>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1e:	4b17      	ldr	r3, [pc, #92]	; (8004e7c <xTaskRemoveFromEventList+0xa4>)
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e26:	0013      	movs	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	189b      	adds	r3, r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4a14      	ldr	r2, [pc, #80]	; (8004e80 <xTaskRemoveFromEventList+0xa8>)
 8004e30:	189a      	adds	r2, r3, r2
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	3304      	adds	r3, #4
 8004e36:	0019      	movs	r1, r3
 8004e38:	0010      	movs	r0, r2
 8004e3a:	f7fe ff3a 	bl	8003cb2 <vListInsertEnd>
 8004e3e:	e007      	b.n	8004e50 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	3318      	adds	r3, #24
 8004e44:	001a      	movs	r2, r3
 8004e46:	4b0f      	ldr	r3, [pc, #60]	; (8004e84 <xTaskRemoveFromEventList+0xac>)
 8004e48:	0011      	movs	r1, r2
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	f7fe ff31 	bl	8003cb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e54:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <xTaskRemoveFromEventList+0xb0>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d905      	bls.n	8004e6a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <xTaskRemoveFromEventList+0xb4>)
 8004e64:	2201      	movs	r2, #1
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	e001      	b.n	8004e6e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
}
 8004e70:	0018      	movs	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	b004      	add	sp, #16
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	20000bf4 	.word	0x20000bf4
 8004e7c:	20000bd4 	.word	0x20000bd4
 8004e80:	200006fc 	.word	0x200006fc
 8004e84:	20000b8c 	.word	0x20000b8c
 8004e88:	200006f8 	.word	0x200006f8
 8004e8c:	20000be0 	.word	0x20000be0

08004e90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e98:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <vTaskInternalSetTimeOutState+0x20>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ea0:	4b04      	ldr	r3, [pc, #16]	; (8004eb4 <vTaskInternalSetTimeOutState+0x24>)
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	605a      	str	r2, [r3, #4]
}
 8004ea8:	46c0      	nop			; (mov r8, r8)
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b002      	add	sp, #8
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20000be4 	.word	0x20000be4
 8004eb4:	20000bd0 	.word	0x20000bd0

08004eb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <xTaskCheckForTimeOut+0x14>
 8004ec8:	b672      	cpsid	i
 8004eca:	e7fe      	b.n	8004eca <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <xTaskCheckForTimeOut+0x1e>
 8004ed2:	b672      	cpsid	i
 8004ed4:	e7fe      	b.n	8004ed4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004ed6:	f000 fd8b 	bl	80059f0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004eda:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <xTaskCheckForTimeOut+0x98>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	d102      	bne.n	8004ef8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	e024      	b.n	8004f42 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	4b15      	ldr	r3, [pc, #84]	; (8004f54 <xTaskCheckForTimeOut+0x9c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d007      	beq.n	8004f14 <xTaskCheckForTimeOut+0x5c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d302      	bcc.n	8004f14 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	e016      	b.n	8004f42 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d20c      	bcs.n	8004f38 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1ad2      	subs	r2, r2, r3
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	f7ff ffaf 	bl	8004e90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	e004      	b.n	8004f42 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004f42:	f000 fd67 	bl	8005a14 <vPortExitCritical>

	return xReturn;
 8004f46:	697b      	ldr	r3, [r7, #20]
}
 8004f48:	0018      	movs	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b006      	add	sp, #24
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20000bd0 	.word	0x20000bd0
 8004f54:	20000be4 	.word	0x20000be4

08004f58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f5c:	4b02      	ldr	r3, [pc, #8]	; (8004f68 <vTaskMissedYield+0x10>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
}
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	20000be0 	.word	0x20000be0

08004f6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f74:	f000 f84e 	bl	8005014 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f78:	4b03      	ldr	r3, [pc, #12]	; (8004f88 <prvIdleTask+0x1c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d9f9      	bls.n	8004f74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f80:	f000 fd26 	bl	80059d0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004f84:	e7f6      	b.n	8004f74 <prvIdleTask+0x8>
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	200006fc 	.word	0x200006fc

08004f8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f92:	2300      	movs	r3, #0
 8004f94:	607b      	str	r3, [r7, #4]
 8004f96:	e00c      	b.n	8004fb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	0013      	movs	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	189b      	adds	r3, r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4a14      	ldr	r2, [pc, #80]	; (8004ff4 <prvInitialiseTaskLists+0x68>)
 8004fa4:	189b      	adds	r3, r3, r2
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f7fe fe5a 	bl	8003c60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	607b      	str	r3, [r7, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b37      	cmp	r3, #55	; 0x37
 8004fb6:	d9ef      	bls.n	8004f98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004fb8:	4b0f      	ldr	r3, [pc, #60]	; (8004ff8 <prvInitialiseTaskLists+0x6c>)
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f7fe fe50 	bl	8003c60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004fc0:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <prvInitialiseTaskLists+0x70>)
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f7fe fe4c 	bl	8003c60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004fc8:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <prvInitialiseTaskLists+0x74>)
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f7fe fe48 	bl	8003c60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004fd0:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <prvInitialiseTaskLists+0x78>)
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f7fe fe44 	bl	8003c60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <prvInitialiseTaskLists+0x7c>)
 8004fda:	0018      	movs	r0, r3
 8004fdc:	f7fe fe40 	bl	8003c60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	; (800500c <prvInitialiseTaskLists+0x80>)
 8004fe2:	4a05      	ldr	r2, [pc, #20]	; (8004ff8 <prvInitialiseTaskLists+0x6c>)
 8004fe4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004fe6:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <prvInitialiseTaskLists+0x84>)
 8004fe8:	4a04      	ldr	r2, [pc, #16]	; (8004ffc <prvInitialiseTaskLists+0x70>)
 8004fea:	601a      	str	r2, [r3, #0]
}
 8004fec:	46c0      	nop			; (mov r8, r8)
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	b002      	add	sp, #8
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	200006fc 	.word	0x200006fc
 8004ff8:	20000b5c 	.word	0x20000b5c
 8004ffc:	20000b70 	.word	0x20000b70
 8005000:	20000b8c 	.word	0x20000b8c
 8005004:	20000ba0 	.word	0x20000ba0
 8005008:	20000bb8 	.word	0x20000bb8
 800500c:	20000b84 	.word	0x20000b84
 8005010:	20000b88 	.word	0x20000b88

08005014 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800501a:	e01a      	b.n	8005052 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800501c:	f000 fce8 	bl	80059f0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005020:	4b10      	ldr	r3, [pc, #64]	; (8005064 <prvCheckTasksWaitingTermination+0x50>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3304      	adds	r3, #4
 800502c:	0018      	movs	r0, r3
 800502e:	f7fe fe98 	bl	8003d62 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005032:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <prvCheckTasksWaitingTermination+0x54>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	1e5a      	subs	r2, r3, #1
 8005038:	4b0b      	ldr	r3, [pc, #44]	; (8005068 <prvCheckTasksWaitingTermination+0x54>)
 800503a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <prvCheckTasksWaitingTermination+0x58>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	1e5a      	subs	r2, r3, #1
 8005042:	4b0a      	ldr	r3, [pc, #40]	; (800506c <prvCheckTasksWaitingTermination+0x58>)
 8005044:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005046:	f000 fce5 	bl	8005a14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	0018      	movs	r0, r3
 800504e:	f000 f80f 	bl	8005070 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005052:	4b06      	ldr	r3, [pc, #24]	; (800506c <prvCheckTasksWaitingTermination+0x58>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e0      	bne.n	800501c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	46c0      	nop			; (mov r8, r8)
 800505e:	46bd      	mov	sp, r7
 8005060:	b002      	add	sp, #8
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20000ba0 	.word	0x20000ba0
 8005068:	20000bcc 	.word	0x20000bcc
 800506c:	20000bb4 	.word	0x20000bb4

08005070 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2259      	movs	r2, #89	; 0x59
 800507c:	5c9b      	ldrb	r3, [r3, r2]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d109      	bne.n	8005096 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	0018      	movs	r0, r3
 8005088:	f000 fdf0 	bl	8005c6c <vPortFree>
				vPortFree( pxTCB );
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	0018      	movs	r0, r3
 8005090:	f000 fdec 	bl	8005c6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005094:	e010      	b.n	80050b8 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2259      	movs	r2, #89	; 0x59
 800509a:	5c9b      	ldrb	r3, [r3, r2]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d104      	bne.n	80050aa <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	0018      	movs	r0, r3
 80050a4:	f000 fde2 	bl	8005c6c <vPortFree>
	}
 80050a8:	e006      	b.n	80050b8 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2259      	movs	r2, #89	; 0x59
 80050ae:	5c9b      	ldrb	r3, [r3, r2]
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d001      	beq.n	80050b8 <prvDeleteTCB+0x48>
 80050b4:	b672      	cpsid	i
 80050b6:	e7fe      	b.n	80050b6 <prvDeleteTCB+0x46>
	}
 80050b8:	46c0      	nop			; (mov r8, r8)
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b002      	add	sp, #8
 80050be:	bd80      	pop	{r7, pc}

080050c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050c6:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <prvResetNextTaskUnblockTime+0x34>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d104      	bne.n	80050da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80050d0:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <prvResetNextTaskUnblockTime+0x38>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	4252      	negs	r2, r2
 80050d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050d8:	e008      	b.n	80050ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050da:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <prvResetNextTaskUnblockTime+0x34>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	4b03      	ldr	r3, [pc, #12]	; (80050f8 <prvResetNextTaskUnblockTime+0x38>)
 80050ea:	601a      	str	r2, [r3, #0]
}
 80050ec:	46c0      	nop			; (mov r8, r8)
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b002      	add	sp, #8
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	20000b84 	.word	0x20000b84
 80050f8:	20000bec 	.word	0x20000bec

080050fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005102:	4b0a      	ldr	r3, [pc, #40]	; (800512c <xTaskGetSchedulerState+0x30>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d102      	bne.n	8005110 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800510a:	2301      	movs	r3, #1
 800510c:	607b      	str	r3, [r7, #4]
 800510e:	e008      	b.n	8005122 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005110:	4b07      	ldr	r3, [pc, #28]	; (8005130 <xTaskGetSchedulerState+0x34>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d102      	bne.n	800511e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005118:	2302      	movs	r3, #2
 800511a:	607b      	str	r3, [r7, #4]
 800511c:	e001      	b.n	8005122 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800511e:	2300      	movs	r3, #0
 8005120:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005122:	687b      	ldr	r3, [r7, #4]
	}
 8005124:	0018      	movs	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	b002      	add	sp, #8
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20000bd8 	.word	0x20000bd8
 8005130:	20000bf4 	.word	0x20000bf4

08005134 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d044      	beq.n	80051d4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800514a:	4b25      	ldr	r3, [pc, #148]	; (80051e0 <xTaskPriorityDisinherit+0xac>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	429a      	cmp	r2, r3
 8005152:	d001      	beq.n	8005158 <xTaskPriorityDisinherit+0x24>
 8005154:	b672      	cpsid	i
 8005156:	e7fe      	b.n	8005156 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <xTaskPriorityDisinherit+0x30>
 8005160:	b672      	cpsid	i
 8005162:	e7fe      	b.n	8005162 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005168:	1e5a      	subs	r2, r3, #1
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005176:	429a      	cmp	r2, r3
 8005178:	d02c      	beq.n	80051d4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517e:	2b00      	cmp	r3, #0
 8005180:	d128      	bne.n	80051d4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	3304      	adds	r3, #4
 8005186:	0018      	movs	r0, r3
 8005188:	f7fe fdeb 	bl	8003d62 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	2238      	movs	r2, #56	; 0x38
 800519a:	1ad2      	subs	r2, r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a4:	4b0f      	ldr	r3, [pc, #60]	; (80051e4 <xTaskPriorityDisinherit+0xb0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d903      	bls.n	80051b4 <xTaskPriorityDisinherit+0x80>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b0:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <xTaskPriorityDisinherit+0xb0>)
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b8:	0013      	movs	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	189b      	adds	r3, r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4a09      	ldr	r2, [pc, #36]	; (80051e8 <xTaskPriorityDisinherit+0xb4>)
 80051c2:	189a      	adds	r2, r3, r2
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	3304      	adds	r3, #4
 80051c8:	0019      	movs	r1, r3
 80051ca:	0010      	movs	r0, r2
 80051cc:	f7fe fd71 	bl	8003cb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80051d0:	2301      	movs	r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051d4:	68fb      	ldr	r3, [r7, #12]
	}
 80051d6:	0018      	movs	r0, r3
 80051d8:	46bd      	mov	sp, r7
 80051da:	b004      	add	sp, #16
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	200006f8 	.word	0x200006f8
 80051e4:	20000bd4 	.word	0x20000bd4
 80051e8:	200006fc 	.word	0x200006fc

080051ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051f6:	4b21      	ldr	r3, [pc, #132]	; (800527c <prvAddCurrentTaskToDelayedList+0x90>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051fc:	4b20      	ldr	r3, [pc, #128]	; (8005280 <prvAddCurrentTaskToDelayedList+0x94>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3304      	adds	r3, #4
 8005202:	0018      	movs	r0, r3
 8005204:	f7fe fdad 	bl	8003d62 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3301      	adds	r3, #1
 800520c:	d10b      	bne.n	8005226 <prvAddCurrentTaskToDelayedList+0x3a>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d008      	beq.n	8005226 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005214:	4b1a      	ldr	r3, [pc, #104]	; (8005280 <prvAddCurrentTaskToDelayedList+0x94>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	1d1a      	adds	r2, r3, #4
 800521a:	4b1a      	ldr	r3, [pc, #104]	; (8005284 <prvAddCurrentTaskToDelayedList+0x98>)
 800521c:	0011      	movs	r1, r2
 800521e:	0018      	movs	r0, r3
 8005220:	f7fe fd47 	bl	8003cb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005224:	e026      	b.n	8005274 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	18d3      	adds	r3, r2, r3
 800522c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800522e:	4b14      	ldr	r3, [pc, #80]	; (8005280 <prvAddCurrentTaskToDelayedList+0x94>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	429a      	cmp	r2, r3
 800523c:	d209      	bcs.n	8005252 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <prvAddCurrentTaskToDelayedList+0x94>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3304      	adds	r3, #4
 8005248:	0019      	movs	r1, r3
 800524a:	0010      	movs	r0, r2
 800524c:	f7fe fd53 	bl	8003cf6 <vListInsert>
}
 8005250:	e010      	b.n	8005274 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005252:	4b0e      	ldr	r3, [pc, #56]	; (800528c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <prvAddCurrentTaskToDelayedList+0x94>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3304      	adds	r3, #4
 800525c:	0019      	movs	r1, r3
 800525e:	0010      	movs	r0, r2
 8005260:	f7fe fd49 	bl	8003cf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005264:	4b0a      	ldr	r3, [pc, #40]	; (8005290 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	429a      	cmp	r2, r3
 800526c:	d202      	bcs.n	8005274 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800526e:	4b08      	ldr	r3, [pc, #32]	; (8005290 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	46c0      	nop			; (mov r8, r8)
 8005276:	46bd      	mov	sp, r7
 8005278:	b004      	add	sp, #16
 800527a:	bd80      	pop	{r7, pc}
 800527c:	20000bd0 	.word	0x20000bd0
 8005280:	200006f8 	.word	0x200006f8
 8005284:	20000bb8 	.word	0x20000bb8
 8005288:	20000b88 	.word	0x20000b88
 800528c:	20000b84 	.word	0x20000b84
 8005290:	20000bec 	.word	0x20000bec

08005294 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005294:	b590      	push	{r4, r7, lr}
 8005296:	b089      	sub	sp, #36	; 0x24
 8005298:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800529e:	f000 fac9 	bl	8005834 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80052a2:	4b17      	ldr	r3, [pc, #92]	; (8005300 <xTimerCreateTimerTask+0x6c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d020      	beq.n	80052ec <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80052b2:	003a      	movs	r2, r7
 80052b4:	1d39      	adds	r1, r7, #4
 80052b6:	2308      	movs	r3, #8
 80052b8:	18fb      	adds	r3, r7, r3
 80052ba:	0018      	movs	r0, r3
 80052bc:	f7fe fcb8 	bl	8003c30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80052c0:	683c      	ldr	r4, [r7, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	490f      	ldr	r1, [pc, #60]	; (8005304 <xTimerCreateTimerTask+0x70>)
 80052c8:	480f      	ldr	r0, [pc, #60]	; (8005308 <xTimerCreateTimerTask+0x74>)
 80052ca:	9202      	str	r2, [sp, #8]
 80052cc:	9301      	str	r3, [sp, #4]
 80052ce:	2302      	movs	r3, #2
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	2300      	movs	r3, #0
 80052d4:	0022      	movs	r2, r4
 80052d6:	f7ff f996 	bl	8004606 <xTaskCreateStatic>
 80052da:	0002      	movs	r2, r0
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <xTimerCreateTimerTask+0x78>)
 80052de:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80052e0:	4b0a      	ldr	r3, [pc, #40]	; (800530c <xTimerCreateTimerTask+0x78>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80052e8:	2301      	movs	r3, #1
 80052ea:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <xTimerCreateTimerTask+0x62>
 80052f2:	b672      	cpsid	i
 80052f4:	e7fe      	b.n	80052f4 <xTimerCreateTimerTask+0x60>
	return xReturn;
 80052f6:	68fb      	ldr	r3, [r7, #12]
}
 80052f8:	0018      	movs	r0, r3
 80052fa:	46bd      	mov	sp, r7
 80052fc:	b005      	add	sp, #20
 80052fe:	bd90      	pop	{r4, r7, pc}
 8005300:	20000c28 	.word	0x20000c28
 8005304:	08005f04 	.word	0x08005f04
 8005308:	0800542d 	.word	0x0800542d
 800530c:	20000c2c 	.word	0x20000c2c

08005310 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b08b      	sub	sp, #44	; 0x2c
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800531e:	2300      	movs	r3, #0
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <xTimerGenericCommand+0x1c>
 8005328:	b672      	cpsid	i
 800532a:	e7fe      	b.n	800532a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800532c:	4b1c      	ldr	r3, [pc, #112]	; (80053a0 <xTimerGenericCommand+0x90>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d030      	beq.n	8005396 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005334:	2414      	movs	r4, #20
 8005336:	193b      	adds	r3, r7, r4
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800533c:	193b      	adds	r3, r7, r4
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005342:	193b      	adds	r3, r7, r4
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b05      	cmp	r3, #5
 800534c:	dc19      	bgt.n	8005382 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800534e:	f7ff fed5 	bl	80050fc <xTaskGetSchedulerState>
 8005352:	0003      	movs	r3, r0
 8005354:	2b02      	cmp	r3, #2
 8005356:	d109      	bne.n	800536c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005358:	4b11      	ldr	r3, [pc, #68]	; (80053a0 <xTimerGenericCommand+0x90>)
 800535a:	6818      	ldr	r0, [r3, #0]
 800535c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800535e:	1939      	adds	r1, r7, r4
 8005360:	2300      	movs	r3, #0
 8005362:	f7fe fded 	bl	8003f40 <xQueueGenericSend>
 8005366:	0003      	movs	r3, r0
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
 800536a:	e014      	b.n	8005396 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800536c:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <xTimerGenericCommand+0x90>)
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	2314      	movs	r3, #20
 8005372:	18f9      	adds	r1, r7, r3
 8005374:	2300      	movs	r3, #0
 8005376:	2200      	movs	r2, #0
 8005378:	f7fe fde2 	bl	8003f40 <xQueueGenericSend>
 800537c:	0003      	movs	r3, r0
 800537e:	627b      	str	r3, [r7, #36]	; 0x24
 8005380:	e009      	b.n	8005396 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005382:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <xTimerGenericCommand+0x90>)
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	2314      	movs	r3, #20
 800538a:	18f9      	adds	r1, r7, r3
 800538c:	2300      	movs	r3, #0
 800538e:	f7fe fe9b 	bl	80040c8 <xQueueGenericSendFromISR>
 8005392:	0003      	movs	r3, r0
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005398:	0018      	movs	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	b00b      	add	sp, #44	; 0x2c
 800539e:	bd90      	pop	{r4, r7, pc}
 80053a0:	20000c28 	.word	0x20000c28

080053a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ae:	4b1e      	ldr	r3, [pc, #120]	; (8005428 <prvProcessExpiredTimer+0x84>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	3304      	adds	r3, #4
 80053bc:	0018      	movs	r0, r3
 80053be:	f7fe fcd0 	bl	8003d62 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2228      	movs	r2, #40	; 0x28
 80053c6:	5c9b      	ldrb	r3, [r3, r2]
 80053c8:	001a      	movs	r2, r3
 80053ca:	2304      	movs	r3, #4
 80053cc:	4013      	ands	r3, r2
 80053ce:	d019      	beq.n	8005404 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	699a      	ldr	r2, [r3, #24]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	18d1      	adds	r1, r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f8c3 	bl	8005568 <prvInsertTimerInActiveList>
 80053e2:	1e03      	subs	r3, r0, #0
 80053e4:	d017      	beq.n	8005416 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	2300      	movs	r3, #0
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	2300      	movs	r3, #0
 80053f0:	2100      	movs	r1, #0
 80053f2:	f7ff ff8d 	bl	8005310 <xTimerGenericCommand>
 80053f6:	0003      	movs	r3, r0
 80053f8:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10a      	bne.n	8005416 <prvProcessExpiredTimer+0x72>
 8005400:	b672      	cpsid	i
 8005402:	e7fe      	b.n	8005402 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2228      	movs	r2, #40	; 0x28
 8005408:	5c9b      	ldrb	r3, [r3, r2]
 800540a:	2201      	movs	r2, #1
 800540c:	4393      	bics	r3, r2
 800540e:	b2d9      	uxtb	r1, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2228      	movs	r2, #40	; 0x28
 8005414:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	0010      	movs	r0, r2
 800541e:	4798      	blx	r3
}
 8005420:	46c0      	nop			; (mov r8, r8)
 8005422:	46bd      	mov	sp, r7
 8005424:	b004      	add	sp, #16
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20000c20 	.word	0x20000c20

0800542c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005434:	2308      	movs	r3, #8
 8005436:	18fb      	adds	r3, r7, r3
 8005438:	0018      	movs	r0, r3
 800543a:	f000 f853 	bl	80054e4 <prvGetNextExpireTime>
 800543e:	0003      	movs	r3, r0
 8005440:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	0011      	movs	r1, r2
 8005448:	0018      	movs	r0, r3
 800544a:	f000 f803 	bl	8005454 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800544e:	f000 f8cd 	bl	80055ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005452:	e7ef      	b.n	8005434 <prvTimerTask+0x8>

08005454 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800545e:	f7ff facf 	bl	8004a00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005462:	2308      	movs	r3, #8
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	0018      	movs	r0, r3
 8005468:	f000 f85e 	bl	8005528 <prvSampleTimeNow>
 800546c:	0003      	movs	r3, r0
 800546e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d12b      	bne.n	80054ce <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10c      	bne.n	8005496 <prvProcessTimerOrBlockTask+0x42>
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	429a      	cmp	r2, r3
 8005482:	d808      	bhi.n	8005496 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8005484:	f7ff fac8 	bl	8004a18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	0011      	movs	r1, r2
 800548e:	0018      	movs	r0, r3
 8005490:	f7ff ff88 	bl	80053a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005494:	e01d      	b.n	80054d2 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800549c:	4b0f      	ldr	r3, [pc, #60]	; (80054dc <prvProcessTimerOrBlockTask+0x88>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <prvProcessTimerOrBlockTask+0x56>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e000      	b.n	80054ac <prvProcessTimerOrBlockTask+0x58>
 80054aa:	2300      	movs	r3, #0
 80054ac:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80054ae:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <prvProcessTimerOrBlockTask+0x8c>)
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	0019      	movs	r1, r3
 80054bc:	f7ff f870 	bl	80045a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80054c0:	f7ff faaa 	bl	8004a18 <xTaskResumeAll>
 80054c4:	1e03      	subs	r3, r0, #0
 80054c6:	d104      	bne.n	80054d2 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 80054c8:	f000 fa82 	bl	80059d0 <vPortYield>
}
 80054cc:	e001      	b.n	80054d2 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 80054ce:	f7ff faa3 	bl	8004a18 <xTaskResumeAll>
}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b004      	add	sp, #16
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	20000c24 	.word	0x20000c24
 80054e0:	20000c28 	.word	0x20000c28

080054e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80054ec:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <prvGetNextExpireTime+0x40>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <prvGetNextExpireTime+0x16>
 80054f6:	2201      	movs	r2, #1
 80054f8:	e000      	b.n	80054fc <prvGetNextExpireTime+0x18>
 80054fa:	2200      	movs	r2, #0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d105      	bne.n	8005514 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005508:	4b06      	ldr	r3, [pc, #24]	; (8005524 <prvGetNextExpireTime+0x40>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	e001      	b.n	8005518 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005518:	68fb      	ldr	r3, [r7, #12]
}
 800551a:	0018      	movs	r0, r3
 800551c:	46bd      	mov	sp, r7
 800551e:	b004      	add	sp, #16
 8005520:	bd80      	pop	{r7, pc}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	20000c20 	.word	0x20000c20

08005528 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005530:	f7ff fafe 	bl	8004b30 <xTaskGetTickCount>
 8005534:	0003      	movs	r3, r0
 8005536:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <prvSampleTimeNow+0x3c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	429a      	cmp	r2, r3
 8005540:	d205      	bcs.n	800554e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8005542:	f000 f919 	bl	8005778 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	e002      	b.n	8005554 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005554:	4b03      	ldr	r3, [pc, #12]	; (8005564 <prvSampleTimeNow+0x3c>)
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800555a:	68fb      	ldr	r3, [r7, #12]
}
 800555c:	0018      	movs	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	b004      	add	sp, #16
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20000c30 	.word	0x20000c30

08005568 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005576:	2300      	movs	r3, #0
 8005578:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	429a      	cmp	r2, r3
 800558c:	d812      	bhi.n	80055b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	1ad2      	subs	r2, r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	429a      	cmp	r2, r3
 800559a:	d302      	bcc.n	80055a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800559c:	2301      	movs	r3, #1
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	e01b      	b.n	80055da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80055a2:	4b10      	ldr	r3, [pc, #64]	; (80055e4 <prvInsertTimerInActiveList+0x7c>)
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3304      	adds	r3, #4
 80055aa:	0019      	movs	r1, r3
 80055ac:	0010      	movs	r0, r2
 80055ae:	f7fe fba2 	bl	8003cf6 <vListInsert>
 80055b2:	e012      	b.n	80055da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d206      	bcs.n	80055ca <prvInsertTimerInActiveList+0x62>
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d302      	bcc.n	80055ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80055c4:	2301      	movs	r3, #1
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	e007      	b.n	80055da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055ca:	4b07      	ldr	r3, [pc, #28]	; (80055e8 <prvInsertTimerInActiveList+0x80>)
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3304      	adds	r3, #4
 80055d2:	0019      	movs	r1, r3
 80055d4:	0010      	movs	r0, r2
 80055d6:	f7fe fb8e 	bl	8003cf6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80055da:	697b      	ldr	r3, [r7, #20]
}
 80055dc:	0018      	movs	r0, r3
 80055de:	46bd      	mov	sp, r7
 80055e0:	b006      	add	sp, #24
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20000c24 	.word	0x20000c24
 80055e8:	20000c20 	.word	0x20000c20

080055ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80055ec:	b590      	push	{r4, r7, lr}
 80055ee:	b08d      	sub	sp, #52	; 0x34
 80055f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055f2:	e0ac      	b.n	800574e <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80055f4:	2208      	movs	r2, #8
 80055f6:	18bb      	adds	r3, r7, r2
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	da0f      	bge.n	800561e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80055fe:	18bb      	adds	r3, r7, r2
 8005600:	3304      	adds	r3, #4
 8005602:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <prvProcessReceivedCommands+0x22>
 800560a:	b672      	cpsid	i
 800560c:	e7fe      	b.n	800560c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	6858      	ldr	r0, [r3, #4]
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	0019      	movs	r1, r3
 800561c:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800561e:	2208      	movs	r2, #8
 8005620:	18bb      	adds	r3, r7, r2
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	da00      	bge.n	800562a <prvProcessReceivedCommands+0x3e>
 8005628:	e090      	b.n	800574c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800562a:	18bb      	adds	r3, r7, r2
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d004      	beq.n	8005642 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	3304      	adds	r3, #4
 800563c:	0018      	movs	r0, r3
 800563e:	f7fe fb90 	bl	8003d62 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005642:	1d3b      	adds	r3, r7, #4
 8005644:	0018      	movs	r0, r3
 8005646:	f7ff ff6f 	bl	8005528 <prvSampleTimeNow>
 800564a:	0003      	movs	r3, r0
 800564c:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800564e:	2308      	movs	r3, #8
 8005650:	18fb      	adds	r3, r7, r3
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b09      	cmp	r3, #9
 8005656:	d900      	bls.n	800565a <prvProcessReceivedCommands+0x6e>
 8005658:	e079      	b.n	800574e <prvProcessReceivedCommands+0x162>
 800565a:	009a      	lsls	r2, r3, #2
 800565c:	4b44      	ldr	r3, [pc, #272]	; (8005770 <prvProcessReceivedCommands+0x184>)
 800565e:	18d3      	adds	r3, r2, r3
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	2228      	movs	r2, #40	; 0x28
 8005668:	5c9b      	ldrb	r3, [r3, r2]
 800566a:	2201      	movs	r2, #1
 800566c:	4313      	orrs	r3, r2
 800566e:	b2d9      	uxtb	r1, r3
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	2228      	movs	r2, #40	; 0x28
 8005674:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005676:	2408      	movs	r4, #8
 8005678:	193b      	adds	r3, r7, r4
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	18d1      	adds	r1, r2, r3
 8005682:	193b      	adds	r3, r7, r4
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	6a38      	ldr	r0, [r7, #32]
 800568a:	f7ff ff6d 	bl	8005568 <prvInsertTimerInActiveList>
 800568e:	1e03      	subs	r3, r0, #0
 8005690:	d05d      	beq.n	800574e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	6a3a      	ldr	r2, [r7, #32]
 8005698:	0010      	movs	r0, r2
 800569a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	2228      	movs	r2, #40	; 0x28
 80056a0:	5c9b      	ldrb	r3, [r3, r2]
 80056a2:	001a      	movs	r2, r3
 80056a4:	2304      	movs	r3, #4
 80056a6:	4013      	ands	r3, r2
 80056a8:	d051      	beq.n	800574e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80056aa:	193b      	adds	r3, r7, r4
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	18d2      	adds	r2, r2, r3
 80056b4:	6a38      	ldr	r0, [r7, #32]
 80056b6:	2300      	movs	r3, #0
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	2300      	movs	r3, #0
 80056bc:	2100      	movs	r1, #0
 80056be:	f7ff fe27 	bl	8005310 <xTimerGenericCommand>
 80056c2:	0003      	movs	r3, r0
 80056c4:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d140      	bne.n	800574e <prvProcessReceivedCommands+0x162>
 80056cc:	b672      	cpsid	i
 80056ce:	e7fe      	b.n	80056ce <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	2228      	movs	r2, #40	; 0x28
 80056d4:	5c9b      	ldrb	r3, [r3, r2]
 80056d6:	2201      	movs	r2, #1
 80056d8:	4393      	bics	r3, r2
 80056da:	b2d9      	uxtb	r1, r3
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	2228      	movs	r2, #40	; 0x28
 80056e0:	5499      	strb	r1, [r3, r2]
					break;
 80056e2:	e034      	b.n	800574e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	2228      	movs	r2, #40	; 0x28
 80056e8:	5c9b      	ldrb	r3, [r3, r2]
 80056ea:	2201      	movs	r2, #1
 80056ec:	4313      	orrs	r3, r2
 80056ee:	b2d9      	uxtb	r1, r3
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	2228      	movs	r2, #40	; 0x28
 80056f4:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80056f6:	2308      	movs	r3, #8
 80056f8:	18fb      	adds	r3, r7, r3
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <prvProcessReceivedCommands+0x120>
 8005708:	b672      	cpsid	i
 800570a:	e7fe      	b.n	800570a <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	699a      	ldr	r2, [r3, #24]
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	18d1      	adds	r1, r2, r3
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	69fa      	ldr	r2, [r7, #28]
 8005718:	6a38      	ldr	r0, [r7, #32]
 800571a:	f7ff ff25 	bl	8005568 <prvInsertTimerInActiveList>
					break;
 800571e:	e016      	b.n	800574e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	2228      	movs	r2, #40	; 0x28
 8005724:	5c9b      	ldrb	r3, [r3, r2]
 8005726:	001a      	movs	r2, r3
 8005728:	2302      	movs	r3, #2
 800572a:	4013      	ands	r3, r2
 800572c:	d104      	bne.n	8005738 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	0018      	movs	r0, r3
 8005732:	f000 fa9b 	bl	8005c6c <vPortFree>
 8005736:	e00a      	b.n	800574e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	2228      	movs	r2, #40	; 0x28
 800573c:	5c9b      	ldrb	r3, [r3, r2]
 800573e:	2201      	movs	r2, #1
 8005740:	4393      	bics	r3, r2
 8005742:	b2d9      	uxtb	r1, r3
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	2228      	movs	r2, #40	; 0x28
 8005748:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800574a:	e000      	b.n	800574e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800574c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800574e:	4b09      	ldr	r3, [pc, #36]	; (8005774 <prvProcessReceivedCommands+0x188>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2208      	movs	r2, #8
 8005754:	18b9      	adds	r1, r7, r2
 8005756:	2200      	movs	r2, #0
 8005758:	0018      	movs	r0, r3
 800575a:	f7fe fd26 	bl	80041aa <xQueueReceive>
 800575e:	1e03      	subs	r3, r0, #0
 8005760:	d000      	beq.n	8005764 <prvProcessReceivedCommands+0x178>
 8005762:	e747      	b.n	80055f4 <prvProcessReceivedCommands+0x8>
	}
}
 8005764:	46c0      	nop			; (mov r8, r8)
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	46bd      	mov	sp, r7
 800576a:	b00b      	add	sp, #44	; 0x2c
 800576c:	bd90      	pop	{r4, r7, pc}
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	08005fac 	.word	0x08005fac
 8005774:	20000c28 	.word	0x20000c28

08005778 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800577e:	e041      	b.n	8005804 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005780:	4b2a      	ldr	r3, [pc, #168]	; (800582c <prvSwitchTimerLists+0xb4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800578a:	4b28      	ldr	r3, [pc, #160]	; (800582c <prvSwitchTimerLists+0xb4>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3304      	adds	r3, #4
 8005798:	0018      	movs	r0, r3
 800579a:	f7fe fae2 	bl	8003d62 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	0010      	movs	r0, r2
 80057a6:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2228      	movs	r2, #40	; 0x28
 80057ac:	5c9b      	ldrb	r3, [r3, r2]
 80057ae:	001a      	movs	r2, r3
 80057b0:	2304      	movs	r3, #4
 80057b2:	4013      	ands	r3, r2
 80057b4:	d026      	beq.n	8005804 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	18d3      	adds	r3, r2, r3
 80057be:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d90e      	bls.n	80057e6 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057d4:	4b15      	ldr	r3, [pc, #84]	; (800582c <prvSwitchTimerLists+0xb4>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3304      	adds	r3, #4
 80057dc:	0019      	movs	r1, r3
 80057de:	0010      	movs	r0, r2
 80057e0:	f7fe fa89 	bl	8003cf6 <vListInsert>
 80057e4:	e00e      	b.n	8005804 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	2300      	movs	r3, #0
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	2300      	movs	r3, #0
 80057f0:	2100      	movs	r1, #0
 80057f2:	f7ff fd8d 	bl	8005310 <xTimerGenericCommand>
 80057f6:	0003      	movs	r3, r0
 80057f8:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <prvSwitchTimerLists+0x8c>
 8005800:	b672      	cpsid	i
 8005802:	e7fe      	b.n	8005802 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005804:	4b09      	ldr	r3, [pc, #36]	; (800582c <prvSwitchTimerLists+0xb4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1b8      	bne.n	8005780 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800580e:	4b07      	ldr	r3, [pc, #28]	; (800582c <prvSwitchTimerLists+0xb4>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005814:	4b06      	ldr	r3, [pc, #24]	; (8005830 <prvSwitchTimerLists+0xb8>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	4b04      	ldr	r3, [pc, #16]	; (800582c <prvSwitchTimerLists+0xb4>)
 800581a:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800581c:	4b04      	ldr	r3, [pc, #16]	; (8005830 <prvSwitchTimerLists+0xb8>)
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	601a      	str	r2, [r3, #0]
}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	46bd      	mov	sp, r7
 8005826:	b006      	add	sp, #24
 8005828:	bd80      	pop	{r7, pc}
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	20000c20 	.word	0x20000c20
 8005830:	20000c24 	.word	0x20000c24

08005834 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800583a:	f000 f8d9 	bl	80059f0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800583e:	4b16      	ldr	r3, [pc, #88]	; (8005898 <prvCheckForValidListAndQueue+0x64>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d123      	bne.n	800588e <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8005846:	4b15      	ldr	r3, [pc, #84]	; (800589c <prvCheckForValidListAndQueue+0x68>)
 8005848:	0018      	movs	r0, r3
 800584a:	f7fe fa09 	bl	8003c60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800584e:	4b14      	ldr	r3, [pc, #80]	; (80058a0 <prvCheckForValidListAndQueue+0x6c>)
 8005850:	0018      	movs	r0, r3
 8005852:	f7fe fa05 	bl	8003c60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005856:	4b13      	ldr	r3, [pc, #76]	; (80058a4 <prvCheckForValidListAndQueue+0x70>)
 8005858:	4a10      	ldr	r2, [pc, #64]	; (800589c <prvCheckForValidListAndQueue+0x68>)
 800585a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800585c:	4b12      	ldr	r3, [pc, #72]	; (80058a8 <prvCheckForValidListAndQueue+0x74>)
 800585e:	4a10      	ldr	r2, [pc, #64]	; (80058a0 <prvCheckForValidListAndQueue+0x6c>)
 8005860:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005862:	4b12      	ldr	r3, [pc, #72]	; (80058ac <prvCheckForValidListAndQueue+0x78>)
 8005864:	4a12      	ldr	r2, [pc, #72]	; (80058b0 <prvCheckForValidListAndQueue+0x7c>)
 8005866:	2100      	movs	r1, #0
 8005868:	9100      	str	r1, [sp, #0]
 800586a:	2110      	movs	r1, #16
 800586c:	200a      	movs	r0, #10
 800586e:	f7fe faf4 	bl	8003e5a <xQueueGenericCreateStatic>
 8005872:	0002      	movs	r2, r0
 8005874:	4b08      	ldr	r3, [pc, #32]	; (8005898 <prvCheckForValidListAndQueue+0x64>)
 8005876:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005878:	4b07      	ldr	r3, [pc, #28]	; (8005898 <prvCheckForValidListAndQueue+0x64>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d006      	beq.n	800588e <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005880:	4b05      	ldr	r3, [pc, #20]	; (8005898 <prvCheckForValidListAndQueue+0x64>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a0b      	ldr	r2, [pc, #44]	; (80058b4 <prvCheckForValidListAndQueue+0x80>)
 8005886:	0011      	movs	r1, r2
 8005888:	0018      	movs	r0, r3
 800588a:	f7fe fe61 	bl	8004550 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800588e:	f000 f8c1 	bl	8005a14 <vPortExitCritical>
}
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	20000c28 	.word	0x20000c28
 800589c:	20000bf8 	.word	0x20000bf8
 80058a0:	20000c0c 	.word	0x20000c0c
 80058a4:	20000c20 	.word	0x20000c20
 80058a8:	20000c24 	.word	0x20000c24
 80058ac:	20000cd4 	.word	0x20000cd4
 80058b0:	20000c34 	.word	0x20000c34
 80058b4:	08005f0c 	.word	0x08005f0c

080058b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3b04      	subs	r3, #4
 80058c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2280      	movs	r2, #128	; 0x80
 80058ce:	0452      	lsls	r2, r2, #17
 80058d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3b04      	subs	r3, #4
 80058d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3b04      	subs	r3, #4
 80058e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058e4:	4a08      	ldr	r2, [pc, #32]	; (8005908 <pxPortInitialiseStack+0x50>)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3b14      	subs	r3, #20
 80058ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3b20      	subs	r3, #32
 80058fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058fc:	68fb      	ldr	r3, [r7, #12]
}
 80058fe:	0018      	movs	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	b004      	add	sp, #16
 8005904:	bd80      	pop	{r7, pc}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	0800590d 	.word	0x0800590d

0800590c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005912:	2300      	movs	r3, #0
 8005914:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005916:	4b08      	ldr	r3, [pc, #32]	; (8005938 <prvTaskExitError+0x2c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3301      	adds	r3, #1
 800591c:	d001      	beq.n	8005922 <prvTaskExitError+0x16>
 800591e:	b672      	cpsid	i
 8005920:	e7fe      	b.n	8005920 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005922:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005924:	46c0      	nop			; (mov r8, r8)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0fc      	beq.n	8005926 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800592c:	46c0      	nop			; (mov r8, r8)
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	46bd      	mov	sp, r7
 8005932:	b002      	add	sp, #8
 8005934:	bd80      	pop	{r7, pc}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	2000001c 	.word	0x2000001c

0800593c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005940:	46c0      	nop			; (mov r8, r8)
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005950 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005950:	4a0b      	ldr	r2, [pc, #44]	; (8005980 <pxCurrentTCBConst2>)
 8005952:	6813      	ldr	r3, [r2, #0]
 8005954:	6818      	ldr	r0, [r3, #0]
 8005956:	3020      	adds	r0, #32
 8005958:	f380 8809 	msr	PSP, r0
 800595c:	2002      	movs	r0, #2
 800595e:	f380 8814 	msr	CONTROL, r0
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005968:	46ae      	mov	lr, r5
 800596a:	bc08      	pop	{r3}
 800596c:	bc04      	pop	{r2}
 800596e:	b662      	cpsie	i
 8005970:	4718      	bx	r3
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	46c0      	nop			; (mov r8, r8)
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	46c0      	nop			; (mov r8, r8)
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	46c0      	nop			; (mov r8, r8)
 800597e:	46c0      	nop			; (mov r8, r8)

08005980 <pxCurrentTCBConst2>:
 8005980:	200006f8 	.word	0x200006f8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005984:	46c0      	nop			; (mov r8, r8)
 8005986:	46c0      	nop			; (mov r8, r8)

08005988 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800598c:	4b0e      	ldr	r3, [pc, #56]	; (80059c8 <xPortStartScheduler+0x40>)
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	4b0d      	ldr	r3, [pc, #52]	; (80059c8 <xPortStartScheduler+0x40>)
 8005992:	21ff      	movs	r1, #255	; 0xff
 8005994:	0409      	lsls	r1, r1, #16
 8005996:	430a      	orrs	r2, r1
 8005998:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800599a:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <xPortStartScheduler+0x40>)
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <xPortStartScheduler+0x40>)
 80059a0:	21ff      	movs	r1, #255	; 0xff
 80059a2:	0609      	lsls	r1, r1, #24
 80059a4:	430a      	orrs	r2, r1
 80059a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80059a8:	f000 f898 	bl	8005adc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059ac:	4b07      	ldr	r3, [pc, #28]	; (80059cc <xPortStartScheduler+0x44>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80059b2:	f7ff ffcd 	bl	8005950 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059b6:	f7ff f979 	bl	8004cac <vTaskSwitchContext>
	prvTaskExitError();
 80059ba:	f7ff ffa7 	bl	800590c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	0018      	movs	r0, r3
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	e000ed20 	.word	0xe000ed20
 80059cc:	2000001c 	.word	0x2000001c

080059d0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80059d4:	4b05      	ldr	r3, [pc, #20]	; (80059ec <vPortYield+0x1c>)
 80059d6:	2280      	movs	r2, #128	; 0x80
 80059d8:	0552      	lsls	r2, r2, #21
 80059da:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80059dc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80059e0:	f3bf 8f6f 	isb	sy
}
 80059e4:	46c0      	nop			; (mov r8, r8)
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	46c0      	nop			; (mov r8, r8)
 80059ec:	e000ed04 	.word	0xe000ed04

080059f0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80059f4:	b672      	cpsid	i
    uxCriticalNesting++;
 80059f6:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <vPortEnterCritical+0x20>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	4b04      	ldr	r3, [pc, #16]	; (8005a10 <vPortEnterCritical+0x20>)
 80059fe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005a00:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005a04:	f3bf 8f6f 	isb	sy
}
 8005a08:	46c0      	nop			; (mov r8, r8)
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	46c0      	nop			; (mov r8, r8)
 8005a10:	2000001c 	.word	0x2000001c

08005a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a18:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <vPortExitCritical+0x2c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <vPortExitCritical+0x10>
 8005a20:	b672      	cpsid	i
 8005a22:	e7fe      	b.n	8005a22 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005a24:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <vPortExitCritical+0x2c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	1e5a      	subs	r2, r3, #1
 8005a2a:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <vPortExitCritical+0x2c>)
 8005a2c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005a2e:	4b04      	ldr	r3, [pc, #16]	; (8005a40 <vPortExitCritical+0x2c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d100      	bne.n	8005a38 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005a36:	b662      	cpsie	i
    }
}
 8005a38:	46c0      	nop			; (mov r8, r8)
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	2000001c 	.word	0x2000001c

08005a44 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005a44:	f3ef 8010 	mrs	r0, PRIMASK
 8005a48:	b672      	cpsid	i
 8005a4a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8005a4c:	46c0      	nop			; (mov r8, r8)
 8005a4e:	0018      	movs	r0, r3

08005a50 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005a50:	f380 8810 	msr	PRIMASK, r0
 8005a54:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005a56:	46c0      	nop			; (mov r8, r8)
	...

08005a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a60:	f3ef 8009 	mrs	r0, PSP
 8005a64:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <pxCurrentTCBConst>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	3820      	subs	r0, #32
 8005a6a:	6010      	str	r0, [r2, #0]
 8005a6c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005a6e:	4644      	mov	r4, r8
 8005a70:	464d      	mov	r5, r9
 8005a72:	4656      	mov	r6, sl
 8005a74:	465f      	mov	r7, fp
 8005a76:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005a78:	b508      	push	{r3, lr}
 8005a7a:	b672      	cpsid	i
 8005a7c:	f7ff f916 	bl	8004cac <vTaskSwitchContext>
 8005a80:	b662      	cpsie	i
 8005a82:	bc0c      	pop	{r2, r3}
 8005a84:	6811      	ldr	r1, [r2, #0]
 8005a86:	6808      	ldr	r0, [r1, #0]
 8005a88:	3010      	adds	r0, #16
 8005a8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005a8c:	46a0      	mov	r8, r4
 8005a8e:	46a9      	mov	r9, r5
 8005a90:	46b2      	mov	sl, r6
 8005a92:	46bb      	mov	fp, r7
 8005a94:	f380 8809 	msr	PSP, r0
 8005a98:	3820      	subs	r0, #32
 8005a9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005a9c:	4718      	bx	r3
 8005a9e:	46c0      	nop			; (mov r8, r8)

08005aa0 <pxCurrentTCBConst>:
 8005aa0:	200006f8 	.word	0x200006f8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005aa4:	46c0      	nop			; (mov r8, r8)
 8005aa6:	46c0      	nop			; (mov r8, r8)

08005aa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005aae:	f7ff ffc9 	bl	8005a44 <ulSetInterruptMaskFromISR>
 8005ab2:	0003      	movs	r3, r0
 8005ab4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ab6:	f7ff f849 	bl	8004b4c <xTaskIncrementTick>
 8005aba:	1e03      	subs	r3, r0, #0
 8005abc:	d003      	beq.n	8005ac6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005abe:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <xPortSysTickHandler+0x30>)
 8005ac0:	2280      	movs	r2, #128	; 0x80
 8005ac2:	0552      	lsls	r2, r2, #21
 8005ac4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	0018      	movs	r0, r3
 8005aca:	f7ff ffc1 	bl	8005a50 <vClearInterruptMaskFromISR>
}
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	b002      	add	sp, #8
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	46c0      	nop			; (mov r8, r8)
 8005ad8:	e000ed04 	.word	0xe000ed04

08005adc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <prvSetupTimerInterrupt+0x34>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <prvSetupTimerInterrupt+0x38>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005aec:	4b0a      	ldr	r3, [pc, #40]	; (8005b18 <prvSetupTimerInterrupt+0x3c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	22fa      	movs	r2, #250	; 0xfa
 8005af2:	0091      	lsls	r1, r2, #2
 8005af4:	0018      	movs	r0, r3
 8005af6:	f7fa fb07 	bl	8000108 <__udivsi3>
 8005afa:	0003      	movs	r3, r0
 8005afc:	001a      	movs	r2, r3
 8005afe:	4b07      	ldr	r3, [pc, #28]	; (8005b1c <prvSetupTimerInterrupt+0x40>)
 8005b00:	3a01      	subs	r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005b04:	4b02      	ldr	r3, [pc, #8]	; (8005b10 <prvSetupTimerInterrupt+0x34>)
 8005b06:	2207      	movs	r2, #7
 8005b08:	601a      	str	r2, [r3, #0]
}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	e000e010 	.word	0xe000e010
 8005b14:	e000e018 	.word	0xe000e018
 8005b18:	20000000 	.word	0x20000000
 8005b1c:	e000e014 	.word	0xe000e014

08005b20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005b2c:	f7fe ff68 	bl	8004a00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b30:	4b49      	ldr	r3, [pc, #292]	; (8005c58 <pvPortMalloc+0x138>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b38:	f000 f8e0 	bl	8005cfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b3c:	4b47      	ldr	r3, [pc, #284]	; (8005c5c <pvPortMalloc+0x13c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	4013      	ands	r3, r2
 8005b44:	d000      	beq.n	8005b48 <pvPortMalloc+0x28>
 8005b46:	e079      	b.n	8005c3c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d012      	beq.n	8005b74 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8005b4e:	2208      	movs	r2, #8
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	189b      	adds	r3, r3, r2
 8005b54:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2207      	movs	r2, #7
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d00a      	beq.n	8005b74 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2207      	movs	r2, #7
 8005b62:	4393      	bics	r3, r2
 8005b64:	3308      	adds	r3, #8
 8005b66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2207      	movs	r2, #7
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	d001      	beq.n	8005b74 <pvPortMalloc+0x54>
 8005b70:	b672      	cpsid	i
 8005b72:	e7fe      	b.n	8005b72 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d060      	beq.n	8005c3c <pvPortMalloc+0x11c>
 8005b7a:	4b39      	ldr	r3, [pc, #228]	; (8005c60 <pvPortMalloc+0x140>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d85b      	bhi.n	8005c3c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b84:	4b37      	ldr	r3, [pc, #220]	; (8005c64 <pvPortMalloc+0x144>)
 8005b86:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005b88:	4b36      	ldr	r3, [pc, #216]	; (8005c64 <pvPortMalloc+0x144>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b8e:	e004      	b.n	8005b9a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d903      	bls.n	8005bac <pvPortMalloc+0x8c>
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1f1      	bne.n	8005b90 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bac:	4b2a      	ldr	r3, [pc, #168]	; (8005c58 <pvPortMalloc+0x138>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d042      	beq.n	8005c3c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2208      	movs	r2, #8
 8005bbc:	189b      	adds	r3, r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	1ad2      	subs	r2, r2, r3
 8005bd0:	2308      	movs	r3, #8
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d916      	bls.n	8005c06 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	18d3      	adds	r3, r2, r3
 8005bde:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2207      	movs	r2, #7
 8005be4:	4013      	ands	r3, r2
 8005be6:	d001      	beq.n	8005bec <pvPortMalloc+0xcc>
 8005be8:	b672      	cpsid	i
 8005bea:	e7fe      	b.n	8005bea <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	1ad2      	subs	r2, r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	0018      	movs	r0, r3
 8005c02:	f000 f8db 	bl	8005dbc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c06:	4b16      	ldr	r3, [pc, #88]	; (8005c60 <pvPortMalloc+0x140>)
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	1ad2      	subs	r2, r2, r3
 8005c10:	4b13      	ldr	r3, [pc, #76]	; (8005c60 <pvPortMalloc+0x140>)
 8005c12:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c14:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <pvPortMalloc+0x140>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <pvPortMalloc+0x148>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d203      	bcs.n	8005c28 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c20:	4b0f      	ldr	r3, [pc, #60]	; (8005c60 <pvPortMalloc+0x140>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	4b10      	ldr	r3, [pc, #64]	; (8005c68 <pvPortMalloc+0x148>)
 8005c26:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <pvPortMalloc+0x13c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	431a      	orrs	r2, r3
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c3c:	f7fe feec 	bl	8004a18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2207      	movs	r2, #7
 8005c44:	4013      	ands	r3, r2
 8005c46:	d001      	beq.n	8005c4c <pvPortMalloc+0x12c>
 8005c48:	b672      	cpsid	i
 8005c4a:	e7fe      	b.n	8005c4a <pvPortMalloc+0x12a>
	return pvReturn;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
}
 8005c4e:	0018      	movs	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b006      	add	sp, #24
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	2000192c 	.word	0x2000192c
 8005c5c:	20001938 	.word	0x20001938
 8005c60:	20001930 	.word	0x20001930
 8005c64:	20001924 	.word	0x20001924
 8005c68:	20001934 	.word	0x20001934

08005c6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d035      	beq.n	8005cea <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c7e:	2308      	movs	r3, #8
 8005c80:	425b      	negs	r3, r3
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	18d3      	adds	r3, r2, r3
 8005c86:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	4b18      	ldr	r3, [pc, #96]	; (8005cf4 <vPortFree+0x88>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4013      	ands	r3, r2
 8005c96:	d101      	bne.n	8005c9c <vPortFree+0x30>
 8005c98:	b672      	cpsid	i
 8005c9a:	e7fe      	b.n	8005c9a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <vPortFree+0x3c>
 8005ca4:	b672      	cpsid	i
 8005ca6:	e7fe      	b.n	8005ca6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	4b11      	ldr	r3, [pc, #68]	; (8005cf4 <vPortFree+0x88>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	d01a      	beq.n	8005cea <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d116      	bne.n	8005cea <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <vPortFree+0x88>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	401a      	ands	r2, r3
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ccc:	f7fe fe98 	bl	8004a00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <vPortFree+0x8c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	18d2      	adds	r2, r2, r3
 8005cda:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <vPortFree+0x8c>)
 8005cdc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f000 f86b 	bl	8005dbc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ce6:	f7fe fe97 	bl	8004a18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	46bd      	mov	sp, r7
 8005cee:	b004      	add	sp, #16
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	20001938 	.word	0x20001938
 8005cf8:	20001930 	.word	0x20001930

08005cfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d02:	23c0      	movs	r3, #192	; 0xc0
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d08:	4b26      	ldr	r3, [pc, #152]	; (8005da4 <prvHeapInit+0xa8>)
 8005d0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2207      	movs	r2, #7
 8005d10:	4013      	ands	r3, r2
 8005d12:	d00c      	beq.n	8005d2e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3307      	adds	r3, #7
 8005d18:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2207      	movs	r2, #7
 8005d1e:	4393      	bics	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	1ad2      	subs	r2, r2, r3
 8005d28:	4b1e      	ldr	r3, [pc, #120]	; (8005da4 <prvHeapInit+0xa8>)
 8005d2a:	18d3      	adds	r3, r2, r3
 8005d2c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d32:	4b1d      	ldr	r3, [pc, #116]	; (8005da8 <prvHeapInit+0xac>)
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d38:	4b1b      	ldr	r3, [pc, #108]	; (8005da8 <prvHeapInit+0xac>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	18d3      	adds	r3, r2, r3
 8005d44:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d46:	2208      	movs	r2, #8
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2207      	movs	r2, #7
 8005d52:	4393      	bics	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4b14      	ldr	r3, [pc, #80]	; (8005dac <prvHeapInit+0xb0>)
 8005d5a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005d5c:	4b13      	ldr	r3, [pc, #76]	; (8005dac <prvHeapInit+0xb0>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2200      	movs	r2, #0
 8005d62:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d64:	4b11      	ldr	r3, [pc, #68]	; (8005dac <prvHeapInit+0xb0>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	1ad2      	subs	r2, r2, r3
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d7a:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <prvHeapInit+0xb0>)
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <prvHeapInit+0xb4>)
 8005d88:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <prvHeapInit+0xb8>)
 8005d90:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d92:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <prvHeapInit+0xbc>)
 8005d94:	2280      	movs	r2, #128	; 0x80
 8005d96:	0612      	lsls	r2, r2, #24
 8005d98:	601a      	str	r2, [r3, #0]
}
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	b004      	add	sp, #16
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	20000d24 	.word	0x20000d24
 8005da8:	20001924 	.word	0x20001924
 8005dac:	2000192c 	.word	0x2000192c
 8005db0:	20001934 	.word	0x20001934
 8005db4:	20001930 	.word	0x20001930
 8005db8:	20001938 	.word	0x20001938

08005dbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005dc4:	4b27      	ldr	r3, [pc, #156]	; (8005e64 <prvInsertBlockIntoFreeList+0xa8>)
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	e002      	b.n	8005dd0 <prvInsertBlockIntoFreeList+0x14>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d8f7      	bhi.n	8005dca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	18d3      	adds	r3, r2, r3
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d108      	bne.n	8005dfe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	18d2      	adds	r2, r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	18d2      	adds	r2, r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d118      	bne.n	8005e44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <prvInsertBlockIntoFreeList+0xac>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d00d      	beq.n	8005e3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	18d2      	adds	r2, r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	e008      	b.n	8005e4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e3a:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <prvInsertBlockIntoFreeList+0xac>)
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	e003      	b.n	8005e4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d002      	beq.n	8005e5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	b004      	add	sp, #16
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	20001924 	.word	0x20001924
 8005e68:	2000192c 	.word	0x2000192c

08005e6c <__libc_init_array>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	2600      	movs	r6, #0
 8005e70:	4d0c      	ldr	r5, [pc, #48]	; (8005ea4 <__libc_init_array+0x38>)
 8005e72:	4c0d      	ldr	r4, [pc, #52]	; (8005ea8 <__libc_init_array+0x3c>)
 8005e74:	1b64      	subs	r4, r4, r5
 8005e76:	10a4      	asrs	r4, r4, #2
 8005e78:	42a6      	cmp	r6, r4
 8005e7a:	d109      	bne.n	8005e90 <__libc_init_array+0x24>
 8005e7c:	2600      	movs	r6, #0
 8005e7e:	f000 f82b 	bl	8005ed8 <_init>
 8005e82:	4d0a      	ldr	r5, [pc, #40]	; (8005eac <__libc_init_array+0x40>)
 8005e84:	4c0a      	ldr	r4, [pc, #40]	; (8005eb0 <__libc_init_array+0x44>)
 8005e86:	1b64      	subs	r4, r4, r5
 8005e88:	10a4      	asrs	r4, r4, #2
 8005e8a:	42a6      	cmp	r6, r4
 8005e8c:	d105      	bne.n	8005e9a <__libc_init_array+0x2e>
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	00b3      	lsls	r3, r6, #2
 8005e92:	58eb      	ldr	r3, [r5, r3]
 8005e94:	4798      	blx	r3
 8005e96:	3601      	adds	r6, #1
 8005e98:	e7ee      	b.n	8005e78 <__libc_init_array+0xc>
 8005e9a:	00b3      	lsls	r3, r6, #2
 8005e9c:	58eb      	ldr	r3, [r5, r3]
 8005e9e:	4798      	blx	r3
 8005ea0:	3601      	adds	r6, #1
 8005ea2:	e7f2      	b.n	8005e8a <__libc_init_array+0x1e>
 8005ea4:	08005fdc 	.word	0x08005fdc
 8005ea8:	08005fdc 	.word	0x08005fdc
 8005eac:	08005fdc 	.word	0x08005fdc
 8005eb0:	08005fe0 	.word	0x08005fe0

08005eb4 <memcpy>:
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	b510      	push	{r4, lr}
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d100      	bne.n	8005ebe <memcpy+0xa>
 8005ebc:	bd10      	pop	{r4, pc}
 8005ebe:	5ccc      	ldrb	r4, [r1, r3]
 8005ec0:	54c4      	strb	r4, [r0, r3]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	e7f8      	b.n	8005eb8 <memcpy+0x4>

08005ec6 <memset>:
 8005ec6:	0003      	movs	r3, r0
 8005ec8:	1882      	adds	r2, r0, r2
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d100      	bne.n	8005ed0 <memset+0xa>
 8005ece:	4770      	bx	lr
 8005ed0:	7019      	strb	r1, [r3, #0]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	e7f9      	b.n	8005eca <memset+0x4>
	...

08005ed8 <_init>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	46c0      	nop			; (mov r8, r8)
 8005edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ede:	bc08      	pop	{r3}
 8005ee0:	469e      	mov	lr, r3
 8005ee2:	4770      	bx	lr

08005ee4 <_fini>:
 8005ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eea:	bc08      	pop	{r3}
 8005eec:	469e      	mov	lr, r3
 8005eee:	4770      	bx	lr
